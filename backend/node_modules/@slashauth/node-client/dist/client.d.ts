import * as rm from 'typed-rest-client';
import { Config } from './config';
import { OrganizationController } from './controllers/organization';
import { UserController } from './controllers/user';
import { FileController } from './controllers/file';
import { AppController } from './controllers/app';
declare type ErrorMessage = string;
declare type PageInfo = {
    cursor?: string;
    hasMore: boolean;
};
declare type Metadata = {
    error: ErrorMessage | null;
    headers: Object;
    statusCode: number;
};
export declare type SlashauthResponse<ResponseData> = {
    data?: ResponseData;
} & Metadata;
export declare type SlashauthResponseWithPagination<ResponseData> = {
    paginatedResponse?: {
        data: ResponseData | null;
        pageInfo: PageInfo;
    };
} & Metadata;
declare type TypeOfClassMethod<T, M extends keyof T> = T[M] extends Function ? T[M] : never;
export interface WrappedClient {
    get<T>(...args: Parameters<TypeOfClassMethod<rm.RestClient, 'get'>>): Promise<SlashauthResponse<T>>;
    create<T>(...args: Parameters<TypeOfClassMethod<rm.RestClient, 'create'>>): Promise<SlashauthResponse<T>>;
    replace<T>(...args: Parameters<TypeOfClassMethod<rm.RestClient, 'replace'>>): Promise<SlashauthResponse<T>>;
    del<T>(...args: Parameters<TypeOfClassMethod<rm.RestClient, 'del'>>): Promise<SlashauthResponse<T>>;
    update<T>(...args: Parameters<TypeOfClassMethod<rm.RestClient, 'update'>>): Promise<SlashauthResponse<T>>;
}
export declare class SlashauthClient {
    app: AppController;
    user: UserController;
    organization: OrganizationController;
    file: FileController;
    constructor(client_id: string, client_secret: string, additional: Partial<Config>);
}
export {};
