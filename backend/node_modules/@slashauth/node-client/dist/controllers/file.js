"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileController = void 0;
const types_1 = require("@slashauth/types");
const axios_1 = __importDefault(require("axios"));
const query_1 = require("../utils/query");
const strings_1 = require("../utils/strings");
const url_1 = require("../utils/url");
const controller_1 = require("./controller");
const client_1 = require("../utils/client");
class FileController extends controller_1.Controller {
    constructor(client_id, client_secret, apiClient) {
        super(client_id, client_secret, apiClient);
    }
    async getFileByID({ id, organizationID, }) {
        const input = {};
        if (organizationID) {
            input.organizationID = organizationID;
        }
        const urlParams = (0, query_1.signQuery)({
            input,
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files/${id}`;
        return this.apiClient
            .get(url, {
            queryParameters: {
                params: urlParams,
            },
        })
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async getPresignedURL({ id, organizationID, }) {
        const input = {};
        if (organizationID) {
            input.organizationID = organizationID;
        }
        const urlParams = (0, query_1.signQuery)({
            input,
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files/${id}/url`;
        return this.apiClient
            .get(url, {
            queryParameters: { params: urlParams },
        })
            .then((0, client_1.transformResponse)((res) => res && res.data.url));
    }
    async listFiles({ organizationID, cursor, }) {
        const input = {};
        if (organizationID) {
            input.organizationID = organizationID;
        }
        if (cursor) {
            input.cursor = cursor;
        }
        const urlParams = (0, query_1.signQuery)({
            input,
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files`;
        return this.apiClient
            .get(url, { queryParameters: { params: urlParams } })
            .then((resp) => {
            if (resp.data) {
                return {
                    paginatedResponse: {
                        data: resp.data.data,
                        pageInfo: {
                            cursor: resp.data.cursor,
                            hasMore: resp.data.hasMore,
                        },
                    },
                    error: resp.error,
                    headers: resp.headers,
                    statusCode: resp.statusCode,
                };
            }
            else {
                return {
                    error: resp.error,
                    headers: resp.headers,
                    statusCode: resp.statusCode,
                };
            }
        });
    }
    async addFile({ organizationID, userID, name, description, rolesRequired, mimeType, file, }) {
        const { data } = await this.createBlobUpload({
            organizationID,
            wallet: userID,
            mimeType,
            fileSize: file.length, // TODO: Change this
        });
        if (!data) {
            throw new Error('Failed to upload file');
        }
        const { signedUrl: uploadURL, id } = data;
        await (0, axios_1.default)({
            method: 'PUT',
            url: uploadURL,
            data: file,
            headers: {
                'Content-Type': mimeType,
            },
        });
        await this.updateBlobUploadStatus({
            id,
            organizationID,
            status: types_1.BlobStatus.COMPLETED,
        });
        return this.createFile({
            organizationID,
            blobID: id,
            wallet: userID,
            name,
            description,
            rolesRequired,
        });
    }
    async updateFile({ id, organizationID, name, description, rolesRequired, }) {
        const body = (0, query_1.signBody)({
            input: {
                name,
                description,
                rolesRequired,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files/${id}`;
        return await this.apiClient
            .update(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async deleteFile({ id, organizationID, }) {
        const urlParams = (0, query_1.signQuery)({
            input: {},
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files/${id}`;
        return await this.apiClient
            .del(url, {
            queryParameters: {
                params: urlParams,
            },
        })
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async createFile({ organizationID, blobID, wallet, name, description, rolesRequired, }) {
        const body = (0, query_1.signBody)({
            input: {
                blobID,
                wallet,
                name,
                description,
                rolesRequired,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/files`;
        return await this.apiClient
            .create(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    // BLOBS
    async createBlobUpload({ organizationID, wallet, mimeType, fileSize, }) {
        const body = (0, query_1.signBody)({
            input: {
                wallet,
                mimeType,
                fileSize,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/blobs`;
        return await this.apiClient
            .create(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async updateBlobUploadStatus({ id, organizationID, status, }) {
        const statusString = (0, strings_1.checkBlobStatus)(status);
        const body = (0, query_1.signBody)({
            input: {
                status: statusString,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/blobs/${id}`;
        return await this.apiClient
            .update(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
}
exports.FileController = FileController;
//# sourceMappingURL=file.js.map