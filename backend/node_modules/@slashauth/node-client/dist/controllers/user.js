"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserController = void 0;
const query_1 = require("../utils/query");
const strings_1 = require("../utils/strings");
const controller_1 = require("./controller");
const url_1 = require("../utils/url");
const client_1 = require("../utils/client");
// TODO: Need to add:
// - How do we add a user to an org?
class UserController extends controller_1.Controller {
    constructor(client_id, client_secret, apiClient) {
        super(client_id, client_secret, apiClient);
    }
    async validateToken({ token, }) {
        try {
            const resp = await this.apiClient.get(`/validate_token`, {
                queryParameters: {
                    params: {
                        client_id: this.client_id,
                        token,
                    },
                },
            });
            if (resp.statusCode !== 200) {
                throw new Error('token is not valid');
            }
            const encodedClaims = token.split('.')[1];
            if (!encodedClaims) {
                throw new SyntaxError('malformed token');
            }
            const decodedClaims = JSON.parse((0, strings_1.base64Decode)(encodedClaims));
            let isUserID = false;
            if (decodedClaims.sub.startsWith('user.')) {
                isUserID = true;
            }
            const getWalletAddress = async () => {
                if (isUserID) {
                    const { data: user } = await this.getUserByID({
                        userID: decodedClaims.sub,
                    });
                    return (user && user.wallet) || null;
                }
                else {
                    // We already have the wallet address, return.
                    return decodedClaims.sub;
                }
            };
            return {
                data: {
                    type: decodedClaims.type,
                    userID: isUserID ? decodedClaims.sub : undefined,
                    wallet: isUserID ? decodedClaims.wallet : decodedClaims.sub,
                    clientID: decodedClaims.client_id,
                    issuedAt: decodedClaims.iat,
                    expiresAt: decodedClaims.exp,
                    issuer: decodedClaims.iss,
                    getWalletAddress,
                },
                error: resp.error,
                headers: resp.headers,
                statusCode: resp.statusCode,
            };
        }
        catch (err) {
            throw err;
        }
    }
    async hasRole({ userID, role, organizationID, }) {
        const encodedRole = Buffer.from(role, 'utf8').toString('base64');
        const urlParams = (0, query_1.signQuery)({
            input: {
                userID,
                role: encodedRole,
                encoded: 'true',
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/has_role`;
        return this.apiClient
            .get(url, {
            queryParameters: { params: urlParams },
        })
            .then((0, client_1.transformResponse)((res) => res));
    }
    async hasRoleWallet({ address, role, organizationID, }) {
        const encodedRole = Buffer.from(role, 'utf8').toString('base64');
        const urlParams = (0, query_1.signQuery)({
            input: {
                address,
                role: encodedRole,
                encoded: 'true',
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/has_role`;
        return await this.apiClient
            .get(url, {
            queryParameters: { params: urlParams },
        })
            .then((0, client_1.transformResponse)((res) => res));
    }
    async hasRoleToken({ token, role, organizationID, }) {
        const encodedRole = Buffer.from(role, 'utf8').toString('base64');
        const urlParams = {
            role: encodedRole,
            encoded: 'true',
        };
        let url;
        if (organizationID) {
            url = `/p/${this.client_id}/organizations/${organizationID}/has_role`;
        }
        else {
            url = `/p/${this.client_id}/has_role`;
        }
        return this.apiClient
            .get(url, {
            additionalHeaders: {
                Authorization: `Bearer ${token}`,
            },
            queryParameters: {
                params: urlParams,
            },
        })
            .then((0, client_1.transformResponse)((res) => res));
    }
    async getOrgMemberships({ userID, }) {
        const urlParams = (0, query_1.signQuery)({
            input: {
                userID,
            },
            secret: this.client_secret,
        });
        return this.apiClient
            .get(`/s/${this.client_id}/org_memberships`, {
            queryParameters: {
                params: urlParams,
            },
        })
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async getUserByID({ userID, organizationID, }) {
        const input = {};
        if (organizationID) {
            input.organizationID = organizationID;
        }
        const urlParams = (0, query_1.signQuery)({
            input,
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/users/${userID}`;
        return this.apiClient
            .get(url, {
            queryParameters: {
                params: urlParams,
            },
        })
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async getUsers({ organizationID, cursor, }) {
        const input = {};
        if (organizationID) {
            input.organizationID = organizationID;
        }
        if (cursor) {
            input.cursor = cursor;
        }
        const urlParams = (0, query_1.signQuery)({
            input,
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/users`;
        return this.apiClient
            .get(url, {
            queryParameters: {
                params: urlParams,
            },
        })
            .then((resp) => {
            if (resp.data) {
                return {
                    paginatedResponse: {
                        data: resp.data.data,
                        pageInfo: {
                            cursor: resp.data.cursor,
                            hasMore: resp.data.hasMore,
                        },
                    },
                    error: resp.error,
                    headers: resp.headers,
                    statusCode: resp.statusCode,
                };
            }
            else {
                return {
                    error: resp.error,
                    headers: resp.headers,
                    statusCode: resp.statusCode,
                };
            }
        });
    }
    async createUser({ wallet, email, phoneNumber, nickname, metadata, }) {
        const body = (0, query_1.signBody)({
            input: {
                wallet,
                email,
                phoneNumber,
                nickname,
                metadata,
            },
            secret: this.client_secret,
        });
        const url = `/s/${this.client_id}/users`;
        return await this.apiClient
            .create(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async updateUserMetadata({ userID, nickname, metadata, organizationID, }) {
        const body = (0, query_1.signBody)({
            input: {
                nickname,
                metadata,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/users/${userID}`;
        return await this.apiClient
            .replace(url, body)
            .then((0, client_1.transformResponse)((res) => res && res.data));
    }
    async addAssignedRole({ userID, role, organizationID, }) {
        const body = (0, query_1.signBody)({
            input: {
                role,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/users/${userID}/assigned_role`;
        return await this.apiClient.create(url, body);
    }
    async removeAssignedRole({ userID, role, organizationID, }) {
        const encodedRole = Buffer.from(role, 'utf8').toString('base64');
        const urlParams = (0, query_1.signQuery)({
            input: {
                role: encodedRole,
            },
            secret: this.client_secret,
        });
        const url = `${(0, url_1.getBaseURL)(this.client_id, organizationID)}/users/${userID}/assigned_role`;
        return await this.apiClient.del(url, {
            queryParameters: {
                params: urlParams,
            },
        });
    }
}
exports.UserController = UserController;
//# sourceMappingURL=user.js.map