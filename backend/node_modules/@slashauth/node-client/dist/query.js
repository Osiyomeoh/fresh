"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.signBody = exports.signQuery = void 0;
const crypto_1 = require("crypto");
const signQuery = ({ input, secret, nonce, }) => {
    const params = new URLSearchParams();
    for (const k of Object.keys(input)) {
        params.append(k, input[k]);
    }
    if (params.get('nonce')) {
        params.delete('nonce');
    }
    if (nonce) {
        params.append('nonce', nonce);
    }
    else {
        params.append('nonce', `${Date.now()}`);
    }
    params.sort();
    const hmac = (0, crypto_1.createHmac)('sha256', secret);
    params.append('sig', hmac.update(params.toString()).digest('hex'));
    const response = {};
    for (const k of params.keys()) {
        response[k] = params.get(k);
    }
    return response;
};
exports.signQuery = signQuery;
const signBody = ({ input, secret, nonce, }) => {
    const params = {};
    for (const k of Object.keys(input)) {
        if (k === 'nonce') {
            continue;
        }
        params[k] = input[k];
    }
    if (nonce) {
        params['nonce'] = nonce;
    }
    else {
        params['nonce'] = `${Date.now()}`;
    }
    const ordered = Object.keys(params)
        .sort()
        .reduce((obj, key) => {
        obj[key] = params[key];
        return obj;
    }, {});
    const hmac = (0, crypto_1.createHmac)('sha256', secret);
    params['sig'] = hmac.update(JSON.stringify(ordered)).digest('hex');
    return params;
};
exports.signBody = signBody;
//# sourceMappingURL=query.js.map