{"ast":null,"code":"import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"topic\");\n  return params;\n}\nexport function parsePublishRequest(request) {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n  return params;\n}\nexport function parseUnsubscribeRequest(request) {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"id\");\n  return params;\n}\nexport function parseSubscriptionRequest(request) {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n  return params;\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAT,QAA2B,QAA3B;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,iBAHF,EAIEC,iBAJF,EAKEC,oBALF,EAMEC,oBANF,EAOEC,mBAPF,EAQEC,mBARF,QASO,cATP;AAWA,OAAM,SAAUC,qBAAV,CACJC,OADI,EACmB;EAEvB,IAAI,CAACP,iBAAiB,CAACO,OAAO,CAACC,MAAT,CAAtB,EAAwC;IACtC,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;EACD;;EACD,IAAI,CAACR,iBAAiB,CAACM,OAAO,CAACG,MAAT,CAAtB,EAAwC;IACtC,MAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;EACD;;EACD,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAvB;EAEAb,UAAU,CAACa,MAAD,EAAS,OAAT,CAAV;EAEA,OAAOA,MAAP;AACD;AAED,OAAM,SAAUC,mBAAV,CACJJ,OADI,EACmB;EAEvB,IAAI,CAACT,eAAe,CAACS,OAAO,CAACC,MAAT,CAApB,EAAsC;IACpC,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;EACD;;EACD,IAAI,CAACV,eAAe,CAACQ,OAAO,CAACG,MAAT,CAApB,EAAsC;IACpC,MAAM,IAAID,KAAJ,CAAU,6CAAV,CAAN;EACD;;EACD,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAvB;EAEAb,UAAU,CAACa,MAAD,EAAS,OAAT,CAAV;EACAb,UAAU,CAACa,MAAD,EAAS,SAAT,CAAV;EACAb,UAAU,CAACa,MAAD,EAAS,KAAT,EAAgB,QAAhB,CAAV;EAEA,OAAOA,MAAP;AACD;AAED,OAAM,SAAUE,uBAAV,CACJL,OADI,EACmB;EAEvB,IAAI,CAACH,mBAAmB,CAACG,OAAO,CAACC,MAAT,CAAxB,EAA0C;IACxC,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;EACD;;EACD,IAAI,CAACJ,mBAAmB,CAACE,OAAO,CAACG,MAAT,CAAxB,EAA0C;IACxC,MAAM,IAAID,KAAJ,CAAU,iDAAV,CAAN;EACD;;EACD,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAvB;EAEAb,UAAU,CAACa,MAAD,EAAS,IAAT,CAAV;EAEA,OAAOA,MAAP;AACD;AAED,OAAM,SAAUG,wBAAV,CACJN,OADI,EACmB;EAEvB,IAAI,CAACL,oBAAoB,CAACK,OAAO,CAACC,MAAT,CAAzB,EAA2C;IACzC,MAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;EACD;;EACD,IAAI,CAACN,oBAAoB,CAACI,OAAO,CAACG,MAAT,CAAzB,EAA2C;IACzC,MAAM,IAAID,KAAJ,CAAU,kDAAV,CAAN;EACD;;EACD,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAvB;EAEAb,UAAU,CAACa,MAAD,EAAS,IAAT,CAAV;EACAb,UAAU,CAACa,MAAD,EAAS,MAAT,CAAV;EAEA,OAAOA,MAAP;AACD","names":["assertType","isPublishMethod","isPublishParams","isSubscribeMethod","isSubscribeParams","isSubscriptionMethod","isSubscriptionParams","isUnsubscribeMethod","isUnsubscribeParams","parseSubscribeRequest","request","method","Error","params","parsePublishRequest","parseUnsubscribeRequest","parseSubscriptionRequest"],"sources":["../../src/parsers.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}