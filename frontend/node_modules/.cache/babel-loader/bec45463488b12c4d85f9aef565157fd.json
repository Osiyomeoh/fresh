{"ast":null,"code":"import { InjectedConnector } from \"./chunk-6IU3YKWQ.js\";\nimport { __privateAdd, __privateGet, __privateSet, __publicField } from \"./chunk-5NCTPR6C.js\"; // src/metaMask.ts\n\nimport { ConnectorNotFoundError, ResourceUnavailableError, UserRejectedRequestError, getClient } from \"@wagmi/core\";\nimport { getAddress } from \"ethers/lib/utils.js\";\n\nvar _UNSTABLE_shimOnConnectSelectAccount;\n\nvar MetaMaskConnector = class extends InjectedConnector {\n  constructor() {\n    let {\n      chains,\n      options: options_\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n\n      getProvider() {\n        function getReady(ethereum2) {\n          const isMetaMask = !!ethereum2?.isMetaMask;\n          if (!isMetaMask) return;\n          if (ethereum2.isBraveWallet && !ethereum2._events && !ethereum2._state) return;\n          if (ethereum2.isAvalanche) return;\n          if (ethereum2.isKuCoinWallet) return;\n          if (ethereum2.isPortal) return;\n          if (ethereum2.isTokenPocket) return;\n          if (ethereum2.isTokenary) return;\n          return ethereum2;\n        }\n\n        if (typeof window === \"undefined\") return;\n        const ethereum = window.ethereum;\n        if (ethereum?.providers) return ethereum.providers.find(getReady);\n        return getReady(ethereum);\n      },\n\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n\n    __publicField(this, \"id\", \"metaMask\");\n\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      let account = null;\n\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) try {\n          await provider.request({\n            method: \"wallet_requestPermissions\",\n            params: [{\n              eth_accounts: {}\n            }]\n          });\n          account = await this.getAccount();\n        } catch (error) {\n          if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n        }\n      }\n\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = getAddress(accounts[0]);\n      }\n\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n\n      if (this.options?.shimDisconnect) getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\nexport { MetaMaskConnector };","map":{"version":3,"names":["InjectedConnector","__privateAdd","__privateGet","__privateSet","__publicField","ConnectorNotFoundError","ResourceUnavailableError","UserRejectedRequestError","getClient","getAddress","_UNSTABLE_shimOnConnectSelectAccount","MetaMaskConnector","constructor","chains","options","options_","name","shimDisconnect","shimChainChangedDisconnect","getProvider","getReady","ethereum2","isMetaMask","isBraveWallet","_events","_state","isAvalanche","isKuCoinWallet","isPortal","isTokenPocket","isTokenary","window","ethereum","providers","find","UNSTABLE_shimOnConnectSelectAccount","connect","chainId","provider","on","onAccountsChanged","onChainChanged","onDisconnect","emit","type","account","storage","getItem","shimDisconnectKey","getAccount","catch","isConnected","request","method","params","eth_accounts","error","isUserRejectedRequestError","accounts","id","getChainId","unsupported","isChainUnsupported","chain","switchChain","setItem","code","WeakMap"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@wagmi/connectors/dist/metaMask.js"],"sourcesContent":["import {\n  InjectedConnector\n} from \"./chunk-6IU3YKWQ.js\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateSet,\n  __publicField\n} from \"./chunk-5NCTPR6C.js\";\n\n// src/metaMask.ts\nimport {\n  ConnectorNotFoundError,\n  ResourceUnavailableError,\n  UserRejectedRequestError,\n  getClient\n} from \"@wagmi/core\";\nimport { getAddress } from \"ethers/lib/utils.js\";\nvar _UNSTABLE_shimOnConnectSelectAccount;\nvar MetaMaskConnector = class extends InjectedConnector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider() {\n        function getReady(ethereum2) {\n          const isMetaMask = !!ethereum2?.isMetaMask;\n          if (!isMetaMask)\n            return;\n          if (ethereum2.isBraveWallet && !ethereum2._events && !ethereum2._state)\n            return;\n          if (ethereum2.isAvalanche)\n            return;\n          if (ethereum2.isKuCoinWallet)\n            return;\n          if (ethereum2.isPortal)\n            return;\n          if (ethereum2.isTokenPocket)\n            return;\n          if (ethereum2.isTokenary)\n            return;\n          return ethereum2;\n        }\n        if (typeof window === \"undefined\")\n          return;\n        const ethereum = window.ethereum;\n        if (ethereum?.providers)\n          return ethereum.providers.find(getReady);\n        return getReady(ethereum);\n      },\n      ...options_\n    };\n    super({ chains, options });\n    __publicField(this, \"id\", \"metaMask\");\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", { type: \"connecting\" });\n      let account = null;\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected)\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{ eth_accounts: {} }]\n            });\n            account = await this.getAccount();\n          } catch (error) {\n            if (this.isUserRejectedRequestError(error))\n              throw new UserRejectedRequestError(error);\n          }\n      }\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = getAddress(accounts[0]);\n      }\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options?.shimDisconnect)\n        getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return { account, chain: { id, unsupported }, provider };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      if (error.code === -32002)\n        throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\nexport {\n  MetaMaskConnector\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}