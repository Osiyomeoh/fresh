{"ast":null,"code":"const Mode = require('./mode');\n\nfunction NumericData(data) {\n  this.mode = Mode.NUMERIC;\n  this.data = data.toString();\n}\n\nNumericData.getBitsLength = function getBitsLength(length) {\n  return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n};\n\nNumericData.prototype.getLength = function getLength() {\n  return this.data.length;\n};\n\nNumericData.prototype.getBitsLength = function getBitsLength() {\n  return NumericData.getBitsLength(this.data.length);\n};\n\nNumericData.prototype.write = function write(bitBuffer) {\n  let i, group, value; // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3);\n    value = parseInt(group, 10);\n    bitBuffer.put(value, 10);\n  } // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n\n\n  const remainingNum = this.data.length - i;\n\n  if (remainingNum > 0) {\n    group = this.data.substr(i);\n    value = parseInt(group, 10);\n    bitBuffer.put(value, remainingNum * 3 + 1);\n  }\n};\n\nmodule.exports = NumericData;","map":{"version":3,"names":["Mode","require","NumericData","data","mode","NUMERIC","toString","getBitsLength","length","Math","floor","prototype","getLength","write","bitBuffer","i","group","value","substr","parseInt","put","remainingNum","module","exports"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@web3modal/ui/node_modules/qrcode/lib/core/numeric-data.js"],"sourcesContent":["const Mode = require('./mode')\n\nfunction NumericData (data) {\n  this.mode = Mode.NUMERIC\n  this.data = data.toString()\n}\n\nNumericData.getBitsLength = function getBitsLength (length) {\n  return 10 * Math.floor(length / 3) + ((length % 3) ? ((length % 3) * 3 + 1) : 0)\n}\n\nNumericData.prototype.getLength = function getLength () {\n  return this.data.length\n}\n\nNumericData.prototype.getBitsLength = function getBitsLength () {\n  return NumericData.getBitsLength(this.data.length)\n}\n\nNumericData.prototype.write = function write (bitBuffer) {\n  let i, group, value\n\n  // The input data string is divided into groups of three digits,\n  // and each group is converted to its 10-bit binary equivalent.\n  for (i = 0; i + 3 <= this.data.length; i += 3) {\n    group = this.data.substr(i, 3)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, 10)\n  }\n\n  // If the number of input digits is not an exact multiple of three,\n  // the final one or two digits are converted to 4 or 7 bits respectively.\n  const remainingNum = this.data.length - i\n  if (remainingNum > 0) {\n    group = this.data.substr(i)\n    value = parseInt(group, 10)\n\n    bitBuffer.put(value, remainingNum * 3 + 1)\n  }\n}\n\nmodule.exports = NumericData\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,SAASC,WAAT,CAAsBC,IAAtB,EAA4B;EAC1B,KAAKC,IAAL,GAAYJ,IAAI,CAACK,OAAjB;EACA,KAAKF,IAAL,GAAYA,IAAI,CAACG,QAAL,EAAZ;AACD;;AAEDJ,WAAW,CAACK,aAAZ,GAA4B,SAASA,aAAT,CAAwBC,MAAxB,EAAgC;EAC1D,OAAO,KAAKC,IAAI,CAACC,KAAL,CAAWF,MAAM,GAAG,CAApB,CAAL,IAAgCA,MAAM,GAAG,CAAV,GAAiBA,MAAM,GAAG,CAAV,GAAe,CAAf,GAAmB,CAAnC,GAAwC,CAAvE,CAAP;AACD,CAFD;;AAIAN,WAAW,CAACS,SAAZ,CAAsBC,SAAtB,GAAkC,SAASA,SAAT,GAAsB;EACtD,OAAO,KAAKT,IAAL,CAAUK,MAAjB;AACD,CAFD;;AAIAN,WAAW,CAACS,SAAZ,CAAsBJ,aAAtB,GAAsC,SAASA,aAAT,GAA0B;EAC9D,OAAOL,WAAW,CAACK,aAAZ,CAA0B,KAAKJ,IAAL,CAAUK,MAApC,CAAP;AACD,CAFD;;AAIAN,WAAW,CAACS,SAAZ,CAAsBE,KAAtB,GAA8B,SAASA,KAAT,CAAgBC,SAAhB,EAA2B;EACvD,IAAIC,CAAJ,EAAOC,KAAP,EAAcC,KAAd,CADuD,CAGvD;EACA;;EACA,KAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,CAAJ,IAAS,KAAKZ,IAAL,CAAUK,MAA/B,EAAuCO,CAAC,IAAI,CAA5C,EAA+C;IAC7CC,KAAK,GAAG,KAAKb,IAAL,CAAUe,MAAV,CAAiBH,CAAjB,EAAoB,CAApB,CAAR;IACAE,KAAK,GAAGE,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAhB;IAEAF,SAAS,CAACM,GAAV,CAAcH,KAAd,EAAqB,EAArB;EACD,CAVsD,CAYvD;EACA;;;EACA,MAAMI,YAAY,GAAG,KAAKlB,IAAL,CAAUK,MAAV,GAAmBO,CAAxC;;EACA,IAAIM,YAAY,GAAG,CAAnB,EAAsB;IACpBL,KAAK,GAAG,KAAKb,IAAL,CAAUe,MAAV,CAAiBH,CAAjB,CAAR;IACAE,KAAK,GAAGE,QAAQ,CAACH,KAAD,EAAQ,EAAR,CAAhB;IAEAF,SAAS,CAACM,GAAV,CAAcH,KAAd,EAAqBI,YAAY,GAAG,CAAf,GAAmB,CAAxC;EACD;AACF,CArBD;;AAuBAC,MAAM,CAACC,OAAP,GAAiBrB,WAAjB"},"metadata":{},"sourceType":"script"}