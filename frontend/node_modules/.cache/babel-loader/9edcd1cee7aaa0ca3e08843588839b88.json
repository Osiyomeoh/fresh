{"ast":null,"code":"import { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs'; // CLASS\n\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime() {\n    let staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4; // make sure that retries that were potentially cancelled due to unmounts can continue\n\n\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config; // Notify cache callback\n\n\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on2, _this$cache$config2;\n\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n          }\n\n          onError(new Error('undefined'));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({\n          type: 'failed',\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasData = typeof data !== 'undefined';\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };","map":{"version":3,"mappings":"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","names":["Query","Removable","constructor","config","abortSignalConsumed","defaultOptions","setOptions","options","observers","cache","logger","defaultLogger","queryKey","queryHash","initialState","state","getDefaultState","scheduleGc","meta","updateCacheTime","cacheTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","replaceData","dispatch","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","promise","retryer","then","noop","catch","Promise","resolve","destroy","silent","reset","isActive","some","observer","enabled","isDisabled","getObserversCount","isStale","isInvalidated","getCurrentResult","isStaleByTime","staleTime","timeUntilStale","onFocus","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","shouldFetchOnReconnect","addObserver","indexOf","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","continueRetry","queryFn","Array","isArray","process","env","NODE_ENV","error","abortController","getAbortController","queryFnContext","pageParam","undefined","addSignalProperty","object","Object","defineProperty","enumerable","get","signal","fetchFn","reject","context","behavior","onFetch","revertState","fetchMeta","_context$fetchOptions","onError","isCancelledError","isFetchingOptimistic","createRetryer","fn","abort","bind","onSuccess","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","action","reducer","fetchFailureCount","fetchFailureReason","_action$meta","canFetch","status","dataUpdateCount","Date","now","errorUpdateCount","errorUpdatedAt","notifyManager","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@tanstack\\query-core\\src\\query.ts"],"sourcesContent":["import { getAbortController, noop, replaceData, timeUntilStale } from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n  FetchStatus,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport type { Retryer } from './retryer'\nimport { isCancelledError, canFetch, createRetryer } from './retryer'\nimport { Removable } from './removable'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  logger?: Logger\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: any\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal?: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  private cache: QueryCache\n  private logger: Logger\n  private promise?: Promise<TData>\n  private retryer?: Retryer<TData>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.abortSignalConsumed = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.logger = config.logger || defaultLogger\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some((observer) => observer.options.enabled !== false)\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch({ cancelRefetch: false })\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true\n            return abortController.signal\n          }\n          return undefined\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(context)\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.retryer = createRetryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error('undefined') as any)\n          return\n        }\n\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}