{"ast":null,"code":"module.exports = getBlocksForRange;\n\nasync function getBlocksForRange(_ref) {\n  let {\n    provider,\n    fromBlock,\n    toBlock\n  } = _ref;\n  if (!fromBlock) fromBlock = toBlock;\n  const fromBlockNumber = hexToInt(fromBlock);\n  const toBlockNumber = hexToInt(toBlock);\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1; // load all blocks from old to new (inclusive)\n\n  const missingBlockNumbers = Array(blockCountToQuery).fill().map((_, index) => fromBlockNumber + index).map(intToHex);\n  const blockBodies = await Promise.all(missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false])));\n  return blockBodies;\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  return Number.parseInt(hexString, 16);\n}\n\nfunction incrementHexInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString;\n  const value = hexToInt(hexString);\n  return intToHex(value + 1);\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int;\n  const hexString = int.toString(16);\n  return '0x' + hexString;\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({\n      id: 1,\n      jsonrpc: '2.0',\n      method,\n      params\n    }, (err, res) => {\n      if (err) return reject(err);\n      resolve(res.result);\n    });\n  });\n}","map":{"version":3,"names":["module","exports","getBlocksForRange","provider","fromBlock","toBlock","fromBlockNumber","hexToInt","toBlockNumber","blockCountToQuery","missingBlockNumbers","Array","fill","map","_","index","intToHex","blockBodies","Promise","all","blockNum","query","hexString","undefined","Number","parseInt","incrementHexInt","value","int","toString","method","params","resolve","reject","sendAsync","id","jsonrpc","err","res","result"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/eth-json-rpc-filters/getBlocksForRange.js"],"sourcesContent":["module.exports = getBlocksForRange\n\nasync function getBlocksForRange({ provider, fromBlock, toBlock }) {\n  if (!fromBlock) fromBlock = toBlock\n\n  const fromBlockNumber = hexToInt(fromBlock)\n  const toBlockNumber = hexToInt(toBlock)\n  const blockCountToQuery = toBlockNumber - fromBlockNumber + 1\n  // load all blocks from old to new (inclusive)\n  const missingBlockNumbers = Array(blockCountToQuery).fill()\n                              .map((_,index) => fromBlockNumber + index)\n                              .map(intToHex)\n  const blockBodies = await Promise.all(\n    missingBlockNumbers.map(blockNum => query(provider, 'eth_getBlockByNumber', [blockNum, false]))\n  )\n  return blockBodies\n}\n\nfunction hexToInt(hexString) {\n  if (hexString === undefined || hexString === null) return hexString\n  return Number.parseInt(hexString, 16)\n}\n\nfunction incrementHexInt(hexString){\n  if (hexString === undefined || hexString === null) return hexString\n  const value = hexToInt(hexString)\n  return intToHex(value + 1)\n}\n\nfunction intToHex(int) {\n  if (int === undefined || int === null) return int\n  const hexString = int.toString(16)\n  return '0x' + hexString\n}\n\nfunction query(provider, method, params) {\n  return new Promise((resolve, reject) => {\n    provider.sendAsync({ id: 1, jsonrpc: '2.0', method, params }, (err, res) => {\n      if (err) return reject(err)\n      resolve(res.result)\n    })\n  })\n}\n"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,iBAAjB;;AAEA,eAAeA,iBAAf,OAAmE;EAAA,IAAlC;IAAEC,QAAF;IAAYC,SAAZ;IAAuBC;EAAvB,CAAkC;EACjE,IAAI,CAACD,SAAL,EAAgBA,SAAS,GAAGC,OAAZ;EAEhB,MAAMC,eAAe,GAAGC,QAAQ,CAACH,SAAD,CAAhC;EACA,MAAMI,aAAa,GAAGD,QAAQ,CAACF,OAAD,CAA9B;EACA,MAAMI,iBAAiB,GAAGD,aAAa,GAAGF,eAAhB,GAAkC,CAA5D,CALiE,CAMjE;;EACA,MAAMI,mBAAmB,GAAGC,KAAK,CAACF,iBAAD,CAAL,CAAyBG,IAAzB,GACCC,GADD,CACK,CAACC,CAAD,EAAGC,KAAH,KAAaT,eAAe,GAAGS,KADpC,EAECF,GAFD,CAEKG,QAFL,CAA5B;EAGA,MAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAR,CACxBT,mBAAmB,CAACG,GAApB,CAAwBO,QAAQ,IAAIC,KAAK,CAAClB,QAAD,EAAW,sBAAX,EAAmC,CAACiB,QAAD,EAAW,KAAX,CAAnC,CAAzC,CADwB,CAA1B;EAGA,OAAOH,WAAP;AACD;;AAED,SAASV,QAAT,CAAkBe,SAAlB,EAA6B;EAC3B,IAAIA,SAAS,KAAKC,SAAd,IAA2BD,SAAS,KAAK,IAA7C,EAAmD,OAAOA,SAAP;EACnD,OAAOE,MAAM,CAACC,QAAP,CAAgBH,SAAhB,EAA2B,EAA3B,CAAP;AACD;;AAED,SAASI,eAAT,CAAyBJ,SAAzB,EAAmC;EACjC,IAAIA,SAAS,KAAKC,SAAd,IAA2BD,SAAS,KAAK,IAA7C,EAAmD,OAAOA,SAAP;EACnD,MAAMK,KAAK,GAAGpB,QAAQ,CAACe,SAAD,CAAtB;EACA,OAAON,QAAQ,CAACW,KAAK,GAAG,CAAT,CAAf;AACD;;AAED,SAASX,QAAT,CAAkBY,GAAlB,EAAuB;EACrB,IAAIA,GAAG,KAAKL,SAAR,IAAqBK,GAAG,KAAK,IAAjC,EAAuC,OAAOA,GAAP;EACvC,MAAMN,SAAS,GAAGM,GAAG,CAACC,QAAJ,CAAa,EAAb,CAAlB;EACA,OAAO,OAAOP,SAAd;AACD;;AAED,SAASD,KAAT,CAAelB,QAAf,EAAyB2B,MAAzB,EAAiCC,MAAjC,EAAyC;EACvC,OAAO,IAAIb,OAAJ,CAAY,CAACc,OAAD,EAAUC,MAAV,KAAqB;IACtC9B,QAAQ,CAAC+B,SAAT,CAAmB;MAAEC,EAAE,EAAE,CAAN;MAASC,OAAO,EAAE,KAAlB;MAAyBN,MAAzB;MAAiCC;IAAjC,CAAnB,EAA8D,CAACM,GAAD,EAAMC,GAAN,KAAc;MAC1E,IAAID,GAAJ,EAAS,OAAOJ,MAAM,CAACI,GAAD,CAAb;MACTL,OAAO,CAACM,GAAG,CAACC,MAAL,CAAP;IACD,CAHD;EAID,CALM,CAAP;AAMD"},"metadata":{},"sourceType":"script"}