{"ast":null,"code":"function createSyncStoragePersister(_ref) {\n  let {\n    storage,\n    key = \"REACT_QUERY_OFFLINE_CACHE\",\n    throttleTime = 1000,\n    serialize = JSON.stringify,\n    deserialize = JSON.parse,\n    retry\n  } = _ref;\n\n  if (typeof storage !== 'undefined') {\n    const trySave = persistedClient => {\n      try {\n        storage.setItem(key, serialize(persistedClient));\n        return;\n      } catch (error) {\n        return error;\n      }\n    };\n\n    return {\n      persistClient: throttle(persistedClient => {\n        let client = persistedClient;\n        let error = trySave(client);\n        let errorCount = 0;\n\n        while (error && client) {\n          errorCount++;\n          client = retry == null ? void 0 : retry({\n            persistedClient: client,\n            error,\n            errorCount\n          });\n\n          if (client) {\n            error = trySave(client);\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key);\n\n        if (!cacheString) {\n          return;\n        }\n\n        return deserialize(cacheString);\n      },\n      removeClient: () => {\n        storage.removeItem(key);\n      }\n    };\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => undefined,\n    removeClient: noop\n  };\n}\n\nfunction throttle(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n  let timer = null;\n  let params;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    params = args;\n\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params);\n        timer = null;\n      }, wait);\n    }\n  };\n} // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\nfunction noop() {}\n\nexport { createSyncStoragePersister };","map":{"version":3,"mappings":"AAoCO,SAASA,0BAAT,OAO0C;EAAA,IAPN;IACzCC,OADyC;IAEzCC,GAAG,GAFsC;IAGzCC,YAAY,GAAG,IAH0B;IAIzCC,SAAS,GAAGC,IAAI,CAACC,SAJwB;IAKzCC,WAAW,GAAGF,IAAI,CAACG,KALsB;IAMzCC;EANyC,CAOM;;EAC/C,IAAI,OAAOR,OAAP,KAAmB,WAAvB,EAAoC;IAClC,MAAMS,OAAO,GAAIC,eAAD,IAAyD;MACvE,IAAI;QACFV,OAAO,CAACW,OAARX,CAAgBC,GAAhBD,EAAqBG,SAAS,CAACO,eAAD,CAA9BV;QACA;MAFF,EAGE,OAAOY,KAAP,EAAc;QACd,OAAOA,KAAP;MACD;IANH;;IAQA,OAAO;MACLC,aAAa,EAAEC,QAAQ,CAAEJ,eAAD,IAAqB;QAC3C,IAAIK,MAAmC,GAAGL,eAA1C;QACA,IAAIE,KAAK,GAAGH,OAAO,CAACM,MAAD,CAAnB;QACA,IAAIC,UAAU,GAAG,CAAjB;;QACA,OAAOJ,KAAK,IAAIG,MAAhB,EAAwB;UACtBC,UAAU;UACVD,MAAM,GAAGP,KAAH,IAAGA,qBAAK,CAAG;YACfE,eAAe,EAAEK,MADF;YAEfH,KAFe;YAGfI;UAHe,CAAH,CAAdD;;UAMA,IAAIA,MAAJ,EAAY;YACVH,KAAK,GAAGH,OAAO,CAACM,MAAD,CAAfH;UACD;QACF;MAfoB,GAgBpBV,YAhBoB,CADlB;MAkBLe,aAAa,EAAE,MAAM;QACnB,MAAMC,WAAW,GAAGlB,OAAO,CAACmB,OAARnB,CAAgBC,GAAhBD,CAApB;;QAEA,IAAI,CAACkB,WAAL,EAAkB;UAChB;QACD;;QAED,OAAOZ,WAAW,CAACY,WAAD,CAAlB;MAzBG;MA2BLE,YAAY,EAAE,MAAM;QAClBpB,OAAO,CAACqB,UAARrB,CAAmBC,GAAnBD;MACD;IA7BI,CAAP;EA+BD;;EAED,OAAO;IACLa,aAAa,EAAES,IADV;IAELL,aAAa,EAAE,MAAMM,SAFhB;IAGLH,YAAY,EAAEE;EAHT,CAAP;AAKD;;AAED,SAASR,QAAT,CACEU,IADF,EAGE;EAAA,IADAC,IACA,uEADO,GACP;EACA,IAAIC,KAA2C,GAAG,IAAlD;EACA,IAAIC,MAAJ;EACA,OAAO,YAA0B;IAAA,kCAAbC,IAAa;MAAbA,IAAa;IAAA;;IAC/BD,MAAM,GAAGC,IAATD;;IACA,IAAID,KAAK,KAAK,IAAd,EAAoB;MAClBA,KAAK,GAAGG,UAAU,CAAC,MAAM;QACvBL,IAAI,CAAC,GAAGG,MAAJ,CAAJH;QACAE,KAAK,GAAG,IAARA;MAFgB,GAGfD,IAHe,CAAlBC;IAID;EAPH;AASD,C,CAAA;;;AAGD,SAASJ,IAAT,GAAgB","names":["createSyncStoragePersister","storage","key","throttleTime","serialize","JSON","stringify","deserialize","parse","retry","trySave","persistedClient","setItem","error","persistClient","throttle","client","errorCount","restoreClient","cacheString","getItem","removeClient","removeItem","noop","undefined","func","wait","timer","params","args","setTimeout"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@tanstack\\query-sync-storage-persister\\src\\index.ts"],"sourcesContent":["import type {\n  PersistedClient,\n  Persister,\n  PersistRetryer,\n} from '@tanstack/query-persist-client-core'\n\ninterface Storage {\n  getItem: (key: string) => string | null\n  setItem: (key: string, value: string) => void\n  removeItem: (key: string) => void\n}\n\ninterface CreateSyncStoragePersisterOptions {\n  /** The storage client used for setting and retrieving items from cache.\n   * For SSR pass in `undefined`.\n   */\n  storage: Storage | undefined\n  /** The key to use when storing the cache */\n  key?: string\n  /** To avoid spamming,\n   * pass a time in ms to throttle saving the cache to disk */\n  throttleTime?: number\n  /**\n   * How to serialize the data to storage.\n   * @default `JSON.stringify`\n   */\n  serialize?: (client: PersistedClient) => string\n  /**\n   * How to deserialize the data from storage.\n   * @default `JSON.parse`\n   */\n  deserialize?: (cachedString: string) => PersistedClient\n\n  retry?: PersistRetryer\n}\n\nexport function createSyncStoragePersister({\n  storage,\n  key = `REACT_QUERY_OFFLINE_CACHE`,\n  throttleTime = 1000,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n  retry,\n}: CreateSyncStoragePersisterOptions): Persister {\n  if (typeof storage !== 'undefined') {\n    const trySave = (persistedClient: PersistedClient): Error | undefined => {\n      try {\n        storage.setItem(key, serialize(persistedClient))\n        return\n      } catch (error) {\n        return error as Error\n      }\n    }\n    return {\n      persistClient: throttle((persistedClient) => {\n        let client: PersistedClient | undefined = persistedClient\n        let error = trySave(client)\n        let errorCount = 0\n        while (error && client) {\n          errorCount++\n          client = retry?.({\n            persistedClient: client,\n            error,\n            errorCount,\n          })\n\n          if (client) {\n            error = trySave(client)\n          }\n        }\n      }, throttleTime),\n      restoreClient: () => {\n        const cacheString = storage.getItem(key)\n\n        if (!cacheString) {\n          return\n        }\n\n        return deserialize(cacheString) as PersistedClient\n      },\n      removeClient: () => {\n        storage.removeItem(key)\n      },\n    }\n  }\n\n  return {\n    persistClient: noop,\n    restoreClient: () => undefined,\n    removeClient: noop,\n  }\n}\n\nfunction throttle<TArgs extends any[]>(\n  func: (...args: TArgs) => any,\n  wait = 100,\n) {\n  let timer: ReturnType<typeof setTimeout> | null = null\n  let params: TArgs\n  return function (...args: TArgs) {\n    params = args\n    if (timer === null) {\n      timer = setTimeout(() => {\n        func(...params)\n        timer = null\n      }, wait)\n    }\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module"}