{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a;\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n\nimport { decorateProperty } from './base.js';\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\n\nconst slotAssignedElements = ((_a = global.HTMLSlotElement) === null || _a === void 0 ? void 0 : _a.prototype.assignedElements) != null ? (slot, opts) => slot.assignedElements(opts) : (slot, opts) => slot.assignedNodes(opts).filter(node => node.nodeType === Node.ELEMENT_NODE);\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\n\nexport function queryAssignedElements(options) {\n  const {\n    slot,\n    selector\n  } = options !== null && options !== void 0 ? options : {};\n  return decorateProperty({\n    descriptor: _name => ({\n      get() {\n        var _a;\n\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n        const elements = slotEl != null ? slotAssignedElements(slotEl, options) : [];\n\n        if (selector) {\n          return elements.filter(node => node.matches(selector));\n        }\n\n        return elements;\n      },\n\n      enumerable: true,\n      configurable: true\n    })\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;AAMA;;;;;;;;AAOA,SAAQA,gBAAR,QAA+B,WAA/B;AAKA,MAAMC,SAAS,GAAG,KAAlB;AACA,MAAMC,MAAM,GAAGD,SAAS,GAAGE,UAAH,GAAgBC,MAAxC;AAEA;;;;AAGA,MAAMC,oBAAoB,GACxB,aAAM,CAACC,eAAP,MAAsB,IAAtB,IAAsBC,aAAtB,GAAsB,MAAtB,GAAsBA,GAAEC,SAAF,CAAYC,gBAAlC,KAAsD,IAAtD,GACI,CAACC,IAAD,EAAwBC,IAAxB,KACED,IAAI,CAACD,gBAAL,CAAsBE,IAAtB,CAFN,GAGI,CAACD,IAAD,EAAwBC,IAAxB,KACED,IAAI,CACDE,aADH,CACiBD,IADjB,EAEGE,MAFH,CAGKC,IAAD,IAA2BA,IAAI,CAACC,QAAL,KAAkBC,IAAI,CAACC,YAHtD,CALR;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,qBAAV,CAAgCC,OAAhC,EAAsE;EAC1E,MAAM;IAACT,IAAD;IAAOU;EAAP,IAAmBD,OAAO,SAAP,WAAO,WAAP,aAAW,EAApC;EACA,OAAOnB,gBAAgB,CAAC;IACtBqB,UAAU,EAAGC,KAAD,KAAyB;MACnCC,GAAG;;;QACD,MAAMC,YAAY,GAAG,OAAOd,IAAI,GAAG,SAASA,IAAI,GAAhB,GAAsB,cAAc,EAApE;QACA,MAAMe,MAAM,GACV,WAAKC,UAAL,MAAe,IAAf,IAAenB,aAAf,GAAe,MAAf,GAAeA,GAAEoB,aAAF,CAAiCH,YAAjC,CADjB;QAEA,MAAMI,QAAQ,GACZH,MAAM,IAAI,IAAV,GAAiBpB,oBAAoB,CAACoB,MAAD,EAASN,OAAT,CAArC,GAAyD,EAD3D;;QAEA,IAAIC,QAAJ,EAAc;UACZ,OAAOQ,QAAQ,CAACf,MAAT,CAAiBC,IAAD,IAAUA,IAAI,CAACe,OAAL,CAAaT,QAAb,CAA1B,CAAP;QACD;;QACD,OAAOQ,QAAP;MACD,CAXkC;;MAYnCE,UAAU,EAAE,IAZuB;MAanCC,YAAY,EAAE;IAbqB,CAAzB;EADU,CAAD,CAAvB;AAiBD","names":["decorateProperty","NODE_MODE","global","globalThis","window","slotAssignedElements","HTMLSlotElement","_a","prototype","assignedElements","slot","opts","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","queryAssignedElements","options","selector","descriptor","_name","get","slotSelector","slotEl","renderRoot","querySelector","elements","matches","enumerable","configurable"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@lit\\reactive-element\\src\\decorators\\query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}