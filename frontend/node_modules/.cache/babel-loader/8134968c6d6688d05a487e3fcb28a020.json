{"ast":null,"code":"import * as ed25519 from \"@stablelib/ed25519\";\nimport { randomBytes } from \"@stablelib/random\";\nimport { fromMiliseconds } from \"@walletconnect/time\";\nimport { JWT_IRIDIUM_ALG, JWT_IRIDIUM_TYP, KEY_PAIR_SEED_LENGTH } from \"./constants\";\nimport { decodeIss, decodeJWT, encodeData, encodeIss, encodeJWT } from \"./utils\";\nexport function generateKeyPair() {\n  let seed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : randomBytes(KEY_PAIR_SEED_LENGTH);\n  return ed25519.generateKeyPairFromSeed(seed);\n}\nexport async function signJWT(sub, aud, ttl, keyPair) {\n  let iat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : fromMiliseconds(Date.now());\n  const header = {\n    alg: JWT_IRIDIUM_ALG,\n    typ: JWT_IRIDIUM_TYP\n  };\n  const iss = encodeIss(keyPair.publicKey);\n  const exp = iat + ttl;\n  const payload = {\n    iss,\n    sub,\n    aud,\n    iat,\n    exp\n  };\n  const data = encodeData({\n    header,\n    payload\n  });\n  const signature = ed25519.sign(keyPair.secretKey, data);\n  return encodeJWT({\n    header,\n    payload,\n    signature\n  });\n}\nexport async function verifyJWT(jwt) {\n  const {\n    header,\n    payload,\n    data,\n    signature\n  } = decodeJWT(jwt);\n\n  if (header.alg !== JWT_IRIDIUM_ALG || header.typ !== JWT_IRIDIUM_TYP) {\n    throw new Error(\"JWT must use EdDSA algorithm\");\n  }\n\n  const publicKey = decodeIss(payload.iss);\n  return ed25519.verify(publicKey, data, signature);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SACEC,eADF,EAEEC,eAFF,EAGEC,oBAHF,QAIO,aAJP;AAMA,SACEC,SADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,SALF,QAMO,SANP;AAQA,OAAM,SAAUC,eAAV,GACgD;EAAA,IAApDC,IAAoD,uEAAjCX,WAAW,CAACI,oBAAD,CAAsB;EAEpD,OAAOL,OAAO,CAACa,uBAAR,CAAgCD,IAAhC,CAAP;AACD;AAED,OAAO,eAAeE,OAAf,CACLC,GADK,EAELC,GAFK,EAGLC,GAHK,EAILC,OAJK,EAKoC;EAAA,IAAzCC,GAAyC,uEAA3BjB,eAAe,CAACkB,IAAI,CAACC,GAAL,EAAD,CAAY;EAEzC,MAAMC,MAAM,GAAG;IAAEC,GAAG,EAAEpB,eAAP;IAAwBqB,GAAG,EAAEpB;EAA7B,CAAf;EACA,MAAMqB,GAAG,GAAGhB,SAAS,CAACS,OAAO,CAACQ,SAAT,CAArB;EACA,MAAMC,GAAG,GAAGR,GAAG,GAAGF,GAAlB;EACA,MAAMW,OAAO,GAAG;IAAEH,GAAF;IAAOV,GAAP;IAAYC,GAAZ;IAAiBG,GAAjB;IAAsBQ;EAAtB,CAAhB;EACA,MAAME,IAAI,GAAGrB,UAAU,CAAC;IAAEc,MAAF;IAAUM;EAAV,CAAD,CAAvB;EACA,MAAME,SAAS,GAAG9B,OAAO,CAAC+B,IAAR,CAAab,OAAO,CAACc,SAArB,EAAgCH,IAAhC,CAAlB;EACA,OAAOnB,SAAS,CAAC;IAAEY,MAAF;IAAUM,OAAV;IAAmBE;EAAnB,CAAD,CAAhB;AACD;AAED,OAAO,eAAeG,SAAf,CAAyBC,GAAzB,EAAoC;EACzC,MAAM;IAAEZ,MAAF;IAAUM,OAAV;IAAmBC,IAAnB;IAAyBC;EAAzB,IAAuCvB,SAAS,CAAC2B,GAAD,CAAtD;;EACA,IAAIZ,MAAM,CAACC,GAAP,KAAepB,eAAf,IAAkCmB,MAAM,CAACE,GAAP,KAAepB,eAArD,EAAsE;IACpE,MAAM,IAAI+B,KAAJ,CAAU,8BAAV,CAAN;EACD;;EACD,MAAMT,SAAS,GAAGpB,SAAS,CAACsB,OAAO,CAACH,GAAT,CAA3B;EACA,OAAOzB,OAAO,CAACoC,MAAR,CAAeV,SAAf,EAA0BG,IAA1B,EAAgCC,SAAhC,CAAP;AACD","names":["ed25519","randomBytes","fromMiliseconds","JWT_IRIDIUM_ALG","JWT_IRIDIUM_TYP","KEY_PAIR_SEED_LENGTH","decodeIss","decodeJWT","encodeData","encodeIss","encodeJWT","generateKeyPair","seed","generateKeyPairFromSeed","signJWT","sub","aud","ttl","keyPair","iat","Date","now","header","alg","typ","iss","publicKey","exp","payload","data","signature","sign","secretKey","verifyJWT","jwt","Error","verify"],"sources":["../../src/api.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}