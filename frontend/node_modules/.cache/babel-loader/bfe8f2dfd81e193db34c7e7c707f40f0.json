{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst legacyCustomElement = (tagName, clazz) => {\n  customElements.define(tagName, clazz); // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return clazz;\n};\n\nconst standardCustomElement = (tagName, descriptor) => {\n  const {\n    kind,\n    elements\n  } = descriptor;\n  return {\n    kind,\n    elements,\n\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz) {\n      customElements.define(tagName, clazz);\n    }\n\n  };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\n\n\nexport const customElement = tagName => classOrDescriptor => typeof classOrDescriptor === 'function' ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);","map":{"version":3,"mappings":"AAAA;;;;;AAmBA,MAAMA,mBAAmB,GAAG,CAACC,OAAD,EAAkBC,KAAlB,KAA+C;EACzEC,cAAc,CAACC,MAAf,CAAsBH,OAAtB,EAA+BC,KAA/B,EADyE,CAEzE;EACA;EACA;EACA;EACA;EACA;;EACA,OAAOA,KAAP;AACD,CATD;;AAWA,MAAMG,qBAAqB,GAAG,CAC5BJ,OAD4B,EAE5BK,UAF4B,KAG1B;EACF,MAAM;IAACC,IAAD;IAAOC;EAAP,IAAmBF,UAAzB;EACA,OAAO;IACLC,IADK;IAELC,QAFK;;IAGL;IACAC,QAAQ,CAACP,KAAD,EAAgC;MACtCC,cAAc,CAACC,MAAf,CAAsBH,OAAtB,EAA+BC,KAA/B;IACD;;EANI,CAAP;AAQD,CAbD;AAeA;;;;;;;;;;;;;;;;AAcA,OAAO,MAAMQ,aAAa,GACvBT,OAAD,IACCU,iBAAD,IACE,OAAOA,iBAAP,KAA6B,UAA7B,GACIX,mBAAmB,CAACC,OAAD,EAAUU,iBAAV,CADvB,GAEIN,qBAAqB,CAACJ,OAAD,EAAUU,iBAAV,CALtB","names":["legacyCustomElement","tagName","clazz","customElements","define","standardCustomElement","descriptor","kind","elements","finisher","customElement","classOrDescriptor"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@lit\\reactive-element\\src\\decorators\\custom-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {Constructor, ClassDescriptor} from './base.js';\n\n/**\n * Allow for custom element classes with private constructors\n */\ntype CustomElementClass = Omit<typeof HTMLElement, 'new'>;\n\nconst legacyCustomElement = (tagName: string, clazz: CustomElementClass) => {\n  customElements.define(tagName, clazz as CustomElementConstructor);\n  // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return clazz as any;\n};\n\nconst standardCustomElement = (\n  tagName: string,\n  descriptor: ClassDescriptor\n) => {\n  const {kind, elements} = descriptor;\n  return {\n    kind,\n    elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher(clazz: Constructor<HTMLElement>) {\n      customElements.define(tagName, clazz);\n    },\n  };\n};\n\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```js\n * @customElement('my-element')\n * class MyElement extends LitElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The tag name of the custom element to define.\n */\nexport const customElement =\n  (tagName: string) =>\n  (classOrDescriptor: CustomElementClass | ClassDescriptor) =>\n    typeof classOrDescriptor === 'function'\n      ? legacyCustomElement(tagName, classOrDescriptor)\n      : standardCustomElement(tagName, classOrDescriptor as ClassDescriptor);\n"]},"metadata":{},"sourceType":"module"}