{"ast":null,"code":"/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n};\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\n\nconst PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n};\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\n\nexports.isValid = function isValid(mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;\n};\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\n\n\nexports.from = function from(value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined;\n};\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\n\n\nexports.getPenaltyN1 = function getPenaltyN1(data) {\n  const size = data.size;\n  let points = 0;\n  let sameCountCol = 0;\n  let sameCountRow = 0;\n  let lastCol = null;\n  let lastRow = null;\n\n  for (let row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0;\n    lastCol = lastRow = null;\n\n    for (let col = 0; col < size; col++) {\n      let module = data.get(row, col);\n\n      if (module === lastCol) {\n        sameCountCol++;\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n        lastCol = module;\n        sameCountCol = 1;\n      }\n\n      module = data.get(col, row);\n\n      if (module === lastRow) {\n        sameCountRow++;\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n        lastRow = module;\n        sameCountRow = 1;\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n  }\n\n  return points;\n};\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\n\n\nexports.getPenaltyN2 = function getPenaltyN2(data) {\n  const size = data.size;\n  let points = 0;\n\n  for (let row = 0; row < size - 1; row++) {\n    for (let col = 0; col < size - 1; col++) {\n      const last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n      if (last === 4 || last === 0) points++;\n    }\n  }\n\n  return points * PenaltyScores.N2;\n};\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\n\n\nexports.getPenaltyN3 = function getPenaltyN3(data) {\n  const size = data.size;\n  let points = 0;\n  let bitsCol = 0;\n  let bitsRow = 0;\n\n  for (let row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0;\n\n    for (let col = 0; col < size; col++) {\n      bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n      bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n    }\n  }\n\n  return points * PenaltyScores.N3;\n};\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\n\n\nexports.getPenaltyN4 = function getPenaltyN4(data) {\n  let darkCount = 0;\n  const modulesCount = data.data.length;\n\n  for (let i = 0; i < modulesCount; i++) darkCount += data.data[i];\n\n  const k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n  return k * PenaltyScores.N4;\n};\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\n\n\nfunction getMaskAt(maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000:\n      return (i + j) % 2 === 0;\n\n    case exports.Patterns.PATTERN001:\n      return i % 2 === 0;\n\n    case exports.Patterns.PATTERN010:\n      return j % 3 === 0;\n\n    case exports.Patterns.PATTERN011:\n      return (i + j) % 3 === 0;\n\n    case exports.Patterns.PATTERN100:\n      return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n\n    case exports.Patterns.PATTERN101:\n      return i * j % 2 + i * j % 3 === 0;\n\n    case exports.Patterns.PATTERN110:\n      return (i * j % 2 + i * j % 3) % 2 === 0;\n\n    case exports.Patterns.PATTERN111:\n      return (i * j % 3 + (i + j) % 2) % 2 === 0;\n\n    default:\n      throw new Error('bad maskPattern:' + maskPattern);\n  }\n}\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\n\n\nexports.applyMask = function applyMask(pattern, data) {\n  const size = data.size;\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue;\n      data.xor(row, col, getMaskAt(pattern, row, col));\n    }\n  }\n};\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\n\n\nexports.getBestMask = function getBestMask(data, setupFormatFunc) {\n  const numPatterns = Object.keys(exports.Patterns).length;\n  let bestPattern = 0;\n  let lowerPenalty = Infinity;\n\n  for (let p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p);\n    exports.applyMask(p, data); // Calculate penalty\n\n    const penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data); // Undo previously applied mask\n\n    exports.applyMask(p, data);\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty;\n      bestPattern = p;\n    }\n  }\n\n  return bestPattern;\n};","map":{"version":3,"names":["exports","Patterns","PATTERN000","PATTERN001","PATTERN010","PATTERN011","PATTERN100","PATTERN101","PATTERN110","PATTERN111","PenaltyScores","N1","N2","N3","N4","isValid","mask","isNaN","from","value","parseInt","undefined","getPenaltyN1","data","size","points","sameCountCol","sameCountRow","lastCol","lastRow","row","col","module","get","getPenaltyN2","last","getPenaltyN3","bitsCol","bitsRow","getPenaltyN4","darkCount","modulesCount","length","i","k","Math","abs","ceil","getMaskAt","maskPattern","j","floor","Error","applyMask","pattern","isReserved","xor","getBestMask","setupFormatFunc","numPatterns","Object","keys","bestPattern","lowerPenalty","Infinity","p","penalty"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@web3modal/ui/node_modules/qrcode/lib/core/mask-pattern.js"],"sourcesContent":["/**\n * Data mask pattern reference\n * @type {Object}\n */\nexports.Patterns = {\n  PATTERN000: 0,\n  PATTERN001: 1,\n  PATTERN010: 2,\n  PATTERN011: 3,\n  PATTERN100: 4,\n  PATTERN101: 5,\n  PATTERN110: 6,\n  PATTERN111: 7\n}\n\n/**\n * Weighted penalty scores for the undesirable features\n * @type {Object}\n */\nconst PenaltyScores = {\n  N1: 3,\n  N2: 3,\n  N3: 40,\n  N4: 10\n}\n\n/**\n * Check if mask pattern value is valid\n *\n * @param  {Number}  mask    Mask pattern\n * @return {Boolean}         true if valid, false otherwise\n */\nexports.isValid = function isValid (mask) {\n  return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7\n}\n\n/**\n * Returns mask pattern from a value.\n * If value is not valid, returns undefined\n *\n * @param  {Number|String} value        Mask pattern value\n * @return {Number}                     Valid mask pattern or undefined\n */\nexports.from = function from (value) {\n  return exports.isValid(value) ? parseInt(value, 10) : undefined\n}\n\n/**\n* Find adjacent modules in row/column with the same color\n* and assign a penalty value.\n*\n* Points: N1 + i\n* i is the amount by which the number of adjacent modules of the same color exceeds 5\n*/\nexports.getPenaltyN1 = function getPenaltyN1 (data) {\n  const size = data.size\n  let points = 0\n  let sameCountCol = 0\n  let sameCountRow = 0\n  let lastCol = null\n  let lastRow = null\n\n  for (let row = 0; row < size; row++) {\n    sameCountCol = sameCountRow = 0\n    lastCol = lastRow = null\n\n    for (let col = 0; col < size; col++) {\n      let module = data.get(row, col)\n      if (module === lastCol) {\n        sameCountCol++\n      } else {\n        if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n        lastCol = module\n        sameCountCol = 1\n      }\n\n      module = data.get(col, row)\n      if (module === lastRow) {\n        sameCountRow++\n      } else {\n        if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n        lastRow = module\n        sameCountRow = 1\n      }\n    }\n\n    if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5)\n    if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5)\n  }\n\n  return points\n}\n\n/**\n * Find 2x2 blocks with the same color and assign a penalty value\n *\n * Points: N2 * (m - 1) * (n - 1)\n */\nexports.getPenaltyN2 = function getPenaltyN2 (data) {\n  const size = data.size\n  let points = 0\n\n  for (let row = 0; row < size - 1; row++) {\n    for (let col = 0; col < size - 1; col++) {\n      const last = data.get(row, col) +\n        data.get(row, col + 1) +\n        data.get(row + 1, col) +\n        data.get(row + 1, col + 1)\n\n      if (last === 4 || last === 0) points++\n    }\n  }\n\n  return points * PenaltyScores.N2\n}\n\n/**\n * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n * preceded or followed by light area 4 modules wide\n *\n * Points: N3 * number of pattern found\n */\nexports.getPenaltyN3 = function getPenaltyN3 (data) {\n  const size = data.size\n  let points = 0\n  let bitsCol = 0\n  let bitsRow = 0\n\n  for (let row = 0; row < size; row++) {\n    bitsCol = bitsRow = 0\n    for (let col = 0; col < size; col++) {\n      bitsCol = ((bitsCol << 1) & 0x7FF) | data.get(row, col)\n      if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++\n\n      bitsRow = ((bitsRow << 1) & 0x7FF) | data.get(col, row)\n      if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++\n    }\n  }\n\n  return points * PenaltyScores.N3\n}\n\n/**\n * Calculate proportion of dark modules in entire symbol\n *\n * Points: N4 * k\n *\n * k is the rating of the deviation of the proportion of dark modules\n * in the symbol from 50% in steps of 5%\n */\nexports.getPenaltyN4 = function getPenaltyN4 (data) {\n  let darkCount = 0\n  const modulesCount = data.data.length\n\n  for (let i = 0; i < modulesCount; i++) darkCount += data.data[i]\n\n  const k = Math.abs(Math.ceil((darkCount * 100 / modulesCount) / 5) - 10)\n\n  return k * PenaltyScores.N4\n}\n\n/**\n * Return mask value at given position\n *\n * @param  {Number} maskPattern Pattern reference value\n * @param  {Number} i           Row\n * @param  {Number} j           Column\n * @return {Boolean}            Mask value\n */\nfunction getMaskAt (maskPattern, i, j) {\n  switch (maskPattern) {\n    case exports.Patterns.PATTERN000: return (i + j) % 2 === 0\n    case exports.Patterns.PATTERN001: return i % 2 === 0\n    case exports.Patterns.PATTERN010: return j % 3 === 0\n    case exports.Patterns.PATTERN011: return (i + j) % 3 === 0\n    case exports.Patterns.PATTERN100: return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0\n    case exports.Patterns.PATTERN101: return (i * j) % 2 + (i * j) % 3 === 0\n    case exports.Patterns.PATTERN110: return ((i * j) % 2 + (i * j) % 3) % 2 === 0\n    case exports.Patterns.PATTERN111: return ((i * j) % 3 + (i + j) % 2) % 2 === 0\n\n    default: throw new Error('bad maskPattern:' + maskPattern)\n  }\n}\n\n/**\n * Apply a mask pattern to a BitMatrix\n *\n * @param  {Number}    pattern Pattern reference number\n * @param  {BitMatrix} data    BitMatrix data\n */\nexports.applyMask = function applyMask (pattern, data) {\n  const size = data.size\n\n  for (let col = 0; col < size; col++) {\n    for (let row = 0; row < size; row++) {\n      if (data.isReserved(row, col)) continue\n      data.xor(row, col, getMaskAt(pattern, row, col))\n    }\n  }\n}\n\n/**\n * Returns the best mask pattern for data\n *\n * @param  {BitMatrix} data\n * @return {Number} Mask pattern reference number\n */\nexports.getBestMask = function getBestMask (data, setupFormatFunc) {\n  const numPatterns = Object.keys(exports.Patterns).length\n  let bestPattern = 0\n  let lowerPenalty = Infinity\n\n  for (let p = 0; p < numPatterns; p++) {\n    setupFormatFunc(p)\n    exports.applyMask(p, data)\n\n    // Calculate penalty\n    const penalty =\n      exports.getPenaltyN1(data) +\n      exports.getPenaltyN2(data) +\n      exports.getPenaltyN3(data) +\n      exports.getPenaltyN4(data)\n\n    // Undo previously applied mask\n    exports.applyMask(p, data)\n\n    if (penalty < lowerPenalty) {\n      lowerPenalty = penalty\n      bestPattern = p\n    }\n  }\n\n  return bestPattern\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}