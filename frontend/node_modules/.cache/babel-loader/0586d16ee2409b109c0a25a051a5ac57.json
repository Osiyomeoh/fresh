{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const legacyPrototypeMethod = (descriptor, proto, name) => {\n  Object.defineProperty(proto, name, descriptor);\n};\nexport const standardPrototypeMethod = (descriptor, element) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor\n});\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\n\nexport const decorateProperty = _ref => {\n  let {\n    finisher,\n    descriptor\n  } = _ref;\n  return (protoOrDescriptor, name // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) => {\n    var _a; // TypeScript / Babel legacy mode\n\n\n    if (name !== undefined) {\n      const ctor = protoOrDescriptor.constructor;\n\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n\n      finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name); // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_a = protoOrDescriptor.originalKey) !== null && _a !== void 0 ? _a : protoOrDescriptor.key;\n      const info = descriptor != undefined ? {\n        kind: 'method',\n        placement: 'prototype',\n        key,\n        descriptor: descriptor(protoOrDescriptor.key)\n      } : { ...protoOrDescriptor,\n        key\n      };\n\n      if (finisher != undefined) {\n        info.finisher = function (ctor) {\n          finisher(ctor, key);\n        };\n      }\n\n      return info;\n    }\n  };\n};","map":{"version":3,"mappings":"AAAA;;;;;AA+BA,OAAO,MAAMA,qBAAqB,GAAG,CACnCC,UADmC,EAEnCC,KAFmC,EAGnCC,IAHmC,KAIjC;EACFC,MAAM,CAACC,cAAP,CAAsBH,KAAtB,EAA6BC,IAA7B,EAAmCF,UAAnC;AACD,CANM;AAQP,OAAO,MAAMK,uBAAuB,GAAG,CACrCL,UADqC,EAErCM,OAFqC,MAGjC;EACJC,IAAI,EAAE,QADF;EAEJC,SAAS,EAAE,WAFP;EAGJC,GAAG,EAAEH,OAAO,CAACG,GAHT;EAIJT;AAJI,CAHiC,CAAhC;AAUP;;;;;;;;;;;;;;AAaA,OAAO,MAAMU,gBAAgB,GAC3B;EAAA,IAAC;IACCC,QADD;IAECX;EAFD,CAAD;EAAA,OASA,CACEY,iBADF,EAEEV,IAFF,CAGE;EACA;EAJF,KAKgB;WAAA,CACd;;;IACA,IAAIA,IAAI,KAAKW,SAAb,EAAwB;MACtB,MAAMC,IAAI,GAAIF,iBAAqC,CAChDG,WADH;;MAEA,IAAIf,UAAU,KAAKa,SAAnB,EAA8B;QAC5BV,MAAM,CAACC,cAAP,CAAsBQ,iBAAtB,EAAyCV,IAAzC,EAA+CF,UAAU,CAACE,IAAD,CAAzD;MACD;;MACDS,QAAQ,SAAR,YAAQ,WAAR,GAAQ,MAAR,WAAQ,CAAGG,IAAH,EAASZ,IAAT,CAAR,CANsB,CAOtB;IACD,CARD,MAQO;MACL;MACA;MACA,MAAMO,GAAG,GACP;MACA,MAACG,iBAAyB,CAACI,WAA3B,MAAsC,IAAtC,IAAsCC,aAAtC,GAAsCA,EAAtC,GACCL,iBAAkC,CAACH,GAHtC;MAIA,MAAMS,IAAI,GACRlB,UAAU,IAAIa,SAAd,GACI;QACEN,IAAI,EAAE,QADR;QAEEC,SAAS,EAAE,WAFb;QAGEC,GAHF;QAIET,UAAU,EAAEA,UAAU,CAAEY,iBAAkC,CAACH,GAArC;MAJxB,CADJ,GAOI,EAAC,GAAIG,iBAAL;QAAyCH;MAAzC,CARN;;MASA,IAAIE,QAAQ,IAAIE,SAAhB,EAA2B;QACzBK,IAAI,CAACP,QAAL,GAAgB,UACdG,IADc,EACoB;UAElCH,QAAQ,CAACG,IAAD,EAA4CL,GAA5C,CAAR;QACD,CAJD;MAKD;;MACD,OAAOS,IAAP;IACD;EACF,CAjDD;AAAA,CADK","names":["legacyPrototypeMethod","descriptor","proto","name","Object","defineProperty","standardPrototypeMethod","element","kind","placement","key","decorateProperty","finisher","protoOrDescriptor","undefined","ctor","constructor","originalKey","_a","info"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@lit\\reactive-element\\src\\decorators\\base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty =\n  ({\n    finisher,\n    descriptor,\n  }: {\n    finisher?:\n      | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n      | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }) =>\n  (\n    protoOrDescriptor: ReactiveElement | ClassElement,\n    name?: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any => {\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = (protoOrDescriptor as ReactiveElement)\n        .constructor as typeof ReactiveElement;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher?.(ctor, name!);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (protoOrDescriptor as any).originalKey ??\n        (protoOrDescriptor as ClassElement).key;\n      const info: ClassElement =\n        descriptor != undefined\n          ? {\n              kind: 'method',\n              placement: 'prototype',\n              key,\n              descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n            }\n          : {...(protoOrDescriptor as ClassElement), key};\n      if (finisher != undefined) {\n        info.finisher = function <ReactiveElement>(\n          ctor: Constructor<ReactiveElement>\n        ) {\n          finisher(ctor as unknown as typeof ReactiveElement, key);\n        };\n      }\n      return info;\n    }\n  };\n"]},"metadata":{},"sourceType":"module"}