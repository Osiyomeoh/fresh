{"ast":null,"code":"// src/client.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport { createClient as createCoreClient, createStorage, noopStorage } from \"@wagmi/core\";\n\nfunction createClient(_ref) {\n  let {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: {\n          cacheTime: 1e3 * 60 * 60 * 24,\n          networkMode: \"offlineFirst\",\n          refetchOnWindowFocus: false,\n          retry: 0\n        },\n        mutations: {\n          networkMode: \"offlineFirst\"\n        }\n      }\n    }),\n    storage = createStorage({\n      storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n    }),\n    persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n      key: \"cache\",\n      storage,\n      serialize: x => x,\n      deserialize: x => x\n    }) : void 0,\n    ...config\n  } = _ref;\n  const client = createCoreClient({ ...config,\n    storage\n  });\n  if (persister) persistQueryClient({\n    queryClient,\n    persister,\n    dehydrateOptions: {\n      shouldDehydrateQuery: query => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n    }\n  });\n  return Object.assign(client, {\n    queryClient\n  });\n} // src/context.ts\n\n\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(void 0);\n\nfunction WagmiConfig(_ref2) {\n  let {\n    children,\n    client\n  } = _ref2;\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: client.queryClient,\n      context: queryClientContext\n    }),\n    value: client\n  });\n}\n\nfunction useClient() {\n  const client = React.useContext(Context);\n  if (!client) throw new Error([\"`useClient` must be used within `WagmiConfig`.\\n\", \"Read more: https://wagmi.sh/react/WagmiConfig\"].join(\"\\n\"));\n  return client;\n} // src/hooks/accounts/useAccount.ts\n\n\nimport { getAccount, getClient } from \"@wagmi/core\";\nimport * as React7 from \"react\"; // src/hooks/utils/query/useBaseQuery.ts\n\nimport { notifyManager, useIsRestoring, useQueryClient, useQueryErrorResetBoundary } from \"@tanstack/react-query\";\nimport * as React2 from \"react\"; // src/hooks/utils/useSyncExternalStore.ts\n\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore; // src/hooks/utils/query/utils.ts\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\n\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === \"function\") {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\n\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n\n  return !!_useErrorBoundary;\n}\n\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach(key => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n} // src/hooks/utils/query/useBaseQuery.ts\n\n\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  const [observer] = React2.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(React2.useCallback(onStoreChange => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]);\n\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref3 => {\n      let {\n        data\n      } = _ref3;\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  }\n\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return { ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n} // src/hooks/utils/query/useInfiniteQuery.ts\n\n\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, InfiniteQueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n} // src/hooks/utils/query/useMutation.ts\n\n\nimport { parseMutationArgs, useMutation as useMutation_ } from \"@tanstack/react-query\";\n\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({\n    context: queryClientContext,\n    ...options\n  });\n} // src/hooks/utils/query/useQuery.ts\n\n\nimport { QueryObserver } from \"@tanstack/react-query\";\n\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({\n    context: queryClientContext,\n    ...parsedOptions\n  }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n} // src/hooks/utils/query/useQueryClient.ts\n\n\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\n\nvar useQueryClient2 = () => useQueryClient_({\n  context: queryClientContext\n}); // src/hooks/providers/useProvider.ts\n\n\nimport { getProvider, watchProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\n\nfunction useProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector(cb => watchProvider({\n    chainId\n  }, cb), () => getProvider({\n    chainId\n  }), () => getProvider({\n    chainId\n  }), x => x, (a, b) => a.network.chainId === b.network.chainId);\n} // src/hooks/providers/useWebSocketProvider.ts\n\n\nimport { getWebSocketProvider, watchWebSocketProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\n\nfunction useWebSocketProvider() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return useSyncExternalStoreWithSelector2(cb => watchWebSocketProvider({\n    chainId\n  }, cb), () => getWebSocketProvider({\n    chainId\n  }), () => getWebSocketProvider({\n    chainId\n  }), x => x, (a, b) => a?.network.chainId === b?.network.chainId);\n} // src/hooks/utils/useChainId.ts\n\n\nfunction useChainId() {\n  let {\n    chainId\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  return provider.network.chainId;\n} // src/hooks/utils/useForceUpdate.ts\n\n\nimport * as React3 from \"react\";\n\nfunction useForceUpdate() {\n  const [, forceUpdate] = React3.useReducer(x => x + 1, 0);\n  return forceUpdate;\n} // src/hooks/network-status/useBlockNumber.ts\n\n\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport { debounce } from \"@wagmi/core/internal\";\nimport * as React4 from \"react\";\n\nfunction queryKey(_ref4) {\n  let {\n    chainId,\n    scopeKey\n  } = _ref4;\n  return [{\n    entity: \"blockNumber\",\n    chainId,\n    scopeKey\n  }];\n}\n\nfunction queryFn(_ref5) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref5;\n  return fetchBlockNumber({\n    chainId\n  });\n}\n\nfunction useBlockNumber() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    watch = false,\n    onBlock,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const queryClient = useQueryClient2();\n  React4.useEffect(() => {\n    if (!enabled) return;\n    if (!watch && !onBlock) return;\n    const listener = debounce(blockNumber => {\n      if (watch) queryClient.setQueryData(queryKey({\n        chainId,\n        scopeKey\n      }), blockNumber);\n      if (onBlock) onBlock(blockNumber);\n    }, 1);\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"block\", listener);\n    return () => {\n      provider_.off(\"block\", listener);\n    };\n  }, [chainId, scopeKey, onBlock, provider, queryClient, watch, webSocketProvider, enabled]);\n  return useQuery(queryKey({\n    scopeKey,\n    chainId\n  }), queryFn, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/network-status/useFeeData.ts\n\n\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React5 from \"react\";\n\nfunction queryKey2(_ref6) {\n  let {\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref6;\n  return [{\n    entity: \"feeData\",\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\n\nfunction queryFn2(_ref7) {\n  let {\n    queryKey: [{\n      chainId,\n      formatUnits\n    }]\n  } = _ref7;\n  return fetchFeeData({\n    chainId,\n    formatUnits\n  });\n}\n\nfunction useFeeData() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits = \"wei\",\n    scopeKey,\n    staleTime,\n    suspense,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React5.useMemo(() => queryKey2({\n    chainId,\n    formatUnits,\n    scopeKey\n  }), [chainId, formatUnits, scopeKey]);\n  const feeDataQuery = useQuery(queryKey_, queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n} // src/hooks/utils/useInvalidateOnBlock.ts\n\n\nfunction useInvalidateOnBlock(_ref8) {\n  let {\n    chainId,\n    enabled,\n    queryKey: queryKey17\n  } = _ref8;\n  const queryClient = useQueryClient2();\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? () => queryClient.invalidateQueries(queryKey17) : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n} // src/hooks/utils/useSyncExternalStoreWithTracked.ts\n\n\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\n\nvar isPlainObject = obj => typeof obj === \"object\" && !Array.isArray(obj);\n\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot) {\n  let getServerSnapshot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getSnapshot;\n  let isEqual = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : deepEqual;\n  const trackedKeys = React6.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(subscribe, getSnapshot, getServerSnapshot, x => x, (a, b) => {\n    if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n      for (const key of trackedKeys.current) {\n        const equal = isEqual(a[key], b[key]);\n        if (!equal) return false;\n      }\n\n      return true;\n    }\n\n    return isEqual(a, b);\n  });\n\n  if (isPlainObject(result)) {\n    const trackedResult = { ...result\n    };\n    Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, _ref9) => {\n      let [key, value] = _ref9;\n      return { ...res,\n        [key]: {\n          configurable: false,\n          enumerable: true,\n          get: () => {\n            if (!trackedKeys.current.includes(key)) {\n              trackedKeys.current.push(key);\n            }\n\n            return value;\n          }\n        }\n      };\n    }, {}));\n    return trackedResult;\n  }\n\n  return result;\n} // src/hooks/accounts/useAccount.ts\n\n\nfunction useAccount() {\n  let {\n    onConnect,\n    onDisconnect\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const watchAccount = React7.useCallback(callback => {\n    const client = getClient();\n    const unsubscribe = client.subscribe(state => ({\n      address: state.data?.account,\n      connector: state.connector,\n      status: state.status\n    }), (curr, prev) => {\n      if (!!onConnect && prev.status !== \"connected\" && curr.status === \"connected\") onConnect({\n        address: curr.address,\n        connector: curr.connector,\n        isReconnected: prev.status === \"reconnecting\"\n      });\n      if (!!onDisconnect && prev.status === \"connected\" && curr.status === \"disconnected\") onDisconnect();\n      return callback(getAccount());\n    });\n    return unsubscribe;\n  }, [onConnect, onDisconnect]);\n  const account = useSyncExternalStoreWithTracked(watchAccount, getAccount);\n  const previousStatusRef = React7.useRef();\n  const {\n    address,\n    connector,\n    status\n  } = account;\n  React7.useEffect(() => {\n    if (!!onConnect && previousStatusRef.current === void 0 && status === \"connected\") onConnect({\n      address,\n      connector,\n      isReconnected: true\n    });\n    previousStatusRef.current = status;\n  }, []);\n  return account;\n} // src/hooks/accounts/useBalance.ts\n\n\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React8 from \"react\";\n\nfunction queryKey3(_ref10) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  } = _ref10;\n  return [{\n    entity: \"balance\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }];\n}\n\nfunction queryFn3(_ref11) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits,\n      token\n    }]\n  } = _ref11;\n  if (!address) throw new Error(\"address is required\");\n  return fetchBalance({\n    address,\n    chainId,\n    formatUnits,\n    token\n  });\n}\n\nfunction useBalance() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    formatUnits,\n    scopeKey,\n    staleTime,\n    suspense,\n    token,\n    watch,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const queryKey_ = React8.useMemo(() => queryKey3({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey,\n    token\n  }), [address, chainId, formatUnits, scopeKey, token]);\n  const balanceQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n} // src/hooks/accounts/useConnect.ts\n\n\nimport { connect } from \"@wagmi/core\";\nimport * as React9 from \"react\";\n\nvar mutationKey = args => [{\n  entity: \"connect\",\n  ...args\n}];\n\nvar mutationFn = args => {\n  const {\n    connector,\n    chainId\n  } = args;\n  if (!connector) throw new Error(\"connector is required\");\n  return connect({\n    connector,\n    chainId\n  });\n};\n\nfunction useConnect() {\n  let {\n    chainId,\n    connector,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({\n    connector,\n    chainId\n  }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React9.useCallback(args => {\n    return mutate({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutate]);\n  const connectAsync = React9.useCallback(args => {\n    return mutateAsync({\n      chainId: args?.chainId ?? chainId,\n      connector: args?.connector ?? connector\n    });\n  }, [chainId, connector, mutateAsync]);\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: client.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n} // src/hooks/accounts/useDisconnect.ts\n\n\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{\n  entity: \"disconnect\"\n}];\n\nvar mutationFn2 = () => disconnect();\n\nfunction useDisconnect() {\n  let {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, { ...(onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n\n    } : {}),\n    onMutate,\n    ...(onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n\n    } : {}),\n    ...(onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n\n    } : {})\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n} // src/hooks/accounts/useNetwork.ts\n\n\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\n\nfunction useNetwork() {\n  return useSyncExternalStoreWithTracked(watchNetwork, getNetwork);\n} // src/hooks/accounts/useSigner.ts\n\n\nimport { fetchSigner, watchSigner } from \"@wagmi/core\";\nimport * as React10 from \"react\";\n\nfunction queryKey4(_ref12) {\n  let {\n    chainId\n  } = _ref12;\n  return [{\n    entity: \"signer\",\n    chainId,\n    persist: false\n  }];\n}\n\nfunction queryFn4(_ref13) {\n  let {\n    queryKey: [{\n      chainId\n    }]\n  } = _ref13;\n  return fetchSigner({\n    chainId\n  });\n}\n\nfunction useSigner() {\n  let {\n    chainId: chainId_,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    connector\n  } = useAccount();\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const signerQuery = useQuery(queryKey4({\n    chainId\n  }), queryFn4, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React10.useEffect(() => {\n    const unwatch = watchSigner({\n      chainId\n    }, signer => {\n      if (signer) queryClient.invalidateQueries(queryKey4({\n        chainId\n      }));else queryClient.removeQueries(queryKey4({\n        chainId\n      }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return signerQuery;\n} // src/hooks/accounts/useSignMessage.ts\n\n\nimport { signMessage } from \"@wagmi/core\";\nimport * as React11 from \"react\";\n\nvar mutationKey3 = args => [{\n  entity: \"signMessage\",\n  ...args\n}];\n\nvar mutationFn3 = args => {\n  const {\n    message\n  } = args;\n  if (!message) throw new Error(\"message is required\");\n  return signMessage({\n    message\n  });\n};\n\nfunction useSignMessage() {\n  let {\n    message,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({\n    message\n  }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React11.useCallback(args => mutate(args || {\n    message\n  }), [message, mutate]);\n  const signMessageAsync = React11.useCallback(args => mutateAsync(args || {\n    message\n  }), [message, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n} // src/hooks/accounts/useSignTypedData.ts\n\n\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React12 from \"react\";\n\nfunction mutationKey4(_ref14) {\n  let {\n    domain,\n    types,\n    value\n  } = _ref14;\n  return [{\n    entity: \"signTypedData\",\n    domain,\n    types,\n    value\n  }];\n}\n\nfunction mutationFn4(args) {\n  const {\n    domain,\n    types,\n    value\n  } = args;\n  if (!domain) throw new Error(\"domain is required\");\n  if (!types) throw new Error(\"types is required\");\n  if (!value) throw new Error(\"value is required\");\n  return signTypedData({\n    domain,\n    types,\n    value\n  });\n}\n\nfunction useSignTypedData() {\n  let {\n    domain,\n    types,\n    value,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey4({\n    domain,\n    types,\n    value\n  }), mutationFn4, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signTypedData2 = React12.useCallback(args => mutate({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutate]);\n  const signTypedDataAsync = React12.useCallback(args => mutateAsync({\n    domain: args?.domain ?? domain,\n    types: args?.types ?? types,\n    value: args?.value ?? value\n  }), [domain, types, value, mutateAsync]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n} // src/hooks/accounts/useSwitchNetwork.ts\n\n\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React13 from \"react\";\n\nvar mutationKey5 = args => [{\n  entity: \"switchNetwork\",\n  ...args\n}];\n\nvar mutationFn5 = args => {\n  const {\n    chainId\n  } = args;\n  if (!chainId) throw new Error(\"chainId is required\");\n  return switchNetwork({\n    chainId\n  });\n};\n\nfunction useSwitchNetwork() {\n  let {\n    chainId,\n    throwForSwitchChainNotSupported,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const client = useClient();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({\n    chainId\n  }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React13.useCallback(chainId_ => mutate({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutate]);\n  const switchNetworkAsync_ = React13.useCallback(chainId_ => mutateAsync({\n    chainId: chainId_ ?? chainId\n  }), [chainId, mutateAsync]);\n  React13.useEffect(() => {\n    const unwatch = client.subscribe(_ref15 => {\n      let {\n        chains,\n        connector\n      } = _ref15;\n      return {\n        chains,\n        connector\n      };\n    }, forceUpdate);\n    return unwatch;\n  }, [client, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!client.connector?.switchChain;\n\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n\n  return {\n    chains: client.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n} // src/hooks/contracts/useContract.ts\n\n\nimport { getContract } from \"@wagmi/core\";\nimport * as React14 from \"react\";\n\nfunction useContract() {\n  let {\n    address,\n    abi,\n    signerOrProvider\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return React14.useMemo(() => {\n    if (!address || !abi) return null;\n    return getContract({\n      address,\n      abi,\n      signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n    });\n  }, [address, abi, signerOrProvider]);\n} // src/hooks/contracts/useContractEvent.ts\n\n\nimport * as React15 from \"react\";\n\nfunction useContractEvent() {\n  let {\n    address,\n    chainId,\n    abi,\n    listener,\n    eventName,\n    once\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  const contract = useContract({\n    address,\n    abi,\n    signerOrProvider: webSocketProvider ?? provider\n  });\n  const callbackRef = React15.useRef(listener);\n  callbackRef.current = listener;\n  React15.useEffect(() => {\n    if (!contract || !eventName) return;\n\n    const handler = function () {\n      return callbackRef.current(...arguments);\n    };\n\n    if (once) contract.once(eventName, handler);else contract.on(eventName, handler);\n    return () => {\n      contract.off(eventName, handler);\n    };\n  }, [contract, eventName]);\n} // src/hooks/contracts/useContractInfiniteReads.ts\n\n\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\n\nfunction queryKey5(_ref16) {\n  let {\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  } = _ref16;\n  return [{\n    entity: \"readContractsInfinite\",\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }];\n}\n\nfunction queryFn5(_ref17) {\n  let {\n    contracts\n  } = _ref17;\n  return _ref18 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        overrides\n      }],\n      pageParam\n    } = _ref18;\n    return readContracts({\n      allowFailure,\n      contracts: contracts(pageParam || void 0),\n      overrides\n    });\n  };\n}\n\nfunction useContractInfiniteReads(_ref19) {\n  let {\n    allowFailure,\n    cacheKey,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n    suspense\n  } = _ref19;\n  const queryKey_ = React16.useMemo(() => queryKey5({\n    allowFailure,\n    cacheKey,\n    overrides,\n    scopeKey\n  }), [allowFailure, cacheKey, overrides, scopeKey]);\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({\n    contracts\n  }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\nfunction paginatedIndexesConfig(fn, _ref20) {\n  let {\n    perPage,\n    start,\n    direction\n  } = _ref20;\n\n  const contracts = function () {\n    let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return [...Array(perPage).keys()].map(index => {\n      return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n    }).filter(index => index >= 0).map(fn).flat();\n  };\n\n  return {\n    contracts,\n\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n\n  };\n} // src/hooks/contracts/useContractRead.ts\n\n\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, parseContractResult, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\n\nfunction queryKey6(_ref21) {\n  let {\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  } = _ref21;\n  return [{\n    entity: \"readContract\",\n    address,\n    args,\n    blockNumber,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }];\n}\n\nfunction queryFn6(_ref22) {\n  let {\n    abi\n  } = _ref22;\n  return async _ref23 => {\n    let {\n      queryKey: [{\n        address,\n        args,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref23;\n    if (!abi) throw new Error(\"abi is required\");\n    if (!address) throw new Error(\"address is required\");\n    return (await readContract({\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides\n    })) ?? null;\n  };\n}\n\nfunction useContractRead() {\n  let {\n    abi,\n    address,\n    args,\n    cacheOnBlock = false,\n    cacheTime,\n    chainId: chainId_,\n    enabled: enabled_ = true,\n    functionName,\n    isDataEqual,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const queryKey_ = React17.useMemo(() => queryKey6({\n    address,\n    args,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    functionName,\n    overrides,\n    scopeKey\n  }), [address, args, blockNumber, cacheOnBlock, chainId, functionName, overrides, scopeKey]);\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(queryKey_, queryFn6({\n    abi\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n\n    select(data) {\n      const result = abi && functionName ? parseContractResult({\n        abi,\n        data,\n        functionName\n      }) : data;\n      return select ? select(result) : result;\n    },\n\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/contracts/useContractReads.ts\n\n\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, parseContractResult as parseContractResult2, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\n\nfunction queryKey7(_ref24) {\n  let {\n    allowFailure,\n    blockNumber,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  } = _ref24;\n  return [{\n    entity: \"readContracts\",\n    allowFailure,\n    blockNumber,\n    chainId,\n    scopeKey,\n    contracts: (contracts ?? []).map(_ref25 => {\n      let {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      } = _ref25;\n      return {\n        address,\n        args,\n        chainId: chainId2,\n        functionName\n      };\n    }),\n    overrides\n  }];\n}\n\nfunction queryFn7(_ref26) {\n  let {\n    abis\n  } = _ref26;\n  return _ref27 => {\n    let {\n      queryKey: [{\n        allowFailure,\n        contracts: contracts_,\n        overrides\n      }]\n    } = _ref27;\n    const contracts = contracts_.map((contract, i) => ({ ...contract,\n      abi: abis[i]\n    }));\n    return readContracts2({\n      allowFailure,\n      contracts,\n      overrides\n    });\n  };\n}\n\nfunction useContractReads() {\n  let {\n    allowFailure = true,\n    cacheOnBlock = false,\n    cacheTime,\n    contracts,\n    enabled: enabled_ = true,\n    isDataEqual,\n    keepPreviousData,\n    onError,\n    onSettled,\n    onSuccess,\n    overrides,\n    scopeKey,\n    select,\n    staleTime,\n    structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n    suspense,\n    watch\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    data: blockNumber\n  } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const queryKey_ = React18.useMemo(() => queryKey7({\n    allowFailure,\n    blockNumber: cacheOnBlock ? blockNumber : void 0,\n    chainId,\n    contracts,\n    overrides,\n    scopeKey\n  }), [allowFailure, blockNumber, cacheOnBlock, chainId, scopeKey, contracts, overrides]);\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && contracts?.every(x => x.abi && x.address && x.functionName));\n    if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(_ref28 => {\n    let {\n      abi\n    } = _ref28;\n    return abi;\n  });\n  return useQuery(queryKey_, queryFn7({\n    abis\n  }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n\n    select(data) {\n      const result = data.map((data2, i) => {\n        const {\n          abi,\n          functionName\n        } = contracts?.[i] ?? {};\n        return abi && functionName ? parseContractResult2({\n          abi,\n          functionName,\n          data: data2\n        }) : data2;\n      });\n      return select ? select(result) : result;\n    },\n\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/contracts/useContractWrite.ts\n\n\nimport { writeContract } from \"@wagmi/core\";\nimport * as React19 from \"react\";\n\nfunction mutationKey6(_ref29) {\n  let {\n    address,\n    chainId,\n    abi,\n    functionName,\n    ...config\n  } = _ref29;\n  const {\n    request\n  } = config;\n  const {\n    args,\n    overrides\n  } = config;\n  return [{\n    entity: \"writeContract\",\n    address,\n    args,\n    chainId,\n    abi,\n    functionName,\n    overrides,\n    request\n  }];\n}\n\nfunction mutationFn6(config) {\n  if (!config.address) throw new Error(\"address is required\");\n  if (!config.abi) throw new Error(\"abi is required\");\n  if (!config.functionName) throw new Error(\"functionName is required\");\n\n  switch (config.mode) {\n    case \"prepared\":\n      {\n        if (!config.request) throw new Error(\"request is required\");\n        return writeContract({\n          mode: \"prepared\",\n          address: config.address,\n          chainId: config.chainId,\n          abi: config.abi,\n          functionName: config.functionName,\n          request: config.request\n        });\n      }\n\n    case \"recklesslyUnprepared\":\n      return writeContract({\n        address: config.address,\n        args: config.args,\n        chainId: config.chainId,\n        abi: config.abi,\n        functionName: config.functionName,\n        mode: \"recklesslyUnprepared\",\n        overrides: config.overrides\n      });\n  }\n}\n\nfunction useContractWrite() {\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    address,\n    abi,\n    functionName,\n    chainId,\n    mode\n  } = config;\n  const {\n    request\n  } = config;\n  const {\n    args,\n    overrides\n  } = config;\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey6({\n    address,\n    abi,\n    functionName,\n    chainId,\n    mode,\n    args,\n    overrides,\n    request\n  }), mutationFn6, {\n    onError: config.onError,\n    onMutate: config.onMutate,\n    onSettled: config.onSettled,\n    onSuccess: config.onSuccess\n  });\n  const write = React19.useMemo(() => {\n    if (mode === \"prepared\") {\n      if (!request) return void 0;\n      return () => mutate({\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode: \"prepared\",\n        request\n      });\n    }\n\n    return overrideConfig => mutate({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: \"recklesslyUnprepared\",\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n    });\n  }, [address, chainId, abi, functionName, mode, mutate, args, overrides, request]);\n  const writeAsync = React19.useMemo(() => {\n    if (mode === \"prepared\") {\n      if (!request) return void 0;\n      return () => mutateAsync({\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode: \"prepared\",\n        request\n      });\n    }\n\n    return overrideConfig => mutateAsync({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: \"recklesslyUnprepared\",\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n    });\n  }, [address, chainId, abi, functionName, mode, mutateAsync, args, overrides, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write,\n    writeAsync\n  };\n} // src/hooks/contracts/usePrepareContractWrite.ts\n\n\nimport { prepareWriteContract } from \"@wagmi/core\";\n\nfunction queryKey8(_ref30) {\n  let {\n    activeChainId,\n    args,\n    address,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  } = _ref30;\n  return [{\n    entity: \"prepareContractTransaction\",\n    activeChainId,\n    address,\n    args,\n    chainId,\n    functionName,\n    overrides,\n    signerAddress\n  }];\n}\n\nfunction queryFn8(_ref31) {\n  let {\n    abi,\n    signer\n  } = _ref31;\n  return _ref32 => {\n    let {\n      queryKey: [{\n        args,\n        address,\n        chainId,\n        functionName,\n        overrides\n      }]\n    } = _ref32;\n    if (!abi) throw new Error(\"abi is required\");\n    return prepareWriteContract({\n      abi,\n      args,\n      address,\n      chainId,\n      functionName,\n      overrides,\n      signer\n    });\n  };\n}\n\nfunction usePrepareContractWrite() {\n  let {\n    address,\n    abi,\n    functionName,\n    chainId,\n    args,\n    overrides,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareContractWriteQuery = useQuery(queryKey8({\n    activeChainId: activeChain?.id,\n    address,\n    args,\n    chainId,\n    functionName,\n    scopeKey,\n    signerAddress: signer?._address,\n    overrides\n  }), queryFn8({\n    abi,\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && abi && address && functionName && signer),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      abi,\n      address,\n      args,\n      chainId,\n      functionName,\n      mode: \"prepared\",\n      overrides,\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n} // src/hooks/contracts/useToken.ts\n\n\nimport { fetchToken } from \"@wagmi/core\";\n\nfunction queryKey9(_ref33) {\n  let {\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  } = _ref33;\n  return [{\n    entity: \"token\",\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }];\n}\n\nfunction queryFn9(_ref34) {\n  let {\n    queryKey: [{\n      address,\n      chainId,\n      formatUnits\n    }]\n  } = _ref34;\n  if (!address) throw new Error(\"address is required\");\n  return fetchToken({\n    address,\n    chainId,\n    formatUnits\n  });\n}\n\nfunction useToken() {\n  let {\n    address,\n    chainId: chainId_,\n    formatUnits = \"ether\",\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey9({\n    address,\n    chainId,\n    formatUnits,\n    scopeKey\n  }), queryFn9, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/ens/useEnsAddress.ts\n\n\nimport { fetchEnsAddress } from \"@wagmi/core\";\n\nfunction queryKey10(_ref35) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref35;\n  return [{\n    entity: \"ensAddress\",\n    chainId,\n    name,\n    scopeKey\n  }];\n}\n\nfunction queryFn10(_ref36) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref36;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsAddress({\n    chainId,\n    name\n  });\n}\n\nfunction useEnsAddress() {\n  let {\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    name,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey10({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/ens/useEnsAvatar.ts\n\n\nimport { fetchEnsAvatar } from \"@wagmi/core\";\n\nfunction queryKey11(_ref37) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref37;\n  return [{\n    entity: \"ensAvatar\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\n\nfunction queryFn11(_ref38) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref38;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsAvatar({\n    address,\n    chainId\n  });\n}\n\nfunction useEnsAvatar() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey11({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/ens/useEnsName.ts\n\n\nimport { fetchEnsName } from \"@wagmi/core\";\n\nfunction queryKey12(_ref39) {\n  let {\n    address,\n    chainId,\n    scopeKey\n  } = _ref39;\n  return [{\n    entity: \"ensName\",\n    address,\n    chainId,\n    scopeKey\n  }];\n}\n\nfunction queryFn12(_ref40) {\n  let {\n    queryKey: [{\n      address,\n      chainId\n    }]\n  } = _ref40;\n  if (!address) throw new Error(\"address is required\");\n  return fetchEnsName({\n    address,\n    chainId\n  });\n}\n\nfunction useEnsName() {\n  let {\n    address,\n    cacheTime,\n    chainId: chainId_,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey12({\n    address,\n    chainId,\n    scopeKey\n  }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/ens/useEnsResolver.ts\n\n\nimport { fetchEnsResolver } from \"@wagmi/core\";\n\nfunction queryKey13(_ref41) {\n  let {\n    chainId,\n    name,\n    scopeKey\n  } = _ref41;\n  return [{\n    entity: \"ensResolver\",\n    chainId,\n    name,\n    scopeKey,\n    persist: false\n  }];\n}\n\nfunction queryFn13(_ref42) {\n  let {\n    queryKey: [{\n      chainId,\n      name\n    }]\n  } = _ref42;\n  if (!name) throw new Error(\"name is required\");\n  return fetchEnsResolver({\n    chainId,\n    name\n  });\n}\n\nfunction useEnsResolver() {\n  let {\n    chainId: chainId_,\n    name,\n    enabled = true,\n    scopeKey,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey13({\n    chainId,\n    name,\n    scopeKey\n  }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/transactions/usePrepareSendTransaction.ts\n\n\nimport { prepareSendTransaction } from \"@wagmi/core\";\n\nfunction queryKey14(_ref43) {\n  let {\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  } = _ref43;\n  return [{\n    entity: \"prepareSendTransaction\",\n    activeChainId,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress\n  }];\n}\n\nfunction queryFn14(_ref44) {\n  let {\n    signer\n  } = _ref44;\n  return _ref45 => {\n    let {\n      queryKey: [{\n        chainId,\n        request\n      }]\n    } = _ref45;\n    if (!request?.to) throw new Error(\"request.to is required\");\n    return prepareSendTransaction({\n      chainId,\n      request: { ...request,\n        to: request.to\n      },\n      signer\n    });\n  };\n}\n\nfunction usePrepareSendTransaction() {\n  let {\n    chainId,\n    request,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime = 1e3 * 60 * 60 * 24,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    chain: activeChain\n  } = useNetwork();\n  const {\n    data: signer\n  } = useSigner({\n    chainId\n  });\n  const prepareSendTransactionQuery = useQuery(queryKey14({\n    activeChainId: activeChain?.id,\n    chainId,\n    request,\n    scopeKey,\n    signerAddress: signer?._address\n  }), queryFn14({\n    signer\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && signer && request && request.to),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      request: void 0,\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.data\n    }\n  });\n} // src/hooks/transactions/useSendTransaction.ts\n\n\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\n\nvar mutationKey7 = args => [{\n  entity: \"sendTransaction\",\n  ...args\n}];\n\nvar mutationFn7 = _ref46 => {\n  let {\n    chainId,\n    mode,\n    request\n  } = _ref46;\n  return sendTransaction({\n    chainId,\n    mode,\n    request\n  });\n};\n\nfunction useSendTransaction(_ref47) {\n  let {\n    chainId,\n    mode,\n    request,\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  } = _ref47;\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey7({\n    chainId,\n    mode,\n    request\n  }), mutationFn7, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const sendTransaction2 = React20.useCallback(args => mutate({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutate, request]);\n  const sendTransactionAsync = React20.useCallback(args => mutateAsync({\n    chainId,\n    mode,\n    request: args?.recklesslySetUnpreparedRequest ?? request\n  }), [chainId, mode, mutateAsync, request]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n} // src/hooks/transactions/useTransaction.ts\n\n\nimport { fetchTransaction } from \"@wagmi/core\";\n\nfunction queryKey15(_ref48) {\n  let {\n    chainId,\n    hash,\n    scopeKey\n  } = _ref48;\n  return [{\n    entity: \"transaction\",\n    chainId,\n    hash,\n    scopeKey\n  }];\n}\n\nfunction queryFn15(_ref49) {\n  let {\n    queryKey: [{\n      chainId,\n      hash\n    }]\n  } = _ref49;\n  if (!hash) throw new Error(\"hash is required\");\n  return fetchTransaction({\n    chainId,\n    hash\n  });\n}\n\nfunction useTransaction() {\n  let {\n    cacheTime = 0,\n    chainId: chainId_,\n    enabled = true,\n    hash,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey15({\n    chainId,\n    hash,\n    scopeKey\n  }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/transactions/useWaitForTransaction.ts\n\n\nimport { waitForTransaction } from \"@wagmi/core\";\n\nfunction queryKey16(_ref50) {\n  let {\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  } = _ref50;\n  return [{\n    entity: \"waitForTransaction\",\n    confirmations,\n    chainId,\n    hash,\n    scopeKey,\n    timeout\n  }];\n}\n\nfunction queryFn16(_ref51) {\n  let {\n    onSpeedUp\n  } = _ref51;\n  return _ref52 => {\n    let {\n      queryKey: [{\n        chainId,\n        confirmations,\n        hash,\n        timeout\n      }]\n    } = _ref52;\n    if (!hash) throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onSpeedUp,\n      timeout\n    });\n  };\n}\n\nfunction useWaitForTransaction() {\n  let {\n    chainId: chainId_,\n    confirmations,\n    hash,\n    timeout,\n    cacheTime,\n    enabled = true,\n    scopeKey,\n    staleTime,\n    suspense,\n    onError,\n    onSpeedUp,\n    onSettled,\n    onSuccess\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  return useQuery(queryKey16({\n    chainId,\n    confirmations,\n    hash,\n    scopeKey,\n    timeout\n  }), queryFn16({\n    onSpeedUp\n  }), {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n} // src/hooks/transactions/useWatchPendingTransactions.ts\n\n\nimport * as React21 from \"react\";\n\nfunction useWatchPendingTransactions(_ref53) {\n  let {\n    chainId: chainId_,\n    enabled = true,\n    listener\n  } = _ref53;\n  const chainId = useChainId({\n    chainId: chainId_\n  });\n  const provider = useProvider({\n    chainId\n  });\n  const webSocketProvider = useWebSocketProvider({\n    chainId\n  });\n  React21.useEffect(() => {\n    if (!enabled) return;\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"pending\", listener);\n    return () => {\n      provider_.off(\"pending\", listener);\n    };\n  }, [enabled, listener, provider, webSocketProvider]);\n} // src/index.ts\n\n\nimport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, configureChains, createStorage as createStorage2, deepEqual as deepEqual5, deserialize, erc20ABI, erc721ABI, erc4626ABI, goerli, mainnet, readContracts as readContracts3, serialize } from \"@wagmi/core\";\nexport { AddChainError, ChainDoesNotSupportMulticallError, ChainMismatchError, ChainNotConfiguredError, Connector, ConnectorAlreadyConnectedError, ConnectorNotFoundError, Context, ContractMethodDoesNotExistError, ContractMethodNoResultError, ContractMethodRevertedError, ContractResultDecodeError, ProviderChainsNotFound, ProviderRpcError, ResourceUnavailableError, RpcError, SwitchChainError, SwitchChainNotSupportedError, UserRejectedRequestError, WagmiConfig, configureChains, createClient, createStorage2 as createStorage, deepEqual5 as deepEqual, deserialize, erc20ABI, erc4626ABI, erc721ABI, goerli, mainnet, paginatedIndexesConfig, readContracts3 as readContracts, serialize, useAccount, useBalance, useBlockNumber, useChainId, useClient, useConnect, useContract, useContractEvent, useContractInfiniteReads, useContractRead, useContractReads, useContractWrite, useDisconnect, useEnsAddress, useEnsAvatar, useEnsName, useEnsResolver, useFeeData, useInfiniteQuery, useMutation, useNetwork, usePrepareContractWrite, usePrepareSendTransaction, useProvider, useQuery, useQueryClient2 as useQueryClient, useSendTransaction, useSignMessage, useSignTypedData, useSigner, useSwitchNetwork, useToken, useTransaction, useWaitForTransaction, useWatchPendingTransactions, useWebSocketProvider };","map":{"version":3,"names":["createSyncStoragePersister","QueryClient","persistQueryClient","createClient","createCoreClient","createStorage","noopStorage","queryClient","defaultOptions","queries","cacheTime","networkMode","refetchOnWindowFocus","retry","mutations","storage","window","localStorage","persister","key","serialize","x","deserialize","config","client","dehydrateOptions","shouldDehydrateQuery","query","queryKey","persist","Object","assign","QueryClientProvider","React","Context","createContext","queryClientContext","WagmiConfig","children","createElement","Provider","context","value","useClient","useContext","Error","join","getAccount","getClient","React7","notifyManager","useIsRestoring","useQueryClient","useQueryErrorResetBoundary","React2","pkg","useSyncExternalStore2","useSyncExternalStore","isQueryKey","Array","isArray","parseQueryArgs","arg1","arg2","arg3","queryFn","shouldThrowError","_useErrorBoundary","params","trackResult","result","observer","trackedResult","keys","forEach","defineProperty","configurable","enumerable","get","trackedProps","add","useBaseQuery","options","Observer","isRestoring","errorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","useErrorBoundary","isReset","retryOnMount","useState","getOptimisticResult","useCallback","onStoreChange","subscribe","getCurrentResult","useEffect","clearReset","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","data","catch","error","isError","getCurrentQuery","status","fetchStatus","isIdle","InfiniteQueryObserver","useInfiniteQuery","parsedOptions","baseQuery","fetchNextPage","hasNextPage","isFetched","isFetchedAfterMount","isFetchingNextPage","isRefetching","isSuccess","refetch","internal","dataUpdatedAt","errorUpdatedAt","failureCount","isLoadingError","isPaused","isPlaceholderData","isPreviousData","isRefetchError","isStale","remove","notifyOnChangeProps","parseMutationArgs","useMutation","useMutation_","QueryObserver","useQuery","useQueryClient_","useQueryClient2","getProvider","watchProvider","useSyncExternalStoreWithSelector","useProvider","chainId","cb","a","b","network","getWebSocketProvider","watchWebSocketProvider","useSyncExternalStoreWithSelector2","useWebSocketProvider","useChainId","provider","React3","useForceUpdate","forceUpdate","useReducer","fetchBlockNumber","debounce","React4","scopeKey","entity","useBlockNumber","chainId_","enabled","watch","onBlock","webSocketProvider","listener","blockNumber","setQueryData","provider_","on","off","fetchFeeData","React5","queryKey2","formatUnits","queryFn2","useFeeData","queryKey_","useMemo","feeDataQuery","useInvalidateOnBlock","Boolean","queryKey17","invalidateQueries","deepEqual","React6","useSyncExternalStoreWithSelector3","isPlainObject","obj","useSyncExternalStoreWithTracked","getSnapshot","getServerSnapshot","isEqual","trackedKeys","useRef","current","length","equal","defineProperties","entries","reduce","res","includes","push","useAccount","onConnect","onDisconnect","watchAccount","callback","unsubscribe","state","address","account","connector","curr","prev","isReconnected","previousStatusRef","fetchBalance","React8","queryKey3","token","queryFn3","useBalance","balanceQuery","connect","React9","mutationKey","args","mutationFn","useConnect","onMutate","mutate","mutateAsync","reset","variables","connect2","connectAsync","connectors","pendingConnector","disconnect","mutationKey2","mutationFn2","useDisconnect","disconnect2","disconnectAsync","error2","_variables","_data","getNetwork","watchNetwork","useNetwork","fetchSigner","watchSigner","React10","queryKey4","queryFn4","useSigner","signerQuery","Infinity","unwatch","signer","removeQueries","signMessage","React11","mutationKey3","mutationFn3","message","useSignMessage","signMessage2","signMessageAsync","signTypedData","React12","mutationKey4","domain","types","mutationFn4","useSignTypedData","signTypedData2","signTypedDataAsync","switchNetwork","React13","mutationKey5","mutationFn5","useSwitchNetwork","throwForSwitchChainNotSupported","switchNetwork_","switchNetworkAsync_","chains","switchNetwork2","switchNetworkAsync","supportsSwitchChain","switchChain","pendingChainId","getContract","React14","useContract","abi","signerOrProvider","React15","useContractEvent","eventName","once","contract","callbackRef","handler","replaceEqualDeep","deepEqual2","readContracts","React16","queryKey5","allowFailure","cacheKey","overrides","queryFn5","contracts","pageParam","useContractInfiniteReads","enabled_","getNextPageParam","isDataEqual","keepPreviousData","select","structuralSharing","oldData","newData","enabled2","paginatedIndexesConfig","fn","perPage","start","direction","page","map","index","filter","flat","lastPage","pages","replaceEqualDeep2","deepEqual3","parseContractResult","readContract","React17","queryKey6","functionName","queryFn6","useContractRead","cacheOnBlock","replaceEqualDeep3","deepEqual4","parseContractResult2","readContracts2","React18","queryKey7","chainId2","queryFn7","abis","contracts_","i","useContractReads","every","data2","writeContract","React19","mutationKey6","request","mutationFn6","mode","useContractWrite","write","overrideConfig","recklesslySetUnpreparedArgs","recklesslySetUnpreparedOverrides","writeAsync","prepareWriteContract","queryKey8","activeChainId","signerAddress","queryFn8","usePrepareContractWrite","chain","activeChain","prepareContractWriteQuery","id","_address","fetchToken","queryKey9","queryFn9","useToken","fetchEnsAddress","queryKey10","name","queryFn10","useEnsAddress","fetchEnsAvatar","queryKey11","queryFn11","useEnsAvatar","fetchEnsName","queryKey12","queryFn12","useEnsName","fetchEnsResolver","queryKey13","queryFn13","useEnsResolver","prepareSendTransaction","queryKey14","queryFn14","to","usePrepareSendTransaction","prepareSendTransactionQuery","sendTransaction","React20","mutationKey7","mutationFn7","useSendTransaction","sendTransaction2","recklesslySetUnpreparedRequest","sendTransactionAsync","fetchTransaction","queryKey15","hash","queryFn15","useTransaction","waitForTransaction","queryKey16","confirmations","timeout","queryFn16","onSpeedUp","useWaitForTransaction","React21","useWatchPendingTransactions","AddChainError","ChainDoesNotSupportMulticallError","ChainMismatchError","ChainNotConfiguredError","Connector","ConnectorAlreadyConnectedError","ConnectorNotFoundError","ContractMethodDoesNotExistError","ContractMethodNoResultError","ContractMethodRevertedError","ContractResultDecodeError","ProviderChainsNotFound","ProviderRpcError","ResourceUnavailableError","RpcError","SwitchChainError","SwitchChainNotSupportedError","UserRejectedRequestError","configureChains","createStorage2","deepEqual5","erc20ABI","erc721ABI","erc4626ABI","goerli","mainnet","readContracts3"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/wagmi/dist/index.js"],"sourcesContent":["// src/client.ts\nimport { createSyncStoragePersister } from \"@tanstack/query-sync-storage-persister\";\nimport { QueryClient } from \"@tanstack/react-query\";\nimport { persistQueryClient } from \"@tanstack/react-query-persist-client\";\nimport {\n  createClient as createCoreClient,\n  createStorage,\n  noopStorage\n} from \"@wagmi/core\";\nfunction createClient({\n  queryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        cacheTime: 1e3 * 60 * 60 * 24,\n        networkMode: \"offlineFirst\",\n        refetchOnWindowFocus: false,\n        retry: 0\n      },\n      mutations: {\n        networkMode: \"offlineFirst\"\n      }\n    }\n  }),\n  storage = createStorage({\n    storage: typeof window !== \"undefined\" && window.localStorage ? window.localStorage : noopStorage\n  }),\n  persister = typeof window !== \"undefined\" ? createSyncStoragePersister({\n    key: \"cache\",\n    storage,\n    serialize: (x) => x,\n    deserialize: (x) => x\n  }) : void 0,\n  ...config\n}) {\n  const client = createCoreClient({\n    ...config,\n    storage\n  });\n  if (persister)\n    persistQueryClient({\n      queryClient,\n      persister,\n      dehydrateOptions: {\n        shouldDehydrateQuery: (query) => query.cacheTime !== 0 && query.queryKey[0].persist !== false\n      }\n    });\n  return Object.assign(client, { queryClient });\n}\n\n// src/context.ts\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport * as React from \"react\";\nvar Context = React.createContext(void 0);\nvar queryClientContext = React.createContext(\n  void 0\n);\nfunction WagmiConfig({\n  children,\n  client\n}) {\n  return React.createElement(Context.Provider, {\n    children: React.createElement(QueryClientProvider, {\n      children,\n      client: client.queryClient,\n      context: queryClientContext\n    }),\n    value: client\n  });\n}\nfunction useClient() {\n  const client = React.useContext(Context);\n  if (!client)\n    throw new Error(\n      [\n        \"`useClient` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n      ].join(\"\\n\")\n    );\n  return client;\n}\n\n// src/hooks/accounts/useAccount.ts\nimport { getAccount, getClient } from \"@wagmi/core\";\nimport * as React7 from \"react\";\n\n// src/hooks/utils/query/useBaseQuery.ts\nimport {\n  notifyManager,\n  useIsRestoring,\n  useQueryClient,\n  useQueryErrorResetBoundary\n} from \"@tanstack/react-query\";\nimport * as React2 from \"react\";\n\n// src/hooks/utils/useSyncExternalStore.ts\nimport * as pkg from \"use-sync-external-store/shim/index.js\";\nvar useSyncExternalStore2 = pkg.useSyncExternalStore;\n\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n  if (typeof arg2 === \"function\") {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 };\n  }\n  return { ...arg2, queryKey: arg1 };\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n  if (typeof _useErrorBoundary === \"function\") {\n    return _useErrorBoundary(...params);\n  }\n  return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n  const trackedResult = {};\n  Object.keys(result).forEach((key) => {\n    Object.defineProperty(trackedResult, key, {\n      configurable: false,\n      enumerable: true,\n      get: () => {\n        observer.trackedProps.add(key);\n        return result[key];\n      }\n    });\n  });\n  return trackedResult;\n}\n\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({ context: options.context });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options);\n  defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    );\n  }\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    );\n  }\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    );\n  }\n  if (defaultedOptions.suspense) {\n    if (typeof defaultedOptions.staleTime !== \"number\") {\n      defaultedOptions.staleTime = 1e3;\n    }\n  }\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n  const [observer] = React2.useState(\n    () => new Observer(\n      queryClient,\n      defaultedOptions\n    )\n  );\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore2(\n    React2.useCallback(\n      (onStoreChange) => isRestoring ? () => void 0 : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring]\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult()\n  );\n  React2.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n  React2.useEffect(() => {\n    observer.setOptions(defaultedOptions, { listeners: false });\n  }, [defaultedOptions, observer]);\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(({ data }) => {\n      defaultedOptions.onSuccess?.(data);\n      defaultedOptions.onSettled?.(data, null);\n    }).catch((error) => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError?.(error);\n      defaultedOptions.onSettled?.(void 0, error);\n    });\n  }\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n    result.error,\n    observer.getCurrentQuery()\n  ])) {\n    throw result.error;\n  }\n  const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n  const isIdle = status === \"idle\";\n  const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n  return {\n    ...result,\n    defaultedOptions,\n    isIdle,\n    isLoading,\n    observer,\n    status\n  };\n}\n\n// src/hooks/utils/query/useInfiniteQuery.ts\nimport { InfiniteQueryObserver } from \"@tanstack/react-query\";\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery(\n    { context: queryClientContext, ...parsedOptions },\n    InfiniteQueryObserver\n  );\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchNextPage: baseQuery.fetchNextPage,\n    fetchStatus: baseQuery.fetchStatus,\n    hasNextPage: baseQuery.hasNextPage,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isFetchingNextPage: baseQuery.isFetchingNextPage,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useMutation.ts\nimport {\n  parseMutationArgs,\n  useMutation as useMutation_\n} from \"@tanstack/react-query\";\nfunction useMutation(arg1, arg2, arg3) {\n  const options = parseMutationArgs(arg1, arg2, arg3);\n  return useMutation_({ context: queryClientContext, ...options });\n}\n\n// src/hooks/utils/query/useQuery.ts\nimport { QueryObserver } from \"@tanstack/react-query\";\nfunction useQuery(arg1, arg2, arg3) {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n  const baseQuery = useBaseQuery({ context: queryClientContext, ...parsedOptions }, QueryObserver);\n  const result = {\n    data: baseQuery.data,\n    error: baseQuery.error,\n    fetchStatus: baseQuery.fetchStatus,\n    isError: baseQuery.isError,\n    isFetched: baseQuery.isFetched,\n    isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n    isFetching: baseQuery.isFetching,\n    isIdle: baseQuery.isIdle,\n    isLoading: baseQuery.isLoading,\n    isRefetching: baseQuery.isRefetching,\n    isSuccess: baseQuery.isSuccess,\n    refetch: baseQuery.refetch,\n    status: baseQuery.status,\n    internal: {\n      dataUpdatedAt: baseQuery.dataUpdatedAt,\n      errorUpdatedAt: baseQuery.errorUpdatedAt,\n      failureCount: baseQuery.failureCount,\n      isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n      isLoadingError: baseQuery.isLoadingError,\n      isPaused: baseQuery.isPaused,\n      isPlaceholderData: baseQuery.isPlaceholderData,\n      isPreviousData: baseQuery.isPreviousData,\n      isRefetchError: baseQuery.isRefetchError,\n      isStale: baseQuery.isStale,\n      remove: baseQuery.remove\n    }\n  };\n  return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n\n// src/hooks/utils/query/useQueryClient.ts\nimport { useQueryClient as useQueryClient_ } from \"@tanstack/react-query\";\nvar useQueryClient2 = () => useQueryClient_({ context: queryClientContext });\n\n// src/hooks/providers/useProvider.ts\nimport { getProvider, watchProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useProvider({\n  chainId\n} = {}) {\n  return useSyncExternalStoreWithSelector(\n    (cb) => watchProvider({ chainId }, cb),\n    () => getProvider({ chainId }),\n    () => getProvider({ chainId }),\n    (x) => x,\n    (a, b) => a.network.chainId === b.network.chainId\n  );\n}\n\n// src/hooks/providers/useWebSocketProvider.ts\nimport { getWebSocketProvider, watchWebSocketProvider } from \"@wagmi/core\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector2 } from \"use-sync-external-store/shim/with-selector.js\";\nfunction useWebSocketProvider({ chainId } = {}) {\n  return useSyncExternalStoreWithSelector2(\n    (cb) => watchWebSocketProvider({ chainId }, cb),\n    () => getWebSocketProvider({ chainId }),\n    () => getWebSocketProvider({ chainId }),\n    (x) => x,\n    (a, b) => a?.network.chainId === b?.network.chainId\n  );\n}\n\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n  const provider = useProvider({ chainId });\n  return provider.network.chainId;\n}\n\n// src/hooks/utils/useForceUpdate.ts\nimport * as React3 from \"react\";\nfunction useForceUpdate() {\n  const [, forceUpdate] = React3.useReducer((x) => x + 1, 0);\n  return forceUpdate;\n}\n\n// src/hooks/network-status/useBlockNumber.ts\nimport { fetchBlockNumber } from \"@wagmi/core\";\nimport { debounce } from \"@wagmi/core/internal\";\nimport * as React4 from \"react\";\nfunction queryKey({ chainId, scopeKey }) {\n  return [{ entity: \"blockNumber\", chainId, scopeKey }];\n}\nfunction queryFn({\n  queryKey: [{ chainId }]\n}) {\n  return fetchBlockNumber({ chainId });\n}\nfunction useBlockNumber({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  watch = false,\n  onBlock,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  const queryClient = useQueryClient2();\n  React4.useEffect(() => {\n    if (!enabled)\n      return;\n    if (!watch && !onBlock)\n      return;\n    const listener = debounce((blockNumber) => {\n      if (watch)\n        queryClient.setQueryData(queryKey({ chainId, scopeKey }), blockNumber);\n      if (onBlock)\n        onBlock(blockNumber);\n    }, 1);\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"block\", listener);\n    return () => {\n      provider_.off(\"block\", listener);\n    };\n  }, [\n    chainId,\n    scopeKey,\n    onBlock,\n    provider,\n    queryClient,\n    watch,\n    webSocketProvider,\n    enabled\n  ]);\n  return useQuery(queryKey({ scopeKey, chainId }), queryFn, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/network-status/useFeeData.ts\nimport { fetchFeeData } from \"@wagmi/core\";\nimport * as React5 from \"react\";\nfunction queryKey2({\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"feeData\", chainId, formatUnits, scopeKey }];\n}\nfunction queryFn2({\n  queryKey: [{ chainId, formatUnits }]\n}) {\n  return fetchFeeData({ chainId, formatUnits });\n}\nfunction useFeeData({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits = \"wei\",\n  scopeKey,\n  staleTime,\n  suspense,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React5.useMemo(\n    () => queryKey2({\n      chainId,\n      formatUnits,\n      scopeKey\n    }),\n    [chainId, formatUnits, scopeKey]\n  );\n  const feeDataQuery = useQuery(queryKey_, queryFn2, {\n    cacheTime,\n    enabled,\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch),\n    queryKey: queryKey_\n  });\n  return feeDataQuery;\n}\n\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({\n  chainId,\n  enabled,\n  queryKey: queryKey17\n}) {\n  const queryClient = useQueryClient2();\n  useBlockNumber({\n    chainId,\n    enabled,\n    onBlock: enabled ? () => queryClient.invalidateQueries(queryKey17) : void 0,\n    scopeKey: enabled ? void 0 : \"idle\"\n  });\n}\n\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\nimport { deepEqual } from \"@wagmi/core\";\nimport * as React6 from \"react\";\nimport { useSyncExternalStoreWithSelector as useSyncExternalStoreWithSelector3 } from \"use-sync-external-store/shim/with-selector.js\";\nvar isPlainObject = (obj) => typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = deepEqual) {\n  const trackedKeys = React6.useRef([]);\n  const result = useSyncExternalStoreWithSelector3(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n    (x) => x,\n    (a, b) => {\n      if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n        for (const key of trackedKeys.current) {\n          const equal = isEqual(\n            a[key],\n            b[key]\n          );\n          if (!equal)\n            return false;\n        }\n        return true;\n      }\n      return isEqual(a, b);\n    }\n  );\n  if (isPlainObject(result)) {\n    const trackedResult = { ...result };\n    Object.defineProperties(\n      trackedResult,\n      Object.entries(trackedResult).reduce(\n        (res, [key, value]) => {\n          return {\n            ...res,\n            [key]: {\n              configurable: false,\n              enumerable: true,\n              get: () => {\n                if (!trackedKeys.current.includes(key)) {\n                  trackedKeys.current.push(key);\n                }\n                return value;\n              }\n            }\n          };\n        },\n        {}\n      )\n    );\n    return trackedResult;\n  }\n  return result;\n}\n\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n  const watchAccount = React7.useCallback(\n    (callback) => {\n      const client = getClient();\n      const unsubscribe = client.subscribe(\n        (state) => ({\n          address: state.data?.account,\n          connector: state.connector,\n          status: state.status\n        }),\n        (curr, prev) => {\n          if (!!onConnect && prev.status !== \"connected\" && curr.status === \"connected\")\n            onConnect({\n              address: curr.address,\n              connector: curr.connector,\n              isReconnected: prev.status === \"reconnecting\"\n            });\n          if (!!onDisconnect && prev.status === \"connected\" && curr.status === \"disconnected\")\n            onDisconnect();\n          return callback(getAccount());\n        }\n      );\n      return unsubscribe;\n    },\n    [onConnect, onDisconnect]\n  );\n  const account = useSyncExternalStoreWithTracked(watchAccount, getAccount);\n  const previousStatusRef = React7.useRef();\n  const { address, connector, status } = account;\n  React7.useEffect(() => {\n    if (!!onConnect && previousStatusRef.current === void 0 && status === \"connected\")\n      onConnect({ address, connector, isReconnected: true });\n    previousStatusRef.current = status;\n  }, []);\n  return account;\n}\n\n// src/hooks/accounts/useBalance.ts\nimport { fetchBalance } from \"@wagmi/core\";\nimport * as React8 from \"react\";\nfunction queryKey3({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey,\n  token\n}) {\n  return [\n    {\n      entity: \"balance\",\n      address,\n      chainId,\n      formatUnits,\n      scopeKey,\n      token\n    }\n  ];\n}\nfunction queryFn3({\n  queryKey: [{ address, chainId, formatUnits, token }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchBalance({ address, chainId, formatUnits, token });\n}\nfunction useBalance({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  formatUnits,\n  scopeKey,\n  staleTime,\n  suspense,\n  token,\n  watch,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const queryKey_ = React8.useMemo(\n    () => queryKey3({ address, chainId, formatUnits, scopeKey, token }),\n    [address, chainId, formatUnits, scopeKey, token]\n  );\n  const balanceQuery = useQuery(queryKey_, queryFn3, {\n    cacheTime,\n    enabled: Boolean(enabled && address),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && address),\n    queryKey: queryKey_\n  });\n  return balanceQuery;\n}\n\n// src/hooks/accounts/useConnect.ts\nimport { connect } from \"@wagmi/core\";\nimport * as React9 from \"react\";\nvar mutationKey = (args) => [{ entity: \"connect\", ...args }];\nvar mutationFn = (args) => {\n  const { connector, chainId } = args;\n  if (!connector)\n    throw new Error(\"connector is required\");\n  return connect({ connector, chainId });\n};\nfunction useConnect({\n  chainId,\n  connector,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const client = useClient();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey({ connector, chainId }), mutationFn, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const connect2 = React9.useCallback(\n    (args) => {\n      return mutate({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutate]\n  );\n  const connectAsync = React9.useCallback(\n    (args) => {\n      return mutateAsync({\n        chainId: args?.chainId ?? chainId,\n        connector: args?.connector ?? connector\n      });\n    },\n    [chainId, connector, mutateAsync]\n  );\n  return {\n    connect: connect2,\n    connectAsync,\n    connectors: client.connectors,\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingConnector: variables?.connector,\n    reset,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useDisconnect.ts\nimport { disconnect } from \"@wagmi/core\";\nvar mutationKey2 = [{ entity: \"disconnect\" }];\nvar mutationFn2 = () => disconnect();\nfunction useDisconnect({\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate: disconnect2,\n    mutateAsync: disconnectAsync,\n    reset,\n    status\n  } = useMutation(mutationKey2, mutationFn2, {\n    ...onError ? {\n      onError(error2, _variables, context) {\n        onError(error2, context);\n      }\n    } : {},\n    onMutate,\n    ...onSettled ? {\n      onSettled(_data, error2, _variables, context) {\n        onSettled(error2, context);\n      }\n    } : {},\n    ...onSuccess ? {\n      onSuccess(_data, _variables, context) {\n        onSuccess(context);\n      }\n    } : {}\n  });\n  return {\n    disconnect: disconnect2,\n    disconnectAsync,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status\n  };\n}\n\n// src/hooks/accounts/useNetwork.ts\nimport { getNetwork, watchNetwork } from \"@wagmi/core\";\nfunction useNetwork() {\n  return useSyncExternalStoreWithTracked(watchNetwork, getNetwork);\n}\n\n// src/hooks/accounts/useSigner.ts\nimport { fetchSigner, watchSigner } from \"@wagmi/core\";\nimport * as React10 from \"react\";\nfunction queryKey4({ chainId }) {\n  return [{ entity: \"signer\", chainId, persist: false }];\n}\nfunction queryFn4({\n  queryKey: [{ chainId }]\n}) {\n  return fetchSigner({ chainId });\n}\nfunction useSigner({\n  chainId: chainId_,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { connector } = useAccount();\n  const chainId = useChainId({ chainId: chainId_ });\n  const signerQuery = useQuery(queryKey4({ chainId }), queryFn4, {\n    cacheTime: 0,\n    enabled: Boolean(connector),\n    staleTime: Infinity,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n  const queryClient = useQueryClient2();\n  React10.useEffect(() => {\n    const unwatch = watchSigner({ chainId }, (signer) => {\n      if (signer)\n        queryClient.invalidateQueries(queryKey4({ chainId }));\n      else\n        queryClient.removeQueries(queryKey4({ chainId }));\n    });\n    return unwatch;\n  }, [queryClient, chainId]);\n  return signerQuery;\n}\n\n// src/hooks/accounts/useSignMessage.ts\nimport { signMessage } from \"@wagmi/core\";\nimport * as React11 from \"react\";\nvar mutationKey3 = (args) => [{ entity: \"signMessage\", ...args }];\nvar mutationFn3 = (args) => {\n  const { message } = args;\n  if (!message)\n    throw new Error(\"message is required\");\n  return signMessage({ message });\n};\nfunction useSignMessage({\n  message,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey3({ message }), mutationFn3, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const signMessage2 = React11.useCallback(\n    (args) => mutate(args || { message }),\n    [message, mutate]\n  );\n  const signMessageAsync = React11.useCallback(\n    (args) => mutateAsync(args || { message }),\n    [message, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signMessage: signMessage2,\n    signMessageAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSignTypedData.ts\nimport { signTypedData } from \"@wagmi/core\";\nimport * as React12 from \"react\";\nfunction mutationKey4({ domain, types, value }) {\n  return [{ entity: \"signTypedData\", domain, types, value }];\n}\nfunction mutationFn4(args) {\n  const { domain, types, value } = args;\n  if (!domain)\n    throw new Error(\"domain is required\");\n  if (!types)\n    throw new Error(\"types is required\");\n  if (!value)\n    throw new Error(\"value is required\");\n  return signTypedData({\n    domain,\n    types,\n    value\n  });\n}\nfunction useSignTypedData({\n  domain,\n  types,\n  value,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey4({\n      domain,\n      types,\n      value\n    }),\n    mutationFn4,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const signTypedData2 = React12.useCallback(\n    (args) => mutate({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      value: args?.value ?? value\n    }),\n    [domain, types, value, mutate]\n  );\n  const signTypedDataAsync = React12.useCallback(\n    (args) => mutateAsync({\n      domain: args?.domain ?? domain,\n      types: args?.types ?? types,\n      value: args?.value ?? value\n    }),\n    [domain, types, value, mutateAsync]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    signTypedData: signTypedData2,\n    signTypedDataAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/accounts/useSwitchNetwork.ts\nimport { switchNetwork } from \"@wagmi/core\";\nimport * as React13 from \"react\";\nvar mutationKey5 = (args) => [{ entity: \"switchNetwork\", ...args }];\nvar mutationFn5 = (args) => {\n  const { chainId } = args;\n  if (!chainId)\n    throw new Error(\"chainId is required\");\n  return switchNetwork({ chainId });\n};\nfunction useSwitchNetwork({\n  chainId,\n  throwForSwitchChainNotSupported,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n} = {}) {\n  const client = useClient();\n  const forceUpdate = useForceUpdate();\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(mutationKey5({ chainId }), mutationFn5, {\n    onError,\n    onMutate,\n    onSettled,\n    onSuccess\n  });\n  const switchNetwork_ = React13.useCallback(\n    (chainId_) => mutate({ chainId: chainId_ ?? chainId }),\n    [chainId, mutate]\n  );\n  const switchNetworkAsync_ = React13.useCallback(\n    (chainId_) => mutateAsync({ chainId: chainId_ ?? chainId }),\n    [chainId, mutateAsync]\n  );\n  React13.useEffect(() => {\n    const unwatch = client.subscribe(\n      ({ chains, connector }) => ({\n        chains,\n        connector\n      }),\n      forceUpdate\n    );\n    return unwatch;\n  }, [client, forceUpdate]);\n  let switchNetwork2;\n  let switchNetworkAsync;\n  const supportsSwitchChain = !!client.connector?.switchChain;\n  if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n    switchNetwork2 = switchNetwork_;\n    switchNetworkAsync = switchNetworkAsync_;\n  }\n  return {\n    chains: client.chains ?? [],\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    pendingChainId: variables?.chainId,\n    reset,\n    status,\n    switchNetwork: switchNetwork2,\n    switchNetworkAsync,\n    variables\n  };\n}\n\n// src/hooks/contracts/useContract.ts\nimport { getContract } from \"@wagmi/core\";\nimport * as React14 from \"react\";\nfunction useContract({\n  address,\n  abi,\n  signerOrProvider\n} = {}) {\n  return React14.useMemo(() => {\n    if (!address || !abi)\n      return null;\n    return getContract({\n      address,\n      abi,\n      signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n    });\n  }, [address, abi, signerOrProvider]);\n}\n\n// src/hooks/contracts/useContractEvent.ts\nimport * as React15 from \"react\";\nfunction useContractEvent({\n  address,\n  chainId,\n  abi,\n  listener,\n  eventName,\n  once\n} = {}) {\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  const contract = useContract({\n    address,\n    abi,\n    signerOrProvider: webSocketProvider ?? provider\n  });\n  const callbackRef = React15.useRef(listener);\n  callbackRef.current = listener;\n  React15.useEffect(() => {\n    if (!contract || !eventName)\n      return;\n    const handler = (...event) => callbackRef.current(...event);\n    if (once)\n      contract.once(eventName, handler);\n    else\n      contract.on(eventName, handler);\n    return () => {\n      contract.off(eventName, handler);\n    };\n  }, [contract, eventName]);\n}\n\n// src/hooks/contracts/useContractInfiniteReads.ts\nimport { replaceEqualDeep } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual2, readContracts } from \"@wagmi/core\";\nimport * as React16 from \"react\";\nfunction queryKey5({\n  allowFailure,\n  cacheKey,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContractsInfinite\",\n      allowFailure,\n      cacheKey,\n      overrides,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn5({\n  contracts\n}) {\n  return ({\n    queryKey: [{ allowFailure, overrides }],\n    pageParam\n  }) => {\n    return readContracts({\n      allowFailure,\n      contracts: contracts(pageParam || void 0),\n      overrides\n    });\n  };\n}\nfunction useContractInfiniteReads({\n  allowFailure,\n  cacheKey,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  getNextPageParam,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual2(oldData, newData) ? oldData : replaceEqualDeep(oldData, newData),\n  suspense\n}) {\n  const queryKey_ = React16.useMemo(\n    () => queryKey5({ allowFailure, cacheKey, overrides, scopeKey }),\n    [allowFailure, cacheKey, overrides, scopeKey]\n  );\n  const enabled = React16.useMemo(() => {\n    const enabled2 = Boolean(enabled_ && contracts);\n    return enabled2;\n  }, [contracts, enabled_]);\n  return useInfiniteQuery(queryKey_, queryFn5({ contracts }), {\n    cacheTime,\n    enabled,\n    getNextPageParam,\n    isDataEqual,\n    keepPreviousData,\n    select,\n    staleTime,\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\nfunction paginatedIndexesConfig(fn, {\n  perPage,\n  start,\n  direction\n}) {\n  const contracts = (page = 0) => [...Array(perPage).keys()].map((index) => {\n    return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n  }).filter((index) => index >= 0).map(fn).flat();\n  return {\n    contracts,\n    getNextPageParam(lastPage, pages) {\n      return lastPage?.length === perPage ? pages.length : void 0;\n    }\n  };\n}\n\n// src/hooks/contracts/useContractRead.ts\nimport { replaceEqualDeep as replaceEqualDeep2 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual3, parseContractResult, readContract } from \"@wagmi/core\";\nimport * as React17 from \"react\";\nfunction queryKey6({\n  address,\n  args,\n  blockNumber,\n  chainId,\n  functionName,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContract\",\n      address,\n      args,\n      blockNumber,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    }\n  ];\n}\nfunction queryFn6({ abi }) {\n  return async ({\n    queryKey: [{ address, args, chainId, functionName, overrides }]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    if (!address)\n      throw new Error(\"address is required\");\n    return await readContract({\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides\n    }) ?? null;\n  };\n}\nfunction useContractRead({\n  abi,\n  address,\n  args,\n  cacheOnBlock = false,\n  cacheTime,\n  chainId: chainId_,\n  enabled: enabled_ = true,\n  functionName,\n  isDataEqual,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual3(oldData, newData) ? oldData : replaceEqualDeep2(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const { data: blockNumber } = useBlockNumber({\n    chainId,\n    enabled: watch || cacheOnBlock,\n    scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n    watch\n  });\n  const queryKey_ = React17.useMemo(\n    () => queryKey6({\n      address,\n      args,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    }),\n    [\n      address,\n      args,\n      blockNumber,\n      cacheOnBlock,\n      chainId,\n      functionName,\n      overrides,\n      scopeKey\n    ]\n  );\n  const enabled = React17.useMemo(() => {\n    let enabled2 = Boolean(enabled_ && abi && address && functionName);\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [abi, address, blockNumber, cacheOnBlock, enabled_, functionName]);\n  useInvalidateOnBlock({\n    chainId,\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  return useQuery(\n    queryKey_,\n    queryFn6({\n      abi\n    }),\n    {\n      cacheTime,\n      enabled,\n      isDataEqual,\n      select(data) {\n        const result = abi && functionName ? parseContractResult({\n          abi,\n          data,\n          functionName\n        }) : data;\n        return select ? select(result) : result;\n      },\n      staleTime,\n      structuralSharing,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/contracts/useContractReads.ts\nimport { replaceEqualDeep as replaceEqualDeep3 } from \"@tanstack/react-query\";\nimport { deepEqual as deepEqual4, parseContractResult as parseContractResult2, readContracts as readContracts2 } from \"@wagmi/core\";\nimport * as React18 from \"react\";\nfunction queryKey7({\n  allowFailure,\n  blockNumber,\n  chainId,\n  contracts,\n  overrides,\n  scopeKey\n}) {\n  return [\n    {\n      entity: \"readContracts\",\n      allowFailure,\n      blockNumber,\n      chainId,\n      scopeKey,\n      contracts: (contracts ?? []).map(\n        ({ address, args, chainId: chainId2, functionName }) => ({\n          address,\n          args,\n          chainId: chainId2,\n          functionName\n        })\n      ),\n      overrides\n    }\n  ];\n}\nfunction queryFn7({ abis }) {\n  return ({\n    queryKey: [{ allowFailure, contracts: contracts_, overrides }]\n  }) => {\n    const contracts = contracts_.map(\n      (contract, i) => ({\n        ...contract,\n        abi: abis[i]\n      })\n    );\n    return readContracts2({\n      allowFailure,\n      contracts,\n      overrides\n    });\n  };\n}\nfunction useContractReads({\n  allowFailure = true,\n  cacheOnBlock = false,\n  cacheTime,\n  contracts,\n  enabled: enabled_ = true,\n  isDataEqual,\n  keepPreviousData,\n  onError,\n  onSettled,\n  onSuccess,\n  overrides,\n  scopeKey,\n  select,\n  staleTime,\n  structuralSharing = (oldData, newData) => deepEqual4(oldData, newData) ? oldData : replaceEqualDeep3(oldData, newData),\n  suspense,\n  watch\n} = {}) {\n  const { data: blockNumber } = useBlockNumber({\n    enabled: watch || cacheOnBlock,\n    watch\n  });\n  const chainId = useChainId();\n  const queryKey_ = React18.useMemo(\n    () => queryKey7({\n      allowFailure,\n      blockNumber: cacheOnBlock ? blockNumber : void 0,\n      chainId,\n      contracts,\n      overrides,\n      scopeKey\n    }),\n    [\n      allowFailure,\n      blockNumber,\n      cacheOnBlock,\n      chainId,\n      scopeKey,\n      contracts,\n      overrides\n    ]\n  );\n  const enabled = React18.useMemo(() => {\n    let enabled2 = Boolean(\n      enabled_ && contracts?.every(\n        (x) => x.abi && x.address && x.functionName\n      )\n    );\n    if (cacheOnBlock)\n      enabled2 = Boolean(enabled2 && blockNumber);\n    return enabled2;\n  }, [blockNumber, cacheOnBlock, contracts, enabled_]);\n  useInvalidateOnBlock({\n    enabled: Boolean(enabled && watch && !cacheOnBlock),\n    queryKey: queryKey_\n  });\n  const abis = (contracts ?? []).map(\n    ({ abi }) => abi\n  );\n  return useQuery(queryKey_, queryFn7({ abis }), {\n    cacheTime,\n    enabled,\n    isDataEqual,\n    keepPreviousData,\n    staleTime,\n    select(data) {\n      const result = data.map((data2, i) => {\n        const { abi, functionName } = contracts?.[i] ?? {};\n        return abi && functionName ? parseContractResult2({ abi, functionName, data: data2 }) : data2;\n      });\n      return select ? select(result) : result;\n    },\n    structuralSharing,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/contracts/useContractWrite.ts\nimport { writeContract } from \"@wagmi/core\";\nimport * as React19 from \"react\";\nfunction mutationKey6({\n  address,\n  chainId,\n  abi,\n  functionName,\n  ...config\n}) {\n  const { request } = config;\n  const { args, overrides } = config;\n  return [\n    {\n      entity: \"writeContract\",\n      address,\n      args,\n      chainId,\n      abi,\n      functionName,\n      overrides,\n      request\n    }\n  ];\n}\nfunction mutationFn6(config) {\n  if (!config.address)\n    throw new Error(\"address is required\");\n  if (!config.abi)\n    throw new Error(\"abi is required\");\n  if (!config.functionName)\n    throw new Error(\"functionName is required\");\n  switch (config.mode) {\n    case \"prepared\": {\n      if (!config.request)\n        throw new Error(\"request is required\");\n      return writeContract({\n        mode: \"prepared\",\n        address: config.address,\n        chainId: config.chainId,\n        abi: config.abi,\n        functionName: config.functionName,\n        request: config.request\n      });\n    }\n    case \"recklesslyUnprepared\":\n      return writeContract({\n        address: config.address,\n        args: config.args,\n        chainId: config.chainId,\n        abi: config.abi,\n        functionName: config.functionName,\n        mode: \"recklesslyUnprepared\",\n        overrides: config.overrides\n      });\n  }\n}\nfunction useContractWrite(config = {}) {\n  const { address, abi, functionName, chainId, mode } = config;\n  const { request } = config;\n  const { args, overrides } = config;\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey6({\n      address,\n      abi,\n      functionName,\n      chainId,\n      mode,\n      args,\n      overrides,\n      request\n    }),\n    mutationFn6,\n    {\n      onError: config.onError,\n      onMutate: config.onMutate,\n      onSettled: config.onSettled,\n      onSuccess: config.onSuccess\n    }\n  );\n  const write = React19.useMemo(() => {\n    if (mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutate({\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode: \"prepared\",\n        request\n      });\n    }\n    return (overrideConfig) => mutate({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: \"recklesslyUnprepared\",\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n    });\n  }, [\n    address,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    mutate,\n    args,\n    overrides,\n    request\n  ]);\n  const writeAsync = React19.useMemo(() => {\n    if (mode === \"prepared\") {\n      if (!request)\n        return void 0;\n      return () => mutateAsync({\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode: \"prepared\",\n        request\n      });\n    }\n    return (overrideConfig) => mutateAsync({\n      address,\n      args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n      chainId,\n      abi,\n      functionName,\n      mode: \"recklesslyUnprepared\",\n      overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n    });\n  }, [\n    address,\n    chainId,\n    abi,\n    functionName,\n    mode,\n    mutateAsync,\n    args,\n    overrides,\n    request\n  ]);\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    status,\n    variables,\n    write,\n    writeAsync\n  };\n}\n\n// src/hooks/contracts/usePrepareContractWrite.ts\nimport { prepareWriteContract } from \"@wagmi/core\";\nfunction queryKey8({\n  activeChainId,\n  args,\n  address,\n  chainId,\n  functionName,\n  overrides,\n  signerAddress\n}) {\n  return [\n    {\n      entity: \"prepareContractTransaction\",\n      activeChainId,\n      address,\n      args,\n      chainId,\n      functionName,\n      overrides,\n      signerAddress\n    }\n  ];\n}\nfunction queryFn8({\n  abi,\n  signer\n}) {\n  return ({\n    queryKey: [{ args, address, chainId, functionName, overrides }]\n  }) => {\n    if (!abi)\n      throw new Error(\"abi is required\");\n    return prepareWriteContract({\n      abi,\n      args,\n      address,\n      chainId,\n      functionName,\n      overrides,\n      signer\n    });\n  };\n}\nfunction usePrepareContractWrite({\n  address,\n  abi,\n  functionName,\n  chainId,\n  args,\n  overrides,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: signer } = useSigner({ chainId });\n  const prepareContractWriteQuery = useQuery(\n    queryKey8({\n      activeChainId: activeChain?.id,\n      address,\n      args,\n      chainId,\n      functionName,\n      scopeKey,\n      signerAddress: signer?._address,\n      overrides\n    }),\n    queryFn8({\n      abi,\n      signer\n    }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && abi && address && functionName && signer),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareContractWriteQuery, {\n    config: {\n      abi,\n      address,\n      args,\n      chainId,\n      functionName,\n      mode: \"prepared\",\n      overrides,\n      request: void 0,\n      ...prepareContractWriteQuery.data\n    }\n  });\n}\n\n// src/hooks/contracts/useToken.ts\nimport { fetchToken } from \"@wagmi/core\";\nfunction queryKey9({\n  address,\n  chainId,\n  formatUnits,\n  scopeKey\n}) {\n  return [{ entity: \"token\", address, chainId, formatUnits, scopeKey }];\n}\nfunction queryFn9({\n  queryKey: [{ address, chainId, formatUnits }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchToken({ address, chainId, formatUnits });\n}\nfunction useToken({\n  address,\n  chainId: chainId_,\n  formatUnits = \"ether\",\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey9({ address, chainId, formatUnits, scopeKey }),\n    queryFn9,\n    {\n      cacheTime,\n      enabled: Boolean(enabled && address),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/ens/useEnsAddress.ts\nimport { fetchEnsAddress } from \"@wagmi/core\";\nfunction queryKey10({ chainId, name, scopeKey }) {\n  return [{ entity: \"ensAddress\", chainId, name, scopeKey }];\n}\nfunction queryFn10({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsAddress({ chainId, name });\n}\nfunction useEnsAddress({\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  name,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey10({ chainId, name, scopeKey }), queryFn10, {\n    cacheTime,\n    enabled: Boolean(enabled && chainId && name),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsAvatar.ts\nimport { fetchEnsAvatar } from \"@wagmi/core\";\nfunction queryKey11({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensAvatar\", address, chainId, scopeKey }];\n}\nfunction queryFn11({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchEnsAvatar({ address, chainId });\n}\nfunction useEnsAvatar({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey11({ address, chainId, scopeKey }), queryFn11, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsName.ts\nimport { fetchEnsName } from \"@wagmi/core\";\nfunction queryKey12({\n  address,\n  chainId,\n  scopeKey\n}) {\n  return [{ entity: \"ensName\", address, chainId, scopeKey }];\n}\nfunction queryFn12({\n  queryKey: [{ address, chainId }]\n}) {\n  if (!address)\n    throw new Error(\"address is required\");\n  return fetchEnsName({ address, chainId });\n}\nfunction useEnsName({\n  address,\n  cacheTime,\n  chainId: chainId_,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey12({ address, chainId, scopeKey }), queryFn12, {\n    cacheTime,\n    enabled: Boolean(enabled && address && chainId),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/ens/useEnsResolver.ts\nimport { fetchEnsResolver } from \"@wagmi/core\";\nfunction queryKey13({ chainId, name, scopeKey }) {\n  return [\n    { entity: \"ensResolver\", chainId, name, scopeKey, persist: false }\n  ];\n}\nfunction queryFn13({\n  queryKey: [{ chainId, name }]\n}) {\n  if (!name)\n    throw new Error(\"name is required\");\n  return fetchEnsResolver({ chainId, name });\n}\nfunction useEnsResolver({\n  chainId: chainId_,\n  name,\n  enabled = true,\n  scopeKey,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey13({ chainId, name, scopeKey }), queryFn13, {\n    cacheTime: 0,\n    enabled: Boolean(enabled && chainId && name),\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/usePrepareSendTransaction.ts\nimport { prepareSendTransaction } from \"@wagmi/core\";\nfunction queryKey14({\n  activeChainId,\n  chainId,\n  request,\n  scopeKey,\n  signerAddress\n}) {\n  return [\n    {\n      entity: \"prepareSendTransaction\",\n      activeChainId,\n      chainId,\n      request,\n      scopeKey,\n      signerAddress\n    }\n  ];\n}\nfunction queryFn14({ signer }) {\n  return ({\n    queryKey: [{ chainId, request }]\n  }) => {\n    if (!request?.to)\n      throw new Error(\"request.to is required\");\n    return prepareSendTransaction({\n      chainId,\n      request: { ...request, to: request.to },\n      signer\n    });\n  };\n}\nfunction usePrepareSendTransaction({\n  chainId,\n  request,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime = 1e3 * 60 * 60 * 24,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const { chain: activeChain } = useNetwork();\n  const { data: signer } = useSigner({ chainId });\n  const prepareSendTransactionQuery = useQuery(\n    queryKey14({\n      activeChainId: activeChain?.id,\n      chainId,\n      request,\n      scopeKey,\n      signerAddress: signer?._address\n    }),\n    queryFn14({ signer }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && signer && request && request.to),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n  return Object.assign(prepareSendTransactionQuery, {\n    config: {\n      request: void 0,\n      mode: \"prepared\",\n      ...prepareSendTransactionQuery.data\n    }\n  });\n}\n\n// src/hooks/transactions/useSendTransaction.ts\nimport { sendTransaction } from \"@wagmi/core\";\nimport * as React20 from \"react\";\nvar mutationKey7 = (args) => [{ entity: \"sendTransaction\", ...args }];\nvar mutationFn7 = ({ chainId, mode, request }) => {\n  return sendTransaction({\n    chainId,\n    mode,\n    request\n  });\n};\nfunction useSendTransaction({\n  chainId,\n  mode,\n  request,\n  onError,\n  onMutate,\n  onSettled,\n  onSuccess\n}) {\n  const {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    mutate,\n    mutateAsync,\n    reset,\n    status,\n    variables\n  } = useMutation(\n    mutationKey7({\n      chainId,\n      mode,\n      request\n    }),\n    mutationFn7,\n    {\n      onError,\n      onMutate,\n      onSettled,\n      onSuccess\n    }\n  );\n  const sendTransaction2 = React20.useCallback(\n    (args) => mutate({\n      chainId,\n      mode,\n      request: args?.recklesslySetUnpreparedRequest ?? request\n    }),\n    [chainId, mode, mutate, request]\n  );\n  const sendTransactionAsync = React20.useCallback(\n    (args) => mutateAsync({\n      chainId,\n      mode,\n      request: args?.recklesslySetUnpreparedRequest ?? request\n    }),\n    [chainId, mode, mutateAsync, request]\n  );\n  return {\n    data,\n    error,\n    isError,\n    isIdle,\n    isLoading,\n    isSuccess,\n    reset,\n    sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n    sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n    status,\n    variables\n  };\n}\n\n// src/hooks/transactions/useTransaction.ts\nimport { fetchTransaction } from \"@wagmi/core\";\nfunction queryKey15({ chainId, hash, scopeKey }) {\n  return [{ entity: \"transaction\", chainId, hash, scopeKey }];\n}\nfunction queryFn15({\n  queryKey: [{ chainId, hash }]\n}) {\n  if (!hash)\n    throw new Error(\"hash is required\");\n  return fetchTransaction({ chainId, hash });\n}\nfunction useTransaction({\n  cacheTime = 0,\n  chainId: chainId_,\n  enabled = true,\n  hash,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(queryKey15({ chainId, hash, scopeKey }), queryFn15, {\n    cacheTime,\n    enabled: Boolean(enabled && hash),\n    staleTime,\n    suspense,\n    onError,\n    onSettled,\n    onSuccess\n  });\n}\n\n// src/hooks/transactions/useWaitForTransaction.ts\nimport { waitForTransaction } from \"@wagmi/core\";\nfunction queryKey16({\n  confirmations,\n  chainId,\n  hash,\n  scopeKey,\n  timeout\n}) {\n  return [\n    {\n      entity: \"waitForTransaction\",\n      confirmations,\n      chainId,\n      hash,\n      scopeKey,\n      timeout\n    }\n  ];\n}\nfunction queryFn16({\n  onSpeedUp\n}) {\n  return ({\n    queryKey: [{ chainId, confirmations, hash, timeout }]\n  }) => {\n    if (!hash)\n      throw new Error(\"hash is required\");\n    return waitForTransaction({\n      chainId,\n      confirmations,\n      hash,\n      onSpeedUp,\n      timeout\n    });\n  };\n}\nfunction useWaitForTransaction({\n  chainId: chainId_,\n  confirmations,\n  hash,\n  timeout,\n  cacheTime,\n  enabled = true,\n  scopeKey,\n  staleTime,\n  suspense,\n  onError,\n  onSpeedUp,\n  onSettled,\n  onSuccess\n} = {}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  return useQuery(\n    queryKey16({ chainId, confirmations, hash, scopeKey, timeout }),\n    queryFn16({ onSpeedUp }),\n    {\n      cacheTime,\n      enabled: Boolean(enabled && hash),\n      staleTime,\n      suspense,\n      onError,\n      onSettled,\n      onSuccess\n    }\n  );\n}\n\n// src/hooks/transactions/useWatchPendingTransactions.ts\nimport * as React21 from \"react\";\nfunction useWatchPendingTransactions({\n  chainId: chainId_,\n  enabled = true,\n  listener\n}) {\n  const chainId = useChainId({ chainId: chainId_ });\n  const provider = useProvider({ chainId });\n  const webSocketProvider = useWebSocketProvider({ chainId });\n  React21.useEffect(() => {\n    if (!enabled)\n      return;\n    const provider_ = webSocketProvider ?? provider;\n    provider_.on(\"pending\", listener);\n    return () => {\n      provider_.off(\"pending\", listener);\n    };\n  }, [enabled, listener, provider, webSocketProvider]);\n}\n\n// src/index.ts\nimport {\n  AddChainError,\n  ChainDoesNotSupportMulticallError,\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  ContractMethodDoesNotExistError,\n  ContractMethodNoResultError,\n  ContractMethodRevertedError,\n  ContractResultDecodeError,\n  ProviderChainsNotFound,\n  ProviderRpcError,\n  ResourceUnavailableError,\n  RpcError,\n  SwitchChainError,\n  SwitchChainNotSupportedError,\n  UserRejectedRequestError,\n  configureChains,\n  createStorage as createStorage2,\n  deepEqual as deepEqual5,\n  deserialize,\n  erc20ABI,\n  erc721ABI,\n  erc4626ABI,\n  goerli,\n  mainnet,\n  readContracts as readContracts3,\n  serialize\n} from \"@wagmi/core\";\nexport {\n  AddChainError,\n  ChainDoesNotSupportMulticallError,\n  ChainMismatchError,\n  ChainNotConfiguredError,\n  Connector,\n  ConnectorAlreadyConnectedError,\n  ConnectorNotFoundError,\n  Context,\n  ContractMethodDoesNotExistError,\n  ContractMethodNoResultError,\n  ContractMethodRevertedError,\n  ContractResultDecodeError,\n  ProviderChainsNotFound,\n  ProviderRpcError,\n  ResourceUnavailableError,\n  RpcError,\n  SwitchChainError,\n  SwitchChainNotSupportedError,\n  UserRejectedRequestError,\n  WagmiConfig,\n  configureChains,\n  createClient,\n  createStorage2 as createStorage,\n  deepEqual5 as deepEqual,\n  deserialize,\n  erc20ABI,\n  erc4626ABI,\n  erc721ABI,\n  goerli,\n  mainnet,\n  paginatedIndexesConfig,\n  readContracts3 as readContracts,\n  serialize,\n  useAccount,\n  useBalance,\n  useBlockNumber,\n  useChainId,\n  useClient,\n  useConnect,\n  useContract,\n  useContractEvent,\n  useContractInfiniteReads,\n  useContractRead,\n  useContractReads,\n  useContractWrite,\n  useDisconnect,\n  useEnsAddress,\n  useEnsAvatar,\n  useEnsName,\n  useEnsResolver,\n  useFeeData,\n  useInfiniteQuery,\n  useMutation,\n  useNetwork,\n  usePrepareContractWrite,\n  usePrepareSendTransaction,\n  useProvider,\n  useQuery,\n  useQueryClient2 as useQueryClient,\n  useSendTransaction,\n  useSignMessage,\n  useSignTypedData,\n  useSigner,\n  useSwitchNetwork,\n  useToken,\n  useTransaction,\n  useWaitForTransaction,\n  useWatchPendingTransactions,\n  useWebSocketProvider\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}