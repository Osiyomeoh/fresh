{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nexports.DIGEST_LENGTH = 32;\nexports.BLOCK_SIZE = 64;\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\n\nvar SHA256 =\n/** @class */\nfunction () {\n  function SHA256() {\n    /** Length of hash output */\n    this.digestLength = exports.DIGEST_LENGTH;\n    /** Block size */\n\n    this.blockSize = exports.BLOCK_SIZE; // Note: Int32Array is used instead of Uint32Array for performance reasons.\n\n    this._state = new Int32Array(8); // hash state\n\n    this._temp = new Int32Array(64); // temporary state\n\n    this._buffer = new Uint8Array(128); // buffer for data to hash\n\n    this._bufferLength = 0; // number of bytes in buffer\n\n    this._bytesHashed = 0; // number of total bytes hashed\n\n    this._finished = false; // indicates whether the hash was finalized\n\n    this.reset();\n  }\n\n  SHA256.prototype._initState = function () {\n    this._state[0] = 0x6a09e667;\n    this._state[1] = 0xbb67ae85;\n    this._state[2] = 0x3c6ef372;\n    this._state[3] = 0xa54ff53a;\n    this._state[4] = 0x510e527f;\n    this._state[5] = 0x9b05688c;\n    this._state[6] = 0x1f83d9ab;\n    this._state[7] = 0x5be0cd19;\n  };\n  /**\n   * Resets hash state making it possible\n   * to re-use this instance to hash other data.\n   */\n\n\n  SHA256.prototype.reset = function () {\n    this._initState();\n\n    this._bufferLength = 0;\n    this._bytesHashed = 0;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans internal buffers and resets hash state.\n   */\n\n\n  SHA256.prototype.clean = function () {\n    wipe_1.wipe(this._buffer);\n    wipe_1.wipe(this._temp);\n    this.reset();\n  };\n  /**\n   * Updates hash state with the given data.\n   *\n   * Throws error when trying to update already finalized hash:\n   * instance must be reset to update it again.\n   */\n\n\n  SHA256.prototype.update = function (data, dataLength) {\n    if (dataLength === void 0) {\n      dataLength = data.length;\n    }\n\n    if (this._finished) {\n      throw new Error(\"SHA256: can't update because hash was finished.\");\n    }\n\n    var dataPos = 0;\n    this._bytesHashed += dataLength;\n\n    if (this._bufferLength > 0) {\n      while (this._bufferLength < this.blockSize && dataLength > 0) {\n        this._buffer[this._bufferLength++] = data[dataPos++];\n        dataLength--;\n      }\n\n      if (this._bufferLength === this.blockSize) {\n        hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n        this._bufferLength = 0;\n      }\n    }\n\n    if (dataLength >= this.blockSize) {\n      dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n      dataLength %= this.blockSize;\n    }\n\n    while (dataLength > 0) {\n      this._buffer[this._bufferLength++] = data[dataPos++];\n      dataLength--;\n    }\n\n    return this;\n  };\n  /**\n   * Finalizes hash state and puts hash into out.\n   * If hash was already finalized, puts the same value.\n   */\n\n\n  SHA256.prototype.finish = function (out) {\n    if (!this._finished) {\n      var bytesHashed = this._bytesHashed;\n      var left = this._bufferLength;\n      var bitLenHi = bytesHashed / 0x20000000 | 0;\n      var bitLenLo = bytesHashed << 3;\n      var padLength = bytesHashed % 64 < 56 ? 64 : 128;\n      this._buffer[left] = 0x80;\n\n      for (var i = left + 1; i < padLength - 8; i++) {\n        this._buffer[i] = 0;\n      }\n\n      binary_1.writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n      binary_1.writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n      hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n      this._finished = true;\n    }\n\n    for (var i = 0; i < this.digestLength / 4; i++) {\n      binary_1.writeUint32BE(this._state[i], out, i * 4);\n    }\n\n    return this;\n  };\n  /**\n   * Returns the final hash digest.\n   */\n\n\n  SHA256.prototype.digest = function () {\n    var out = new Uint8Array(this.digestLength);\n    this.finish(out);\n    return out;\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Returns hash state to be used with restoreState().\n   * Only chain value is saved, not buffers or other\n   * state variables.\n   */\n\n\n  SHA256.prototype.saveState = function () {\n    if (this._finished) {\n      throw new Error(\"SHA256: cannot save finished state\");\n    }\n\n    return {\n      state: new Int32Array(this._state),\n      buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n      bufferLength: this._bufferLength,\n      bytesHashed: this._bytesHashed\n    };\n  };\n  /**\n   * Function useful for HMAC/PBKDF2 optimization.\n   * Restores state saved by saveState() and sets bytesHashed\n   * to the given value.\n   */\n\n\n  SHA256.prototype.restoreState = function (savedState) {\n    this._state.set(savedState.state);\n\n    this._bufferLength = savedState.bufferLength;\n\n    if (savedState.buffer) {\n      this._buffer.set(savedState.buffer);\n    }\n\n    this._bytesHashed = savedState.bytesHashed;\n    this._finished = false;\n    return this;\n  };\n  /**\n   * Cleans state returned by saveState().\n   */\n\n\n  SHA256.prototype.cleanSavedState = function (savedState) {\n    wipe_1.wipe(savedState.state);\n\n    if (savedState.buffer) {\n      wipe_1.wipe(savedState.buffer);\n    }\n\n    savedState.bufferLength = 0;\n    savedState.bytesHashed = 0;\n  };\n\n  return SHA256;\n}();\n\nexports.SHA256 = SHA256; // Constants\n\nvar K = new Int32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n\nfunction hashBlocks(w, v, p, pos, len) {\n  while (len >= 64) {\n    var a = v[0];\n    var b = v[1];\n    var c = v[2];\n    var d = v[3];\n    var e = v[4];\n    var f = v[5];\n    var g = v[6];\n    var h = v[7];\n\n    for (var i = 0; i < 16; i++) {\n      var j = pos + i * 4;\n      w[i] = binary_1.readUint32BE(p, j);\n    }\n\n    for (var i = 16; i < 64; i++) {\n      var u = w[i - 2];\n      var t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n      u = w[i - 15];\n      var t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n      w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n    }\n\n    for (var i = 0; i < 64; i++) {\n      var t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n      var t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n      h = g;\n      g = f;\n      f = e;\n      e = d + t1 | 0;\n      d = c;\n      c = b;\n      b = a;\n      a = t1 + t2 | 0;\n    }\n\n    v[0] += a;\n    v[1] += b;\n    v[2] += c;\n    v[3] += d;\n    v[4] += e;\n    v[5] += f;\n    v[6] += g;\n    v[7] += h;\n    pos += 64;\n    len -= 64;\n  }\n\n  return pos;\n}\n\nfunction hash(data) {\n  var h = new SHA256();\n  h.update(data);\n  var digest = h.digest();\n  h.clean();\n  return digest;\n}\n\nexports.hash = hash;","map":{"version":3,"mappings":"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","names":["exports","Int32Array","Uint8Array","reset","SHA256","_state","_initState","_bufferLength","_bytesHashed","_finished","wipe_1","_buffer","_temp","data","dataLength","length","Error","dataPos","blockSize","hashBlocks","out","bytesHashed","left","bitLenHi","bitLenLo","padLength","i","binary_1","digestLength","finish","state","buffer","undefined","bufferLength","savedState","set","K","w","v","p","pos","len","a","b","c","d","e","f","g","h","j","u","t1","t2","hash","update","digest","clean"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@stablelib\\sha256\\sha256.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package sha256 implements SHA-2-256 cryptographic hash function.\n */\n\nimport { SerializableHash } from \"@stablelib/hash\";\nimport { readUint32BE, writeUint32BE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\nexport const DIGEST_LENGTH = 32;\nexport const BLOCK_SIZE = 64;\n\n/**\n * SHA2-256 cryptographic hash algorithm.\n */\nexport class SHA256 implements SerializableHash {\n    /** Length of hash output */\n    readonly digestLength: number = DIGEST_LENGTH;\n\n    /** Block size */\n    readonly blockSize: number = BLOCK_SIZE;\n\n    // Note: Int32Array is used instead of Uint32Array for performance reasons.\n    protected _state = new Int32Array(8); // hash state\n    private _temp = new Int32Array(64); // temporary state\n    private _buffer = new Uint8Array(128); // buffer for data to hash\n    private _bufferLength = 0; // number of bytes in buffer\n    private _bytesHashed = 0; // number of total bytes hashed\n    private _finished = false; // indicates whether the hash was finalized\n\n    constructor() {\n        this.reset();\n    }\n\n    protected _initState() {\n        this._state[0] = 0x6a09e667;\n        this._state[1] = 0xbb67ae85;\n        this._state[2] = 0x3c6ef372;\n        this._state[3] = 0xa54ff53a;\n        this._state[4] = 0x510e527f;\n        this._state[5] = 0x9b05688c;\n        this._state[6] = 0x1f83d9ab;\n        this._state[7] = 0x5be0cd19;\n    }\n\n    /**\n     * Resets hash state making it possible\n     * to re-use this instance to hash other data.\n     */\n    reset(): this {\n        this._initState();\n        this._bufferLength = 0;\n        this._bytesHashed = 0;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans internal buffers and resets hash state.\n     */\n    clean() {\n        wipe(this._buffer);\n        wipe(this._temp);\n        this.reset();\n    }\n\n    /**\n     * Updates hash state with the given data.\n     *\n     * Throws error when trying to update already finalized hash:\n     * instance must be reset to update it again.\n     */\n    update(data: Uint8Array, dataLength: number = data.length): this {\n        if (this._finished) {\n            throw new Error(\"SHA256: can't update because hash was finished.\");\n        }\n        let dataPos = 0;\n        this._bytesHashed += dataLength;\n        if (this._bufferLength > 0) {\n            while (this._bufferLength < this.blockSize && dataLength > 0) {\n                this._buffer[this._bufferLength++] = data[dataPos++];\n                dataLength--;\n            }\n            if (this._bufferLength === this.blockSize) {\n                hashBlocks(this._temp, this._state, this._buffer, 0, this.blockSize);\n                this._bufferLength = 0;\n            }\n        }\n        if (dataLength >= this.blockSize) {\n            dataPos = hashBlocks(this._temp, this._state, data, dataPos, dataLength);\n            dataLength %= this.blockSize;\n        }\n        while (dataLength > 0) {\n            this._buffer[this._bufferLength++] = data[dataPos++];\n            dataLength--;\n        }\n        return this;\n    }\n\n    /**\n     * Finalizes hash state and puts hash into out.\n     * If hash was already finalized, puts the same value.\n     */\n    finish(out: Uint8Array): this {\n        if (!this._finished) {\n            const bytesHashed = this._bytesHashed;\n            const left = this._bufferLength;\n            const bitLenHi = (bytesHashed / 0x20000000) | 0;\n            const bitLenLo = bytesHashed << 3;\n            const padLength = (bytesHashed % 64 < 56) ? 64 : 128;\n\n            this._buffer[left] = 0x80;\n            for (let i = left + 1; i < padLength - 8; i++) {\n                this._buffer[i] = 0;\n            }\n            writeUint32BE(bitLenHi, this._buffer, padLength - 8);\n            writeUint32BE(bitLenLo, this._buffer, padLength - 4);\n\n            hashBlocks(this._temp, this._state, this._buffer, 0, padLength);\n\n            this._finished = true;\n        }\n\n        for (let i = 0; i < this.digestLength / 4; i++) {\n            writeUint32BE(this._state[i], out, i * 4);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the final hash digest.\n     */\n    digest(): Uint8Array {\n        const out = new Uint8Array(this.digestLength);\n        this.finish(out);\n        return out;\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Returns hash state to be used with restoreState().\n     * Only chain value is saved, not buffers or other\n     * state variables.\n     */\n    saveState(): SavedState {\n        if (this._finished) {\n            throw new Error(\"SHA256: cannot save finished state\");\n        }\n        return {\n            state: new Int32Array(this._state),\n            buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : undefined,\n            bufferLength: this._bufferLength,\n            bytesHashed: this._bytesHashed\n        };\n    }\n\n    /**\n     * Function useful for HMAC/PBKDF2 optimization.\n     * Restores state saved by saveState() and sets bytesHashed\n     * to the given value.\n     */\n    restoreState(savedState: SavedState): this {\n        this._state.set(savedState.state);\n        this._bufferLength = savedState.bufferLength;\n        if (savedState.buffer) {\n            this._buffer.set(savedState.buffer);\n        }\n        this._bytesHashed = savedState.bytesHashed;\n        this._finished = false;\n        return this;\n    }\n\n    /**\n     * Cleans state returned by saveState().\n     */\n    cleanSavedState(savedState: SavedState) {\n        wipe(savedState.state);\n        if (savedState.buffer) {\n            wipe(savedState.buffer);\n        }\n        savedState.bufferLength = 0;\n        savedState.bytesHashed = 0;\n    }\n}\n\nexport type SavedState = {\n    state: Int32Array;\n    buffer: Uint8Array | undefined;\n    bufferLength: number;\n    bytesHashed: number;\n};\n\n// Constants\nconst K = new Int32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,\n    0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,\n    0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,\n    0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n    0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,\n    0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,\n    0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,\n    0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,\n    0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,\n    0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,\n    0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\nfunction hashBlocks(w: Int32Array, v: Int32Array, p: Uint8Array, pos: number, len: number): number {\n    while (len >= 64) {\n        let a = v[0];\n        let b = v[1];\n        let c = v[2];\n        let d = v[3];\n        let e = v[4];\n        let f = v[5];\n        let g = v[6];\n        let h = v[7];\n\n        for (let i = 0; i < 16; i++) {\n            let j = pos + i * 4;\n            w[i] = readUint32BE(p, j);\n        }\n\n        for (let i = 16; i < 64; i++) {\n            let u = w[i - 2];\n            let t1 = (u >>> 17 | u << (32 - 17)) ^ (u >>> 19 | u << (32 - 19)) ^ (u >>> 10);\n\n            u = w[i - 15];\n            let t2 = (u >>> 7 | u << (32 - 7)) ^ (u >>> 18 | u << (32 - 18)) ^ (u >>> 3);\n\n            w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            let t1 = (((((e >>> 6 | e << (32 - 6)) ^ (e >>> 11 | e << (32 - 11)) ^\n                (e >>> 25 | e << (32 - 25))) + ((e & f) ^ (~e & g))) | 0) +\n                ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;\n\n            let t2 = (((a >>> 2 | a << (32 - 2)) ^ (a >>> 13 | a << (32 - 13)) ^\n                (a >>> 22 | a << (32 - 22))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;\n\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n\n        v[0] += a;\n        v[1] += b;\n        v[2] += c;\n        v[3] += d;\n        v[4] += e;\n        v[5] += f;\n        v[6] += g;\n        v[7] += h;\n\n        pos += 64;\n        len -= 64;\n    }\n    return pos;\n}\n\nexport function hash(data: Uint8Array): Uint8Array {\n    const h = new SHA256();\n    h.update(data);\n    const digest = h.digest();\n    h.clean();\n    return digest;\n}\n"]},"metadata":{},"sourceType":"script"}