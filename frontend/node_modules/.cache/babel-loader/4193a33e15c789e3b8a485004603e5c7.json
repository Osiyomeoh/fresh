{"ast":null,"code":"import { hydrate, dehydrate } from '@tanstack/query-core';\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\n\nasync function persistQueryClientRestore(_ref) {\n  let {\n    queryClient,\n    persister,\n    maxAge = 1000 * 60 * 60 * 24,\n    buster = '',\n    hydrateOptions\n  } = _ref;\n\n  try {\n    const persistedClient = await persister.restoreClient();\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge;\n        const busted = persistedClient.buster !== buster;\n\n        if (expired || busted) {\n          persister.removeClient();\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions);\n        }\n      } else {\n        persister.removeClient();\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err);\n      queryClient.getLogger().warn('Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.');\n    }\n\n    persister.removeClient();\n  }\n}\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\n\n\nasync function persistQueryClientSave(_ref2) {\n  let {\n    queryClient,\n    persister,\n    buster = '',\n    dehydrateOptions\n  } = _ref2;\n  const persistClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions)\n  };\n  await persister.persistClient(persistClient);\n}\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\n\n\nfunction persistQueryClientSubscribe(props) {\n  const unsubscribeQueryCache = props.queryClient.getQueryCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  const unusbscribeMutationCache = props.queryClient.getMutationCache().subscribe(() => {\n    persistQueryClientSave(props);\n  });\n  return () => {\n    unsubscribeQueryCache();\n    unusbscribeMutationCache();\n  };\n}\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\n\n\nfunction persistQueryClient(props) {\n  let hasUnsubscribed = false;\n  let persistQueryClientUnsubscribe;\n\n  const unsubscribe = () => {\n    hasUnsubscribed = true;\n    persistQueryClientUnsubscribe == null ? void 0 : persistQueryClientUnsubscribe();\n  }; // Attempt restore\n\n\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props);\n    }\n  });\n  return [unsubscribe, restorePromise];\n}\n\nexport { persistQueryClient, persistQueryClientRestore, persistQueryClientSave, persistQueryClientSubscribe };","map":{"version":3,"mappings":";AAsDA;AACA;AACA;AACA;AACA;AACA;;AACO,eAAeA,yBAAf,OAMgC;EAAA,IANS;IAC9CC,WAD8C;IAE9CC,SAF8C;IAG9CC,MAAM,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAHoB;IAI9CC,MAAM,GAAG,EAJqC;IAK9CC;EAL8C,CAMT;;EACrC,IAAI;IACF,MAAMC,eAAe,GAAG,MAAMJ,SAAS,CAACK,aAAVL,EAA9B;;IAEA,IAAII,eAAJ,EAAqB;MACnB,IAAIA,eAAe,CAACE,SAApB,EAA+B;QAC7B,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAALD,KAAaJ,eAAe,CAACE,SAA7BE,GAAyCP,MAAzD;QACA,MAAMS,MAAM,GAAGN,eAAe,CAACF,MAAhBE,KAA2BF,MAA1C;;QACA,IAAIK,OAAO,IAAIG,MAAf,EAAuB;UACrBV,SAAS,CAACW,YAAVX;QADF,OAEO;UACLY,OAAO,CAACb,WAAD,EAAcK,eAAe,CAACS,WAA9B,EAA2CV,cAA3C,CAAPS;QACD;MAPH,OAQO;QACLZ,SAAS,CAACW,YAAVX;MACD;IACF;EAfH,EAgBE,OAAOc,GAAP,EAAY;IACZ,IAAIC,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;MACzChB,WAAW,CAACmB,SAAZnB,GAAwBoB,KAAxBpB,CAA8Be,GAA9Bf;MACAA,WAAW,CACRmB,SADHnB,GAEGqB,IAFHrB,CAGI,0IAHJA;IAKD;;IACDC,SAAS,CAACW,YAAVX;EACD;AACF;AAED;AACA;AACA;AACA;AACA;;;AACO,eAAeqB,sBAAf,QAK6B;EAAA,IALS;IAC3CtB,WAD2C;IAE3CC,SAF2C;IAG3CE,MAAM,GAAG,EAHkC;IAI3CoB;EAJ2C,CAKT;EAClC,MAAMC,aAA8B,GAAG;IACrCrB,MADqC;IAErCI,SAAS,EAAEE,IAAI,CAACC,GAALD,EAF0B;IAGrCK,WAAW,EAAEW,SAAS,CAACzB,WAAD,EAAcuB,gBAAd;EAHe,CAAvC;EAMA,MAAMtB,SAAS,CAACuB,aAAVvB,CAAwBuB,aAAxBvB,CAAN;AACD;AAED;AACA;AACA;AACA;;;AACO,SAASyB,2BAAT,CACLC,KADK,EAEL;EACA,MAAMC,qBAAqB,GAAGD,KAAK,CAAC3B,WAAN2B,CAC3BE,aAD2BF,GAE3BG,SAF2BH,CAEjB,MAAM;IACfL,sBAAsB,CAACK,KAAD,CAAtBL;EAH0B,EAA9B;EAMA,MAAMS,wBAAwB,GAAGJ,KAAK,CAAC3B,WAAN2B,CAC9BK,gBAD8BL,GAE9BG,SAF8BH,CAEpB,MAAM;IACfL,sBAAsB,CAACK,KAAD,CAAtBL;EAH6B,EAAjC;EAMA,OAAO,MAAM;IACXM,qBAAqB;IACrBG,wBAAwB;EAF1B;AAID;AAED;AACA;AACA;;;AACO,SAASE,kBAAT,CACLN,KADK,EAEwB;EAC7B,IAAIO,eAAe,GAAG,KAAtB;EACA,IAAIC,6BAAJ;;EACA,MAAMC,WAAW,GAAG,MAAM;IACxBF,eAAe,GAAG,IAAlBA;IACAC,6BAA6B,QAA7BA,yCAA6B,EAA7BA;EAFF,EAH6B;;;EAS7B,MAAME,cAAc,GAAGtC,yBAAyB,CAAC4B,KAAD,CAAzB5B,CAAiCuC,IAAjCvC,CAAsC,MAAM;IACjE,IAAI,CAACmC,eAAL,EAAsB;MACpB;MACAC,6BAA6B,GAAGT,2BAA2B,CAACC,KAAD,CAA3DQ;IACD;EAJoB,EAAvB;EAOA,OAAO,CAACC,WAAD,EAAcC,cAAd,CAAP;AACD","names":["persistQueryClientRestore","queryClient","persister","maxAge","buster","hydrateOptions","persistedClient","restoreClient","timestamp","expired","Date","now","busted","removeClient","hydrate","clientState","err","process","env","NODE_ENV","getLogger","error","warn","persistQueryClientSave","dehydrateOptions","persistClient","dehydrate","persistQueryClientSubscribe","props","unsubscribeQueryCache","getQueryCache","subscribe","unusbscribeMutationCache","getMutationCache","persistQueryClient","hasUnsubscribed","persistQueryClientUnsubscribe","unsubscribe","restorePromise","then"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@tanstack\\query-persist-client-core\\src\\persist.ts"],"sourcesContent":["import type {\n  QueryClient,\n  DehydratedState,\n  DehydrateOptions,\n  HydrateOptions,\n} from '@tanstack/query-core'\nimport { dehydrate, hydrate } from '@tanstack/query-core'\n\nexport type Promisable<T> = T | PromiseLike<T>\n\nexport interface Persister {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClienRootOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persister interface for storing and restoring the cache\n   * to/from a persisted location */\n  persister: Persister\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport interface PersistedQueryClientRestoreOptions\n  extends PersistQueryClienRootOptions {\n  /** The max-allowed age of the cache in milliseconds.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** The options passed to the hydrate function */\n  hydrateOptions?: HydrateOptions\n}\n\nexport interface PersistedQueryClientSaveOptions\n  extends PersistQueryClienRootOptions {\n  /** The options passed to the dehydrate function */\n  dehydrateOptions?: DehydrateOptions\n}\n\nexport interface PersistQueryClientOptions\n  extends PersistedQueryClientRestoreOptions,\n    PersistedQueryClientSaveOptions,\n    PersistQueryClienRootOptions {}\n\n/**\n * Restores persisted data to the QueryCache\n *  - data obtained from persister.restoreClient\n *  - data is hydrated using hydrateOptions\n * If data is expired, busted, empty, or throws, it runs persister.removeClient\n */\nexport async function persistQueryClientRestore({\n  queryClient,\n  persister,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n  hydrateOptions,\n}: PersistedQueryClientRestoreOptions) {\n  try {\n    const persistedClient = await persister.restoreClient()\n\n    if (persistedClient) {\n      if (persistedClient.timestamp) {\n        const expired = Date.now() - persistedClient.timestamp > maxAge\n        const busted = persistedClient.buster !== buster\n        if (expired || busted) {\n          persister.removeClient()\n        } else {\n          hydrate(queryClient, persistedClient.clientState, hydrateOptions)\n        }\n      } else {\n        persister.removeClient()\n      }\n    }\n  } catch (err) {\n    if (process.env.NODE_ENV !== 'production') {\n      queryClient.getLogger().error(err)\n      queryClient\n        .getLogger()\n        .warn(\n          'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.',\n        )\n    }\n    persister.removeClient()\n  }\n}\n\n/**\n * Persists data from the QueryCache\n *  - data dehydrated using dehydrateOptions\n *  - data is persisted using persister.persistClient\n */\nexport async function persistQueryClientSave({\n  queryClient,\n  persister,\n  buster = '',\n  dehydrateOptions,\n}: PersistedQueryClientSaveOptions) {\n  const persistClient: PersistedClient = {\n    buster,\n    timestamp: Date.now(),\n    clientState: dehydrate(queryClient, dehydrateOptions),\n  }\n\n  await persister.persistClient(persistClient)\n}\n\n/**\n * Subscribe to QueryCache and MutationCache updates (for persisting)\n * @returns an unsubscribe function (to discontinue monitoring)\n */\nexport function persistQueryClientSubscribe(\n  props: PersistedQueryClientSaveOptions,\n) {\n  const unsubscribeQueryCache = props.queryClient\n    .getQueryCache()\n    .subscribe(() => {\n      persistQueryClientSave(props)\n    })\n\n  const unusbscribeMutationCache = props.queryClient\n    .getMutationCache()\n    .subscribe(() => {\n      persistQueryClientSave(props)\n    })\n\n  return () => {\n    unsubscribeQueryCache()\n    unusbscribeMutationCache()\n  }\n}\n\n/**\n * Restores persisted data to QueryCache and persists further changes.\n */\nexport function persistQueryClient(\n  props: PersistQueryClientOptions,\n): [() => void, Promise<void>] {\n  let hasUnsubscribed = false\n  let persistQueryClientUnsubscribe: (() => void) | undefined\n  const unsubscribe = () => {\n    hasUnsubscribed = true\n    persistQueryClientUnsubscribe?.()\n  }\n\n  // Attempt restore\n  const restorePromise = persistQueryClientRestore(props).then(() => {\n    if (!hasUnsubscribed) {\n      // Subscribe to changes in the query cache to trigger the save\n      persistQueryClientUnsubscribe = persistQueryClientSubscribe(props)\n    }\n  })\n\n  return [unsubscribe, restorePromise]\n}\n"]},"metadata":{},"sourceType":"module"}