{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c;\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\n\n\nimport { ReactiveElement } from '@lit/reactive-element';\nimport { render, noChange } from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html'; // For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\n\nexport const UpdatingElement = ReactiveElement;\nconst DEV_MODE = true;\nlet issueWarning;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings = (_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : globalThis.litIssuedWarnings = new Set(); // Issue a warning, if we haven't already.\n\n  issueWarning = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\n\n\nexport class LitElement extends ReactiveElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * @category rendering\n     */\n\n    this.renderOptions = {\n      host: this\n    };\n    this.__childPart = undefined;\n  }\n  /**\n   * @category rendering\n   */\n\n\n  createRenderRoot() {\n    var _a;\n\n    var _b;\n\n    const renderRoot = super.createRenderRoot(); // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n\n    (_a = (_b = this.renderOptions).renderBefore) !== null && _a !== void 0 ? _a : _b.renderBefore = renderRoot.firstChild;\n    return renderRoot;\n  }\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n\n\n  update(changedProperties) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n\n\n  connectedCallback() {\n    var _a;\n\n    super.connectedCallback();\n    (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(true);\n  }\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n\n\n  disconnectedCallback() {\n    var _a;\n\n    super.disconnectedCallback();\n    (_a = this.__childPart) === null || _a === void 0 ? void 0 : _a.setConnected(false);\n  }\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n\n\n  render() {\n    return noChange;\n  }\n\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See @lit/reactive-element for more information.\n */\n\nLitElement['finalized'] = true; // This property needs to remain unminified.\n\nLitElement['_$litElement$'] = true; // Install hydration if available\n\n(_b = globalThis.litElementHydrateSupport) === null || _b === void 0 ? void 0 : _b.call(globalThis, {\n  LitElement\n}); // Apply polyfills if available\n\nconst polyfillSupport = DEV_MODE ? globalThis.litElementPolyfillSupportDevMode : globalThis.litElementPolyfillSupport;\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({\n  LitElement\n}); // DEV mode warnings\n\nif (DEV_MODE) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  LitElement['finalize'] = function () {\n    const finalized = ReactiveElement.finalize.call(this);\n\n    if (!finalized) {\n      return false;\n    }\n\n    const warnRemovedOrRenamed = function (obj, name) {\n      let renamed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n      if (obj.hasOwnProperty(name)) {\n        const ctorName = (typeof obj === 'function' ? obj : obj.constructor).name;\n        issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${ctorName}. It ` + `has been ${renamed ? 'renamed' : 'removed'} ` + `in this version of LitElement.`);\n      }\n    };\n\n    warnRemovedOrRenamed(this, 'render');\n    warnRemovedOrRenamed(this, 'getStyles', true);\n    warnRemovedOrRenamed(this.prototype, 'adoptStyles');\n    return true;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n\n}\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\n\n\nexport const _$LE = {\n  _$attributeToProperty: (el, name, value) => {\n    // eslint-disable-next-line\n    el._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: el => el._$changedProperties\n}; // IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n\n((_c = globalThis.litElementVersions) !== null && _c !== void 0 ? _c : globalThis.litElementVersions = []).push('3.2.2');\n\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n}","map":{"version":3,"mappings":"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","names":["ReactiveElement","render","noChange","UpdatingElement","DEV_MODE","issueWarning","issuedWarnings","globalThis","litIssuedWarnings","_a","Set","code","warning","has","console","warn","add","LitElement","constructor","host","undefined","createRenderRoot","renderRoot","renderOptions","renderBefore","_b","firstChild","update","changedProperties","value","hasUpdated","isConnected","__childPart","connectedCallback","setConnected","disconnectedCallback","litElementHydrateSupport","polyfillSupport","litElementPolyfillSupportDevMode","litElementPolyfillSupport","finalized","finalize","call","warnRemovedOrRenamed","obj","name","renamed","hasOwnProperty","ctorName","prototype","_$LE","_$attributeToProperty","el","_$changedProperties","litElementVersions","_c","push","length"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\lit-element\\src\\lit-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * The main LitElement module, which defines the {@linkcode LitElement} base\n * class and related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import {@linkcode LitElement} and {@linkcode html} from this module to\n * create a component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends {@linkcode ReactiveElement} and adds lit-html\n * templating. The `ReactiveElement` class is provided for users that want to\n * build their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport {PropertyValues, ReactiveElement} from '@lit/reactive-element';\nimport {render, RenderOptions, noChange, RootPart} from 'lit-html';\nexport * from '@lit/reactive-element';\nexport * from 'lit-html';\n\nimport {LitUnstable} from 'lit-html';\nimport {ReactiveUnstable} from '@lit/reactive-element';\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace Unstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | LitUnstable.DebugLog.Entry\n      | ReactiveUnstable.DebugLog.Entry;\n  }\n}\n\n// For backwards compatibility export ReactiveElement as UpdatingElement. Note,\n// IE transpilation requires exporting like this.\nexport const UpdatingElement = ReactiveElement;\n\nconst DEV_MODE = true;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> =\n    (globalThis.litIssuedWarnings ??= new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n}\n\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the {@linkcode LitElement.properties properties} property or the\n * {@linkcode property} decorator.\n */\nexport class LitElement extends ReactiveElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See @lit/reactive-element for more information.\n   */\n  protected static override ['finalized'] = true;\n\n  // This property needs to remain unminified.\n  static ['_$litElement$'] = true;\n\n  /**\n   * @category rendering\n   */\n  readonly renderOptions: RenderOptions = {host: this};\n\n  private __childPart: RootPart | undefined = undefined;\n\n  /**\n   * @category rendering\n   */\n  protected override createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    // When adoptedStyleSheets are shimmed, they are inserted into the\n    // shadowRoot by createRenderRoot. Adjust the renderBefore node so that\n    // any styles in Lit content render before adoptedStyleSheets. This is\n    // important so that adoptedStyleSheets have precedence over styles in\n    // the shadowRoot.\n    this.renderOptions.renderBefore ??= renderRoot!.firstChild as ChildNode;\n    return renderRoot;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected override update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n\n  /**\n   * Invoked when the component is added to the document's DOM.\n   *\n   * In `connectedCallback()` you should setup tasks that should only occur when\n   * the element is connected to the document. The most common of these is\n   * adding event listeners to nodes external to the element, like a keydown\n   * event handler added to the window.\n   *\n   * ```ts\n   * connectedCallback() {\n   *   super.connectedCallback();\n   *   addEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * Typically, anything done in `connectedCallback()` should be undone when the\n   * element is disconnected, in `disconnectedCallback()`.\n   *\n   * @category lifecycle\n   */\n  override connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n\n  /**\n   * Invoked when the component is removed from the document's DOM.\n   *\n   * This callback is the main signal to the element that it may no longer be\n   * used. `disconnectedCallback()` should ensure that nothing is holding a\n   * reference to the element (such as event listeners added to nodes external\n   * to the element), so that it is free to be garbage collected.\n   *\n   * ```ts\n   * disconnectedCallback() {\n   *   super.disconnectedCallback();\n   *   window.removeEventListener('keydown', this._handleKeydown);\n   * }\n   * ```\n   *\n   * An element may be re-connected after being disconnected.\n   *\n   * @category lifecycle\n   */\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's `ChildPart` - typically a\n   * `TemplateResult`. Setting properties inside this method will *not* trigger\n   * the element to update.\n   * @category rendering\n   */\n  protected render(): unknown {\n    return noChange;\n  }\n}\n\n// Install hydration if available\nglobalThis.litElementHydrateSupport?.({LitElement});\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? globalThis.litElementPolyfillSupportDevMode\n  : globalThis.litElementPolyfillSupport;\npolyfillSupport?.({LitElement});\n\n// DEV mode warnings\nif (DEV_MODE) {\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  // Note, for compatibility with closure compilation, this access\n  // needs to be as a string property index.\n  (LitElement as any)['finalize'] = function (this: typeof LitElement) {\n    const finalized = (ReactiveElement as any).finalize.call(this);\n    if (!finalized) {\n      return false;\n    }\n    const warnRemovedOrRenamed = (obj: any, name: string, renamed = false) => {\n      if (obj.hasOwnProperty(name)) {\n        const ctorName = (typeof obj === 'function' ? obj : obj.constructor)\n          .name;\n        issueWarning(\n          renamed ? 'renamed-api' : 'removed-api',\n          `\\`${name}\\` is implemented on class ${ctorName}. It ` +\n            `has been ${renamed ? 'renamed' : 'removed'} ` +\n            `in this version of LitElement.`\n        );\n      }\n    };\n    warnRemovedOrRenamed(this, 'render');\n    warnRemovedOrRenamed(this, 'getStyles', true);\n    warnRemovedOrRenamed((this as typeof LitElement).prototype, 'adoptStyles');\n    return true;\n  };\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LE object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-html, since this module re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LE = {\n  _$attributeToProperty: (\n    el: LitElement,\n    name: string,\n    value: string | null\n  ) => {\n    // eslint-disable-next-line\n    (el as any)._$attributeToProperty(name, value);\n  },\n  // eslint-disable-next-line\n  _$changedProperties: (el: LitElement) => (el as any)._$changedProperties,\n};\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n(globalThis.litElementVersions ??= []).push('3.2.2');\nif (DEV_MODE && globalThis.litElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}