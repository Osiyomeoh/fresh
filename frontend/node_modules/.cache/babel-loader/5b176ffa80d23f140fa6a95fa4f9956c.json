{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\n\nexport const supportsAdoptingStyleSheets = global.ShadowRoot && (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\nconst constructionToken = Symbol();\nconst cssTagCache = new WeakMap();\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\n\nexport class CSSResult {\n  constructor(cssText, strings, safeToken) {\n    // This property needs to remain unminified.\n    this['_$cssResult$'] = true;\n\n    if (safeToken !== constructionToken) {\n      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n    this._strings = strings;\n  } // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n\n\n  get styleSheet() {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);\n\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n\n    return styleSheet;\n  }\n\n  toString() {\n    return this.cssText;\n  }\n\n}\n\nconst textFromCSSResult = value => {\n  // This property needs to remain unminified.\n  if (value['_$cssResult$'] === true) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(`Value passed to 'css' function must be a 'css' function result: ` + `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` + `to ensure page security.`);\n  }\n};\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\n\n\nexport const unsafeCSS = value => new CSSResult(typeof value === 'string' ? value : String(value), undefined, constructionToken);\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\n\nexport const css = function (strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  const cssText = strings.length === 1 ? strings[0] : values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n  return new CSSResult(cssText, strings, constructionToken);\n};\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\n\nexport const adoptStyles = (renderRoot, styles) => {\n  if (supportsAdoptingStyleSheets) {\n    renderRoot.adoptedStyleSheets = styles.map(s => s instanceof CSSStyleSheet ? s : s.styleSheet);\n  } else {\n    styles.forEach(s => {\n      const style = document.createElement('style'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      const nonce = global['litNonce'];\n\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n\n      style.textContent = s.cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = sheet => {\n  let cssText = '';\n\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle = supportsAdoptingStyleSheets || NODE_MODE && global.CSSStyleSheet === undefined ? s => s : s => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;","map":{"version":3,"mappings":"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","names":["NODE_MODE","global","globalThis","window","supportsAdoptingStyleSheets","ShadowRoot","ShadyCSS","undefined","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","cssTagCache","WeakMap","CSSResult","constructor","cssText","strings","safeToken","Error","_strings","styleSheet","_styleSheet","cacheable","length","get","replaceSync","set","toString","textFromCSSResult","value","unsafeCSS","String","css","values","reduce","acc","v","idx","adoptStyles","renderRoot","styles","adoptedStyleSheets","map","s","forEach","style","document","createElement","nonce","setAttribute","textContent","appendChild","cssResultFromStyleSheet","sheet","rule","cssRules","getCompatibleStyle"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@lit\\reactive-element\\src\\css-tag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets =\n  global.ShadowRoot &&\n  (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) &&\n  'adoptedStyleSheets' in Document.prototype &&\n  'replace' in CSSStyleSheet.prototype;\n\n/**\n * A CSSResult or native CSSStyleSheet.\n *\n * In browsers that support constructible CSS style sheets, CSSStyleSheet\n * object can be used for styling along side CSSResult from the `css`\n * template tag.\n */\nexport type CSSResultOrNative = CSSResult | CSSStyleSheet;\n\nexport type CSSResultArray = Array<CSSResultOrNative | CSSResultArray>;\n\n/**\n * A single CSSResult, CSSStyleSheet, or an array or nested arrays of those.\n */\nexport type CSSResultGroup = CSSResultOrNative | CSSResultArray;\n\nconst constructionToken = Symbol();\n\nconst cssTagCache = new WeakMap<TemplateStringsArray, CSSStyleSheet>();\n\n/**\n * A container for a string of CSS text, that may be used to create a CSSStyleSheet.\n *\n * CSSResult is the return value of `css`-tagged template literals and\n * `unsafeCSS()`. In order to ensure that CSSResults are only created via the\n * `css` tag and `unsafeCSS()`, CSSResult cannot be constructed directly.\n */\nexport class CSSResult {\n  // This property needs to remain unminified.\n  ['_$cssResult$'] = true;\n  readonly cssText: string;\n  private _styleSheet?: CSSStyleSheet;\n  private _strings: TemplateStringsArray | undefined;\n\n  private constructor(\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ) {\n    if (safeToken !== constructionToken) {\n      throw new Error(\n        'CSSResult is not constructable. Use `unsafeCSS` or `css` instead.'\n      );\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n\n  // This is a getter so that it's lazy. In practice, this means stylesheets\n  // are not created until the first element instance is made.\n  get styleSheet(): CSSStyleSheet | undefined {\n    // If `supportsAdoptingStyleSheets` is true then we assume CSSStyleSheet is\n    // constructable.\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(\n          this.cssText\n        );\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n\n  toString(): string {\n    return this.cssText;\n  }\n}\n\ntype ConstructableCSSResult = CSSResult & {\n  new (\n    cssText: string,\n    strings: TemplateStringsArray | undefined,\n    safeToken: symbol\n  ): CSSResult;\n};\n\nconst textFromCSSResult = (value: CSSResultGroup | number) => {\n  // This property needs to remain unminified.\n  if ((value as CSSResult)['_$cssResult$'] === true) {\n    return (value as CSSResult).cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\n      `Value passed to 'css' function must be a 'css' function result: ` +\n        `${value}. Use 'unsafeCSS' to pass non-literal values, but take care ` +\n        `to ensure page security.`\n    );\n  }\n};\n\n/**\n * Wrap a value for interpolation in a {@linkcode css} tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value: unknown) =>\n  new (CSSResult as ConstructableCSSResult)(\n    typeof value === 'string' ? value : String(value),\n    undefined,\n    constructionToken\n  );\n\n/**\n * A template literal tag which can be used with LitElement's\n * {@linkcode LitElement.styles} property to set element styles.\n *\n * For security reasons, only literal string values and number may be used in\n * embedded expressions. To incorporate non-literal values {@linkcode unsafeCSS}\n * may be used inside an expression.\n */\nexport const css = (\n  strings: TemplateStringsArray,\n  ...values: (CSSResultGroup | number)[]\n): CSSResult => {\n  const cssText =\n    strings.length === 1\n      ? strings[0]\n      : values.reduce(\n          (acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1],\n          strings[0]\n        );\n  return new (CSSResult as ConstructableCSSResult)(\n    cssText,\n    strings,\n    constructionToken\n  );\n};\n\n/**\n * Applies the given styles to a `shadowRoot`. When Shadow DOM is\n * available but `adoptedStyleSheets` is not, styles are appended to the\n * `shadowRoot` to [mimic spec behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n * Note, when shimming is used, any styles that are subsequently placed into\n * the shadowRoot should be placed *before* any shimmed adopted styles. This\n * will match spec behavior that gives adopted sheets precedence over styles in\n * shadowRoot.\n */\nexport const adoptStyles = (\n  renderRoot: ShadowRoot,\n  styles: Array<CSSResultOrNative>\n) => {\n  if (supportsAdoptingStyleSheets) {\n    (renderRoot as ShadowRoot).adoptedStyleSheets = styles.map((s) =>\n      s instanceof CSSStyleSheet ? s : s.styleSheet!\n    );\n  } else {\n    styles.forEach((s) => {\n      const style = document.createElement('style');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const nonce = (global as any)['litNonce'];\n      if (nonce !== undefined) {\n        style.setAttribute('nonce', nonce);\n      }\n      style.textContent = (s as CSSResult).cssText;\n      renderRoot.appendChild(style);\n    });\n  }\n};\n\nconst cssResultFromStyleSheet = (sheet: CSSStyleSheet) => {\n  let cssText = '';\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\n\nexport const getCompatibleStyle =\n  supportsAdoptingStyleSheets ||\n  (NODE_MODE && global.CSSStyleSheet === undefined)\n    ? (s: CSSResultOrNative) => s\n    : (s: CSSResultOrNative) =>\n        s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n"]},"metadata":{},"sourceType":"module"}