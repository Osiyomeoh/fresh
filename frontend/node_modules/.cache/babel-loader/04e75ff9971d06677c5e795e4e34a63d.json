{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumProviderError = exports.EthereumRpcError = void 0;\n\nconst fast_safe_stringify_1 = require(\"fast-safe-stringify\");\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n * Permits any integer error code.\n */\n\n\nclass EthereumRpcError extends Error {\n  constructor(code, message, data) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string.');\n    }\n\n    super(message);\n    this.code = code;\n\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n  /**\n   * Returns a plain object with all public class properties.\n   */\n\n\n  serialize() {\n    const serialized = {\n      code: this.code,\n      message: this.message\n    };\n\n    if (this.data !== undefined) {\n      serialized.data = this.data;\n    }\n\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n\n    return serialized;\n  }\n  /**\n   * Return a string representation of the serialized error, omitting\n   * any circular references.\n   */\n\n\n  toString() {\n    return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);\n  }\n\n}\n\nexports.EthereumRpcError = EthereumRpcError;\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\n\nclass EthereumProviderError extends EthereumRpcError {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   * `code` must be an integer in the 1000 <= 4999 range.\n   */\n  constructor(code, message, data) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n    }\n\n    super(code, message, data);\n  }\n\n}\n\nexports.EthereumProviderError = EthereumProviderError; // Internal\n\nfunction isValidEthProviderCode(code) {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\nfunction stringifyReplacer(_, value) {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}","map":{"version":3,"mappings":";;;;;;;AAAA;AASA;;;;;;;AAKA,MAAaA,gBAAb,SAAyCC,KAAzC,CAA8C;EAM5CC,YAAYC,IAAZ,EAA0BC,OAA1B,EAA2CC,IAA3C,EAAmD;IAEjD,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,CAAL,EAA6B;MAC3B,MAAM,IAAIF,KAAJ,CACJ,4BADI,CAAN;IAGD;;IACD,IAAI,CAACG,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAnC,EAA6C;MAC3C,MAAM,IAAIH,KAAJ,CACJ,sCADI,CAAN;IAGD;;IAED,MAAMG,OAAN;IACA,KAAKD,IAAL,GAAYA,IAAZ;;IACA,IAAIE,IAAI,KAAKG,SAAb,EAAwB;MACtB,KAAKH,IAAL,GAAYA,IAAZ;IACD;EACF;EAED;;;;;EAGAI,SAAS;IACP,MAAMC,UAAU,GAA+B;MAC7CP,IAAI,EAAE,KAAKA,IADkC;MAE7CC,OAAO,EAAE,KAAKA;IAF+B,CAA/C;;IAIA,IAAI,KAAKC,IAAL,KAAcG,SAAlB,EAA6B;MAC3BE,UAAU,CAACL,IAAX,GAAkB,KAAKA,IAAvB;IACD;;IACD,IAAI,KAAKM,KAAT,EAAgB;MACdD,UAAU,CAACC,KAAX,GAAmB,KAAKA,KAAxB;IACD;;IACD,OAAOD,UAAP;EACD;EAED;;;;;;EAIAE,QAAQ;IACN,OAAOC,8BACL,KAAKJ,SAAL,EADK,EAELK,iBAFK,EAGL,CAHK,CAAP;EAKD;;AArD2C;;AAA9CC;AAwDA;;;;;AAIA,MAAaC,qBAAb,SAA8ChB,gBAA9C,CAAiE;EAE/D;;;;EAIAE,YAAYC,IAAZ,EAA0BC,OAA1B,EAA2CC,IAA3C,EAAmD;IAEjD,IAAI,CAACY,sBAAsB,CAACd,IAAD,CAA3B,EAAmC;MACjC,MAAM,IAAIF,KAAJ,CACJ,2DADI,CAAN;IAGD;;IAED,MAAME,IAAN,EAAYC,OAAZ,EAAqBC,IAArB;EACD;;AAf8D;;AAAjEU,sD,CAkBA;;AAEA,SAASE,sBAAT,CAAgCd,IAAhC,EAA4C;EAC1C,OAAOG,MAAM,CAACC,SAAP,CAAiBJ,IAAjB,KAA0BA,IAAI,IAAI,IAAlC,IAA0CA,IAAI,IAAI,IAAzD;AACD;;AAED,SAASW,iBAAT,CAA2BI,CAA3B,EAAuCC,KAAvC,EAAqD;EACnD,IAAIA,KAAK,KAAK,YAAd,EAA4B;IAC1B,OAAOX,SAAP;EACD;;EACD,OAAOW,KAAP;AACD","names":["EthereumRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","fast_safe_stringify_1","stringifyReplacer","exports","EthereumProviderError","isValidEthProviderCode","_","value"],"sources":["../src/classes.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}