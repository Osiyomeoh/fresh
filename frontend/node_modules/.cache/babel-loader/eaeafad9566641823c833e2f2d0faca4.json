{"ast":null,"code":"const Utils = require('./utils');\n\nconst ECCode = require('./error-correction-code');\n\nconst ECLevel = require('./error-correction-level');\n\nconst Mode = require('./mode');\n\nconst VersionCheck = require('./version-check'); // Generator polynomial used to encode version information\n\n\nconst G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\nconst G18_BCH = Utils.getBCHDigit(G18);\n\nfunction getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getReservedBitsCount(mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4;\n}\n\nfunction getTotalBitsFromDataArray(segments, version) {\n  let totalBits = 0;\n  segments.forEach(function (data) {\n    const reservedBits = getReservedBitsCount(data.mode, version);\n    totalBits += reservedBits + data.getBitsLength();\n  });\n  return totalBits;\n}\n\nfunction getBestVersionForMixedData(segments, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    const length = getTotalBitsFromDataArray(segments, currentVersion);\n\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion;\n    }\n  }\n\n  return undefined;\n}\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\n\n\nexports.from = function from(value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10);\n  }\n\n  return defaultValue;\n};\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\n\n\nexports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version');\n  } // Use Byte mode as default\n\n\n  if (typeof mode === 'undefined') mode = Mode.BYTE; // Total codewords for this QR code version (Data + Error correction)\n\n  const totalCodewords = Utils.getSymbolTotalCodewords(version); // Total number of error correction codewords\n\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel); // Total number of data codewords\n\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n  const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version); // Return max number of storable codewords\n\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor(usableBits / 10 * 3);\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor(usableBits / 11 * 2);\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13);\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8);\n  }\n};\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\n\n\nexports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n  let seg;\n  const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n\n  if (Array.isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl);\n    }\n\n    if (data.length === 0) {\n      return 1;\n    }\n\n    seg = data[0];\n  } else {\n    seg = data;\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n};\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\n\n\nexports.getEncodedBits = function getEncodedBits(version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version');\n  }\n\n  let d = version << 12;\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n  }\n\n  return version << 12 | d;\n};","map":{"version":3,"names":["Utils","require","ECCode","ECLevel","Mode","VersionCheck","G18","G18_BCH","getBCHDigit","getBestVersionForDataLength","mode","length","errorCorrectionLevel","currentVersion","exports","getCapacity","undefined","getReservedBitsCount","version","getCharCountIndicator","getTotalBitsFromDataArray","segments","totalBits","forEach","data","reservedBits","getBitsLength","getBestVersionForMixedData","MIXED","from","value","defaultValue","isValid","parseInt","Error","BYTE","totalCodewords","getSymbolTotalCodewords","ecTotalCodewords","getTotalCodewordsCount","dataTotalCodewordsBits","usableBits","NUMERIC","Math","floor","ALPHANUMERIC","KANJI","getBestVersionForData","seg","ecl","M","Array","isArray","getLength","getEncodedBits","d"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@web3modal/ui/node_modules/qrcode/lib/core/version.js"],"sourcesContent":["const Utils = require('./utils')\nconst ECCode = require('./error-correction-code')\nconst ECLevel = require('./error-correction-level')\nconst Mode = require('./mode')\nconst VersionCheck = require('./version-check')\n\n// Generator polynomial used to encode version information\nconst G18 = (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0)\nconst G18_BCH = Utils.getBCHDigit(G18)\n\nfunction getBestVersionForDataLength (mode, length, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\nfunction getReservedBitsCount (mode, version) {\n  // Character count indicator + mode indicator bits\n  return Mode.getCharCountIndicator(mode, version) + 4\n}\n\nfunction getTotalBitsFromDataArray (segments, version) {\n  let totalBits = 0\n\n  segments.forEach(function (data) {\n    const reservedBits = getReservedBitsCount(data.mode, version)\n    totalBits += reservedBits + data.getBitsLength()\n  })\n\n  return totalBits\n}\n\nfunction getBestVersionForMixedData (segments, errorCorrectionLevel) {\n  for (let currentVersion = 1; currentVersion <= 40; currentVersion++) {\n    const length = getTotalBitsFromDataArray(segments, currentVersion)\n    if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n      return currentVersion\n    }\n  }\n\n  return undefined\n}\n\n/**\n * Returns version number from a value.\n * If value is not a valid version, returns defaultValue\n *\n * @param  {Number|String} value        QR Code version\n * @param  {Number}        defaultValue Fallback value\n * @return {Number}                     QR Code version number\n */\nexports.from = function from (value, defaultValue) {\n  if (VersionCheck.isValid(value)) {\n    return parseInt(value, 10)\n  }\n\n  return defaultValue\n}\n\n/**\n * Returns how much data can be stored with the specified QR code version\n * and error correction level\n *\n * @param  {Number} version              QR Code version (1-40)\n * @param  {Number} errorCorrectionLevel Error correction level\n * @param  {Mode}   mode                 Data mode\n * @return {Number}                      Quantity of storable data\n */\nexports.getCapacity = function getCapacity (version, errorCorrectionLevel, mode) {\n  if (!VersionCheck.isValid(version)) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  // Use Byte mode as default\n  if (typeof mode === 'undefined') mode = Mode.BYTE\n\n  // Total codewords for this QR code version (Data + Error correction)\n  const totalCodewords = Utils.getSymbolTotalCodewords(version)\n\n  // Total number of error correction codewords\n  const ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel)\n\n  // Total number of data codewords\n  const dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8\n\n  if (mode === Mode.MIXED) return dataTotalCodewordsBits\n\n  const usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version)\n\n  // Return max number of storable codewords\n  switch (mode) {\n    case Mode.NUMERIC:\n      return Math.floor((usableBits / 10) * 3)\n\n    case Mode.ALPHANUMERIC:\n      return Math.floor((usableBits / 11) * 2)\n\n    case Mode.KANJI:\n      return Math.floor(usableBits / 13)\n\n    case Mode.BYTE:\n    default:\n      return Math.floor(usableBits / 8)\n  }\n}\n\n/**\n * Returns the minimum version needed to contain the amount of data\n *\n * @param  {Segment} data                    Segment of data\n * @param  {Number} [errorCorrectionLevel=H] Error correction level\n * @param  {Mode} mode                       Data mode\n * @return {Number}                          QR Code version\n */\nexports.getBestVersionForData = function getBestVersionForData (data, errorCorrectionLevel) {\n  let seg\n\n  const ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M)\n\n  if (Array.isArray(data)) {\n    if (data.length > 1) {\n      return getBestVersionForMixedData(data, ecl)\n    }\n\n    if (data.length === 0) {\n      return 1\n    }\n\n    seg = data[0]\n  } else {\n    seg = data\n  }\n\n  return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl)\n}\n\n/**\n * Returns version information with relative error correction bits\n *\n * The version information is included in QR Code symbols of version 7 or larger.\n * It consists of an 18-bit sequence containing 6 data bits,\n * with 12 error correction bits calculated using the (18, 6) Golay code.\n *\n * @param  {Number} version QR Code version\n * @return {Number}         Encoded version info bits\n */\nexports.getEncodedBits = function getEncodedBits (version) {\n  if (!VersionCheck.isValid(version) || version < 7) {\n    throw new Error('Invalid QR Code version')\n  }\n\n  let d = version << 12\n\n  while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n    d ^= (G18 << (Utils.getBCHDigit(d) - G18_BCH))\n  }\n\n  return (version << 12) | d\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}