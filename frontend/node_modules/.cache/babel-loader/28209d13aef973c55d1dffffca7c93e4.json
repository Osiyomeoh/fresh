{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;\n\nconst error_constants_1 = require(\"./error-constants\");\n\nconst classes_1 = require(\"./classes\");\n\nconst FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE = 'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE)\n};\nexports.JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n */\n\nfunction getMessageFromCode(code) {\n  let fallbackMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_MESSAGE;\n\n  if (Number.isInteger(code)) {\n    const codeString = code.toString();\n\n    if (hasKey(error_constants_1.errorValues, codeString)) {\n      return error_constants_1.errorValues[codeString].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return exports.JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n\n  return fallbackMessage;\n}\n\nexports.getMessageFromCode = getMessageFromCode;\n/**\n * Returns whether the given code is valid.\n * A code is only valid if it has a message.\n */\n\nfunction isValidCode(code) {\n  if (!Number.isInteger(code)) {\n    return false;\n  }\n\n  const codeString = code.toString();\n\n  if (error_constants_1.errorValues[codeString]) {\n    return true;\n  }\n\n  if (isJsonRpcServerError(code)) {\n    return true;\n  }\n\n  return false;\n}\n\nexports.isValidCode = isValidCode;\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * Merely copies the given error's values if it is already compatible.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.originalError property.\n */\n\nfunction serializeError(error) {\n  let {\n    fallbackError = FALLBACK_ERROR,\n    shouldIncludeStack = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a, _b;\n\n  if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== 'string') {\n    throw new Error('Must provide fallback error with integer number code and string message.');\n  }\n\n  if (error instanceof classes_1.EthereumRpcError) {\n    return error.serialize();\n  }\n\n  const serialized = {};\n\n  if (error && typeof error === 'object' && !Array.isArray(error) && hasKey(error, 'code') && isValidCode(error.code)) {\n    const _error = error;\n    serialized.code = _error.code;\n\n    if (_error.message && typeof _error.message === 'string') {\n      serialized.message = _error.message;\n\n      if (hasKey(_error, 'data')) {\n        serialized.data = _error.data;\n      }\n    } else {\n      serialized.message = getMessageFromCode(serialized.code);\n      serialized.data = {\n        originalError: assignOriginalError(error)\n      };\n    }\n  } else {\n    serialized.code = fallbackError.code;\n    const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;\n    serialized.message = message && typeof message === 'string' ? message : fallbackError.message;\n    serialized.data = {\n      originalError: assignOriginalError(error)\n    };\n  }\n\n  const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;\n\n  if (shouldIncludeStack && error && stack && typeof stack === 'string') {\n    serialized.stack = stack;\n  }\n\n  return serialized;\n}\n\nexports.serializeError = serializeError; // Internal\n\nfunction isJsonRpcServerError(code) {\n  return code >= -32099 && code <= -32000;\n}\n\nfunction assignOriginalError(error) {\n  if (error && typeof error === 'object' && !Array.isArray(error)) {\n    return Object.assign({}, error);\n  }\n\n  return error;\n}\n\nfunction hasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}","map":{"version":3,"mappings":"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","names":["FALLBACK_ERROR_CODE","error_constants_1","rpc","internal","FALLBACK_MESSAGE","FALLBACK_ERROR","code","message","getMessageFromCode","exports","fallbackMessage","Number","isInteger","codeString","toString","hasKey","isJsonRpcServerError","isValidCode","serializeError","error","fallbackError","shouldIncludeStack","Error","classes_1","serialize","serialized","Array","isArray","_error","data","originalError","assignOriginalError","_a","stack","_b","Object","assign","obj","key","prototype","hasOwnProperty","call"],"sources":["../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}