{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n\n      try {\n        const provider = new providers.PocketProvider(network, options.pocket);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providers.AnkrProvider && options.ankr !== \"-\") {\n      try {\n        const skip = [\"ropsten\"];\n        const provider = new providers.AnkrProvider(network, options.ankr);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: \"sepolia\",\n    _defaultProvider: ethDefaultProvider(\"sepolia\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\",\n    _defaultProvider: ethDefaultProvider(\"matic\")\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\",\n    _defaultProvider: ethDefaultProvider(\"optimism\")\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  \"arbitrum-goerli\": {\n    chainId: 421613,\n    name: \"arbitrum-goerli\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"mappings":"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","names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","skip","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@ethersproject\\networks\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\" ];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [ \"ropsten\" ];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n"]},"metadata":{},"sourceType":"module"}