{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package int provides helper functions for integerss.\n */\n// Shim using 16-bit pieces.\n\nfunction imulShim(a, b) {\n  var ah = a >>> 16 & 0xffff,\n      al = a & 0xffff;\n  var bh = b >>> 16 & 0xffff,\n      bl = b & 0xffff;\n  return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n}\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\n\n\nexports.mul = Math.imul || imulShim;\n/** 32-bit integer addition.  */\n\nfunction add(a, b) {\n  return a + b | 0;\n}\n\nexports.add = add;\n/**  32-bit integer subtraction.  */\n\nfunction sub(a, b) {\n  return a - b | 0;\n}\n\nexports.sub = sub;\n/** 32-bit integer left rotation */\n\nfunction rotl(x, n) {\n  return x << n | x >>> 32 - n;\n}\n\nexports.rotl = rotl;\n/** 32-bit integer left rotation */\n\nfunction rotr(x, n) {\n  return x << 32 - n | x >>> n;\n}\n\nexports.rotr = rotr;\n\nfunction isIntegerShim(n) {\n  return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\n\n\nexports.isInteger = Number.isInteger || isIntegerShim;\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\n\nexports.MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\n\nexports.isSafeInteger = function (n) {\n  return exports.isInteger(n) && n >= -exports.MAX_SAFE_INTEGER && n <= exports.MAX_SAFE_INTEGER;\n};","map":{"version":3,"mappings":"cAAA;AACA;;;;;AAEA;;;AAIA;;AACA,SAASA,QAAT,CAAkBC,CAAlB,EAA6BC,CAA7B,EAAsC;EAClC,IAAMC,EAAE,GAAIF,CAAC,KAAK,EAAP,GAAa,MAAxB;EAAA,IAAgCG,EAAE,GAAGH,CAAC,GAAG,MAAzC;EACA,IAAMI,EAAE,GAAIH,CAAC,KAAK,EAAP,GAAa,MAAxB;EAAA,IAAgCI,EAAE,GAAGJ,CAAC,GAAG,MAAzC;EACA,OAASE,EAAE,GAAGE,EAAN,IAAeH,EAAE,GAAGG,EAAL,GAAUF,EAAE,GAAGC,EAAhB,IAAuB,EAAxB,KAAgC,CAA7C,IAAkD,CAA1D;AACH;AAED;AACA;;;AACaE,cAAOC,IAAgD,CAACC,IAAjD,IAAyDT,QAAhE;AAEb;;AACA,SAAgBU,GAAhB,CAAoBT,CAApB,EAA+BC,CAA/B,EAAwC;EACpC,OAAQD,CAAC,GAAGC,CAAL,GAAU,CAAjB;AACH;;AAFDK;AAIA;;AACA,SAAgBI,GAAhB,CAAoBV,CAApB,EAA+BC,CAA/B,EAAwC;EACpC,OAAQD,CAAC,GAAGC,CAAL,GAAU,CAAjB;AACH;;AAFDK;AAIA;;AACA,SAAgBK,IAAhB,CAAqBC,CAArB,EAAgCC,CAAhC,EAAyC;EACrC,OAAOD,CAAC,IAAIC,CAAL,GAASD,CAAC,KAAM,KAAKC,CAA5B;AACH;;AAFDP;AAIA;;AACA,SAAgBQ,IAAhB,CAAqBF,CAArB,EAAgCC,CAAhC,EAAyC;EACrC,OAAOD,CAAC,IAAK,KAAKC,CAAX,GAAgBD,CAAC,KAAKC,CAA7B;AACH;;AAFDP;;AAIA,SAASS,aAAT,CAAuBF,CAAvB,EAAgC;EAC5B,OAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBG,QAAQ,CAACH,CAAD,CAAjC,IAAwCN,IAAI,CAACU,KAAL,CAAWJ,CAAX,MAAkBA,CAAjE;AACH;AAED;;;;;;;AAKaP,oBAAaY,MAA6C,CAACC,SAA9C,IAA2DJ,aAAxE;AAEb;;;;;;AAKaT,2BAAmB,gBAAnB;AAEb;;;;;;;AAMaA,wBAAgB,UAACO,CAAD,EAAU;EACnC,yBAAUA,CAAV,KAAiBA,CAAC,IAAI,CAACP,wBAAN,IAA0BO,CAAC,IAAIP,wBAAhD;AAAiE,CADxD","names":["imulShim","a","b","ah","al","bh","bl","exports","Math","imul","add","sub","rotl","x","n","rotr","isIntegerShim","isFinite","floor","Number","isInteger"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@stablelib\\int\\int.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package int provides helper functions for integerss.\n */\n\n// Shim using 16-bit pieces.\nfunction imulShim(a: number, b: number): number {\n    const ah = (a >>> 16) & 0xffff, al = a & 0xffff;\n    const bh = (b >>> 16) & 0xffff, bl = b & 0xffff;\n    return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);\n}\n\n/** 32-bit integer multiplication.  */\n// Use system Math.imul if available, otherwise use our shim.\nexport const mul = (Math as { imul?(a: number, b: number): number }).imul || imulShim;\n\n/** 32-bit integer addition.  */\nexport function add(a: number, b: number): number {\n    return (a + b) | 0;\n}\n\n/**  32-bit integer subtraction.  */\nexport function sub(a: number, b: number): number {\n    return (a - b) | 0;\n}\n\n/** 32-bit integer left rotation */\nexport function rotl(x: number, n: number): number {\n    return x << n | x >>> (32 - n);\n}\n\n/** 32-bit integer left rotation */\nexport function rotr(x: number, n: number): number {\n    return x << (32 - n) | x >>> n;\n}\n\nfunction isIntegerShim(n: number): boolean {\n    return typeof n === \"number\" && isFinite(n) && Math.floor(n) === n;\n}\n\n/**\n * Returns true if the argument is an integer number.\n *\n * In ES2015, Number.isInteger.\n */\nexport const isInteger = (Number as { isInteger?(n: number): boolean }).isInteger || isIntegerShim;\n\n/**\n *  Math.pow(2, 53) - 1\n *\n *  In ES2015 Number.MAX_SAFE_INTEGER.\n */\nexport const MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Returns true if the argument is a safe integer number\n * (-MIN_SAFE_INTEGER < number <= MAX_SAFE_INTEGER)\n *\n * In ES2015, Number.isSafeInteger.\n */\nexport const isSafeInteger = (n: number): boolean =>\n    isInteger(n) && (n >= -MAX_SAFE_INTEGER && n <= MAX_SAFE_INTEGER);\n"]},"metadata":{},"sourceType":"script"}