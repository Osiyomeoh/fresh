{"ast":null,"code":"const GF = require('./galois-field');\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */\n\n\nexports.mul = function mul(p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1);\n\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n\n  return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */\n\n\nexports.mod = function mod(divident, divisor) {\n  let result = new Uint8Array(divident);\n\n  while (result.length - divisor.length >= 0) {\n    const coeff = result[0];\n\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    } // remove all zeros from buffer head\n\n\n    let offset = 0;\n\n    while (offset < result.length && result[offset] === 0) offset++;\n\n    result = result.slice(offset);\n  }\n\n  return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */\n\n\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  let poly = new Uint8Array([1]);\n\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]));\n  }\n\n  return poly;\n};","map":{"version":3,"names":["GF","require","exports","mul","p1","p2","coeff","Uint8Array","length","i","j","mod","divident","divisor","result","offset","slice","generateECPolynomial","degree","poly","exp"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@web3modal/ui/node_modules/qrcode/lib/core/polynomial.js"],"sourcesContent":["const GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Uint8Array} p1 Polynomial\n * @param  {Uint8Array} p2 Polynomial\n * @return {Uint8Array}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  const coeff = new Uint8Array(p1.length + p2.length - 1)\n\n  for (let i = 0; i < p1.length; i++) {\n    for (let j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Uint8Array} divident Polynomial\n * @param  {Uint8Array} divisor  Polynomial\n * @return {Uint8Array}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  let result = new Uint8Array(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    const coeff = result[0]\n\n    for (let i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    let offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Uint8Array}    Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  let poly = new Uint8Array([1])\n  for (let i = 0; i < degree; i++) {\n    poly = exports.mul(poly, new Uint8Array([1, GF.exp(i)]))\n  }\n\n  return poly\n}\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,gBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,GAAR,GAAc,SAASA,GAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsB;EAClC,MAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,EAAE,CAACI,MAAH,GAAYH,EAAE,CAACG,MAAf,GAAwB,CAAvC,CAAd;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACI,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACG,MAAvB,EAA+BE,CAAC,EAAhC,EAAoC;MAClCJ,KAAK,CAACG,CAAC,GAAGC,CAAL,CAAL,IAAgBV,EAAE,CAACG,GAAH,CAAOC,EAAE,CAACK,CAAD,CAAT,EAAcJ,EAAE,CAACK,CAAD,CAAhB,CAAhB;IACD;EACF;;EAED,OAAOJ,KAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACS,GAAR,GAAc,SAASA,GAAT,CAAcC,QAAd,EAAwBC,OAAxB,EAAiC;EAC7C,IAAIC,MAAM,GAAG,IAAIP,UAAJ,CAAeK,QAAf,CAAb;;EAEA,OAAQE,MAAM,CAACN,MAAP,GAAgBK,OAAO,CAACL,MAAzB,IAAoC,CAA3C,EAA8C;IAC5C,MAAMF,KAAK,GAAGQ,MAAM,CAAC,CAAD,CAApB;;IAEA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,OAAO,CAACL,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;MACvCK,MAAM,CAACL,CAAD,CAAN,IAAaT,EAAE,CAACG,GAAH,CAAOU,OAAO,CAACJ,CAAD,CAAd,EAAmBH,KAAnB,CAAb;IACD,CAL2C,CAO5C;;;IACA,IAAIS,MAAM,GAAG,CAAb;;IACA,OAAOA,MAAM,GAAGD,MAAM,CAACN,MAAhB,IAA0BM,MAAM,CAACC,MAAD,CAAN,KAAmB,CAApD,EAAuDA,MAAM;;IAC7DD,MAAM,GAAGA,MAAM,CAACE,KAAP,CAAaD,MAAb,CAAT;EACD;;EAED,OAAOD,MAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACe,oBAAR,GAA+B,SAASA,oBAAT,CAA+BC,MAA/B,EAAuC;EACpE,IAAIC,IAAI,GAAG,IAAIZ,UAAJ,CAAe,CAAC,CAAD,CAAf,CAAX;;EACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,MAApB,EAA4BT,CAAC,EAA7B,EAAiC;IAC/BU,IAAI,GAAGjB,OAAO,CAACC,GAAR,CAAYgB,IAAZ,EAAkB,IAAIZ,UAAJ,CAAe,CAAC,CAAD,EAAIP,EAAE,CAACoB,GAAH,CAAOX,CAAP,CAAJ,CAAf,CAAlB,CAAP;EACD;;EAED,OAAOU,IAAP;AACD,CAPD"},"metadata":{},"sourceType":"script"}