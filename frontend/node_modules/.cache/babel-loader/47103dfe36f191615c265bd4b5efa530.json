{"ast":null,"code":"export function assertType(obj, key) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"string\";\n\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\nexport function hasRequiredParams(params, required) {\n  let matches = true;\n  required.forEach(key => {\n    const exists = (key in params);\n\n    if (!exists) {\n      matches = false;\n    }\n  });\n  return matches;\n}\nexport function hasExactParamsLength(params, length) {\n  return Array.isArray(params) ? params.length === length : Object.keys(params).length === length;\n}\nexport function hasRequiredParamsLength(params, minLength) {\n  return Array.isArray(params) ? params.length >= minLength : Object.keys(params).length >= minLength;\n}\nexport function checkParams(params, required, optional) {\n  const exact = !optional.length;\n  const matchesLength = exact ? hasExactParamsLength(params, required.length) : hasRequiredParamsLength(params, required.length);\n  if (!matchesLength) return false;\n  return hasRequiredParams(params, required);\n}\nexport function methodEndsWith(method, expected) {\n  let separator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"_\";\n  const split = method.split(separator);\n  return split[split.length - 1].trim().toLowerCase() === expected.trim().toLowerCase();\n}","map":{"version":3,"mappings":"AAAA,OAAM,SAAUA,UAAV,CAAqBC,GAArB,EAA+BC,GAA/B,EAA2D;EAAA,IAAfC,IAAe,uEAAR,QAAQ;;EAC/D,IAAI,CAACF,GAAG,CAACC,GAAD,CAAJ,IAAa,OAAOD,GAAG,CAACC,GAAD,CAAV,KAAoBC,IAArC,EAA2C;IACzC,MAAM,IAAIC,KAAJ,CAAU,uBAAuBF,GAAG,SAApC,CAAN;EACD;AACF;AAED,OAAM,SAAUG,iBAAV,CAA4BC,MAA5B,EAAyCC,QAAzC,EAA2D;EAC/D,IAAIC,OAAO,GAAG,IAAd;EACAD,QAAQ,CAACE,OAAT,CAAiBP,GAAG,IAAG;IACrB,MAAMQ,MAAM,IAAGR,GAAG,IAAII,MAAV,CAAZ;;IACA,IAAI,CAACI,MAAL,EAAa;MACXF,OAAO,GAAG,KAAV;IACD;EACF,CALD;EAMA,OAAOA,OAAP;AACD;AAED,OAAM,SAAUG,oBAAV,CAA+BL,MAA/B,EAA4CM,MAA5C,EAA0D;EAC9D,OAAOC,KAAK,CAACC,OAAN,CAAcR,MAAd,IACHA,MAAM,CAACM,MAAP,KAAkBA,MADf,GAEHG,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBM,MAApB,KAA+BA,MAFnC;AAGD;AAED,OAAM,SAAUK,uBAAV,CACJX,MADI,EAEJY,SAFI,EAEa;EAEjB,OAAOL,KAAK,CAACC,OAAN,CAAcR,MAAd,IACHA,MAAM,CAACM,MAAP,IAAiBM,SADd,GAEHH,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBM,MAApB,IAA8BM,SAFlC;AAGD;AAED,OAAM,SAAUC,WAAV,CACJb,MADI,EAEJC,QAFI,EAGJa,QAHI,EAGc;EAElB,MAAMC,KAAK,GAAG,CAACD,QAAQ,CAACR,MAAxB;EACA,MAAMU,aAAa,GAAGD,KAAK,GACvBV,oBAAoB,CAACL,MAAD,EAASC,QAAQ,CAACK,MAAlB,CADG,GAEvBK,uBAAuB,CAACX,MAAD,EAASC,QAAQ,CAACK,MAAlB,CAF3B;EAGA,IAAI,CAACU,aAAL,EAAoB,OAAO,KAAP;EACpB,OAAOjB,iBAAiB,CAACC,MAAD,EAASC,QAAT,CAAxB;AACD;AAED,OAAM,SAAUgB,cAAV,CACJC,MADI,EAEJC,QAFI,EAGW;EAAA,IAAfC,SAAe,uEAAH,GAAG;EAEf,MAAMC,KAAK,GAAGH,MAAM,CAACG,KAAP,CAAaD,SAAb,CAAd;EACA,OACEC,KAAK,CAACA,KAAK,CAACf,MAAN,GAAe,CAAhB,CAAL,CAAwBgB,IAAxB,GAA+BC,WAA/B,OACAJ,QAAQ,CAACG,IAAT,GAAgBC,WAAhB,EAFF;AAID","names":["assertType","obj","key","type","Error","hasRequiredParams","params","required","matches","forEach","exists","hasExactParamsLength","length","Array","isArray","Object","keys","hasRequiredParamsLength","minLength","checkParams","optional","exact","matchesLength","methodEndsWith","method","expected","separator","split","trim","toLowerCase"],"sources":["../../src/misc.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}