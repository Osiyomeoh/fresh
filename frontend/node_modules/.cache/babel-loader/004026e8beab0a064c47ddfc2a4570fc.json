{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ethErrors = void 0;\n\nconst classes_1 = require(\"./classes\");\n\nconst utils_1 = require(\"./utils\");\n\nconst error_constants_1 = require(\"./error-constants\");\n\nexports.ethErrors = {\n  rpc: {\n    /**\n     * Get a JSON RPC 2.0 Parse (-32700) error.\n     */\n    parse: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n     */\n    invalidRequest: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n     */\n    invalidParams: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n     */\n    methodNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Internal (-32603) error.\n     */\n    internal: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),\n\n    /**\n     * Get a JSON RPC 2.0 Server error.\n     * Permits integer error codes in the [ -32099 <= -32005 ] range.\n     * Codes -32000 through -32004 are reserved by EIP-1474.\n     */\n    server: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum RPC Server errors must provide single object argument.');\n      }\n\n      const {\n        code\n      } = opts;\n\n      if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n        throw new Error('\"code\" must be an integer such that: -32099 <= code <= -32005');\n      }\n\n      return getEthJsonRpcError(code, opts);\n    },\n\n    /**\n     * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n     */\n    invalidInput: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n     */\n    resourceNotFound: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n     */\n    resourceUnavailable: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n     */\n    transactionRejected: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n     */\n    methodNotSupported: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),\n\n    /**\n     * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n     */\n    limitExceeded: arg => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)\n  },\n  provider: {\n    /**\n     * Get an Ethereum Provider User Rejected Request (4001) error.\n     */\n    userRejectedRequest: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unauthorized (4100) error.\n     */\n    unauthorized: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Unsupported Method (4200) error.\n     */\n    unsupportedMethod: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Not Connected (4900) error.\n     */\n    disconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);\n    },\n\n    /**\n     * Get an Ethereum Provider Chain Not Connected (4901) error.\n     */\n    chainDisconnected: arg => {\n      return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);\n    },\n\n    /**\n     * Get a custom Ethereum Provider error.\n     */\n    custom: opts => {\n      if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n        throw new Error('Ethereum Provider custom errors must provide single object argument.');\n      }\n\n      const {\n        code,\n        message,\n        data\n      } = opts;\n\n      if (!message || typeof message !== 'string') {\n        throw new Error('\"message\" must be a nonempty string');\n      }\n\n      return new classes_1.EthereumProviderError(code, message, data);\n    }\n  }\n}; // Internal\n\nfunction getEthJsonRpcError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction getEthProviderError(code, arg) {\n  const [message, data] = parseOpts(arg);\n  return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);\n}\n\nfunction parseOpts(arg) {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const {\n        message,\n        data\n      } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n\n      return [message || undefined, data];\n    }\n  }\n\n  return [];\n}","map":{"version":3,"mappings":"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","names":["exports","rpc","parse","arg","getEthJsonRpcError","error_constants_1","invalidRequest","invalidParams","methodNotFound","internal","server","opts","Array","isArray","Error","code","Number","isInteger","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","provider","userRejectedRequest","getEthProviderError","unauthorized","unsupportedMethod","disconnected","chainDisconnected","custom","message","data","classes_1","parseOpts","utils_1","undefined"],"sources":["../src/errors.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}