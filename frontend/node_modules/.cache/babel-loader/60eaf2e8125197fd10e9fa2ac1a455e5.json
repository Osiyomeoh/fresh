{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chacha_1 = require(\"@stablelib/chacha\");\n\nvar poly1305_1 = require(\"@stablelib/poly1305\");\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar constant_time_1 = require(\"@stablelib/constant-time\");\n\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\n\nvar ChaCha20Poly1305 =\n/** @class */\nfunction () {\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  function ChaCha20Poly1305(key) {\n    this.nonceLength = exports.NONCE_LENGTH;\n    this.tagLength = exports.TAG_LENGTH;\n\n    if (key.length !== exports.KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    } // Copy key.\n\n\n    this._key = new Uint8Array(key);\n  }\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n\n\n  ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    } // Allocate space for counter, and set nonce as last bytes of it.\n\n\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length); // Generate authentication key by taking first 32-bytes of stream.\n    // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n    // and it will get incremented after generating the block, which is\n    // exactly what we need: we only use the first 32 bytes of 64-byte\n    // ChaCha block and discard the next 32 bytes.\n\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4); // Allocate space for sealed ciphertext.\n\n    var resultLength = plaintext.length + this.tagLength;\n    var result;\n\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    } // Encrypt plaintext.\n\n\n    chacha_1.streamXOR(this._key, counter, plaintext, result, 4); // Authenticate.\n    // XXX: can \"simplify\" here: pass full result (which is already padded\n    // due to zeroes prepared for tag), and ciphertext length instead of\n    // subarray of result.\n\n    this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData); // Cleanup.\n\n\n    wipe_1.wipe(counter);\n    return result;\n  };\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be of ciphertext length minus tag length),\n   * the result will be put into it. Dst and plaintext must not overlap.\n   */\n\n\n  ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    } // Sealed ciphertext should at least contain tag.\n\n\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    } // Allocate space for counter, and set nonce as last bytes of it.\n\n\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length); // Generate authentication key by taking first 32-bytes of stream.\n\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4); // Authenticate.\n    // XXX: can simplify and avoid allocation: since authenticate()\n    // already allocates tag (from Poly1305.digest(), it can return)\n    // it instead of copying to calculatedTag. But then in seal()\n    // we'll need to copy it.\n\n    var calculatedTag = new Uint8Array(this.tagLength);\n\n    this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData); // Constant-time compare tags and return null if they differ.\n\n\n    if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n      return null;\n    } // Allocate space for decrypted plaintext.\n\n\n    var resultLength = sealed.length - this.tagLength;\n    var result;\n\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    } // Decrypt.\n\n\n    chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4); // Cleanup.\n\n    wipe_1.wipe(counter);\n    return result;\n  };\n\n  ChaCha20Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._key);\n    return this;\n  };\n\n  ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n    // Initialize Poly1305 with authKey.\n    var h = new poly1305_1.Poly1305(authKey); // Authenticate padded associated data.\n\n    if (associatedData) {\n      h.update(associatedData);\n\n      if (associatedData.length % 16 > 0) {\n        h.update(ZEROS.subarray(associatedData.length % 16));\n      }\n    } // Authenticate padded ciphertext.\n\n\n    h.update(ciphertext);\n\n    if (ciphertext.length % 16 > 0) {\n      h.update(ZEROS.subarray(ciphertext.length % 16));\n    } // Authenticate length of associated data.\n    // XXX: can avoid allocation here?\n\n\n    var length = new Uint8Array(8);\n\n    if (associatedData) {\n      binary_1.writeUint64LE(associatedData.length, length);\n    }\n\n    h.update(length); // Authenticate length of ciphertext.\n\n    binary_1.writeUint64LE(ciphertext.length, length);\n    h.update(length); // Get tag and copy it into tagOut.\n\n    var tag = h.digest();\n\n    for (var i = 0; i < tag.length; i++) {\n      tagOut[i] = tag[i];\n    } // Cleanup.\n\n\n    h.clean();\n    wipe_1.wipe(tag);\n    wipe_1.wipe(length);\n  };\n\n  return ChaCha20Poly1305;\n}();\n\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAOA;;AACA;;AACA;;AACA;;AACA;;AAEaA,qBAAa,EAAb;AACAA,uBAAe,EAAf;AACAA,qBAAa,EAAb;AAEb,IAAMC,KAAK,GAAG,IAAIC,UAAJ,CAAe,EAAf,CAAd;AAEA;;;;;;AAKA;AAAA;AAAA;EAMI;;;EAGA,0BAAYC,GAAZ,EAA2B;IARlB,mBAAcH,oBAAd;IACA,iBAAYA,kBAAZ;;IAQL,IAAIG,GAAG,CAACC,MAAJ,KAAeJ,kBAAnB,EAA+B;MAC3B,MAAM,IAAIK,KAAJ,CAAU,oCAAV,CAAN;IACH,CAHsB,CAIvB;;;IACA,KAAKC,IAAL,GAAY,IAAIJ,UAAJ,CAAeC,GAAf,CAAZ;EACH;EAED;;;;;;;;;;;;;;EAYAI,4CAAKC,KAAL,EAAwBC,SAAxB,EAA+CC,cAA/C,EACIC,GADJ,EACoB;IAChB,IAAIH,KAAK,CAACJ,MAAN,GAAe,EAAnB,EAAuB;MACnB,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;IACH,CAHe,CAKhB;;;IACA,IAAMO,OAAO,GAAG,IAAIV,UAAJ,CAAe,EAAf,CAAhB;IACAU,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBI,OAAO,CAACR,MAAR,GAAiBI,KAAK,CAACJ,MAA1C,EAPgB,CAShB;IACA;IACA;IACA;IACA;;IACA,IAAMU,OAAO,GAAG,IAAIZ,UAAJ,CAAe,EAAf,CAAhB;IACAa,gBAAO,KAAKT,IAAZ,EAAkBM,OAAlB,EAA2BE,OAA3B,EAAoC,CAApC,EAfgB,CAiBhB;;IACA,IAAME,YAAY,GAAGP,SAAS,CAACL,MAAV,GAAmB,KAAKa,SAA7C;IACA,IAAIC,MAAJ;;IACA,IAAIP,GAAJ,EAAS;MACL,IAAIA,GAAG,CAACP,MAAJ,KAAeY,YAAnB,EAAiC;QAC7B,MAAM,IAAIX,KAAJ,CAAU,gDAAV,CAAN;MACH;;MACDa,MAAM,GAAGP,GAAT;IACH,CALD,MAKO;MACHO,MAAM,GAAG,IAAIhB,UAAJ,CAAec,YAAf,CAAT;IACH,CA3Be,CA6BhB;;;IACAD,mBAAU,KAAKT,IAAf,EAAqBM,OAArB,EAA8BH,SAA9B,EAAyCS,MAAzC,EAAiD,CAAjD,EA9BgB,CAgChB;IACA;IACA;IACA;;IACA,KAAKC,aAAL,CAAmBD,MAAM,CAACE,QAAP,CAAgBF,MAAM,CAACd,MAAP,GAAgB,KAAKa,SAArC,EAAgDC,MAAM,CAACd,MAAvD,CAAnB,EACIU,OADJ,EACaI,MAAM,CAACE,QAAP,CAAgB,CAAhB,EAAmBF,MAAM,CAACd,MAAP,GAAgB,KAAKa,SAAxC,CADb,EACiEP,cADjE,EApCgB,CAuChB;;;IACAW,YAAKT,OAAL;IAEA,OAAOM,MAAP;EACH,CA5CD;EA8CA;;;;;;;;;;;;;;;EAaAX,4CAAKC,KAAL,EAAwBc,MAAxB,EAA4CZ,cAA5C,EACIC,GADJ,EACoB;IAChB,IAAIH,KAAK,CAACJ,MAAN,GAAe,EAAnB,EAAuB;MACnB,MAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;IACH,CAHe,CAKhB;;;IACA,IAAIiB,MAAM,CAAClB,MAAP,GAAgB,KAAKa,SAAzB,EAAoC;MAChC;MACA,OAAO,IAAP;IACH,CATe,CAWhB;;;IACA,IAAML,OAAO,GAAG,IAAIV,UAAJ,CAAe,EAAf,CAAhB;IACAU,OAAO,CAACC,GAAR,CAAYL,KAAZ,EAAmBI,OAAO,CAACR,MAAR,GAAiBI,KAAK,CAACJ,MAA1C,EAbgB,CAehB;;IACA,IAAMU,OAAO,GAAG,IAAIZ,UAAJ,CAAe,EAAf,CAAhB;IACAa,gBAAO,KAAKT,IAAZ,EAAkBM,OAAlB,EAA2BE,OAA3B,EAAoC,CAApC,EAjBgB,CAmBhB;IACA;IACA;IACA;IACA;;IACA,IAAMS,aAAa,GAAG,IAAIrB,UAAJ,CAAe,KAAKe,SAApB,CAAtB;;IACA,KAAKE,aAAL,CAAmBI,aAAnB,EAAkCT,OAAlC,EACIQ,MAAM,CAACF,QAAP,CAAgB,CAAhB,EAAmBE,MAAM,CAAClB,MAAP,GAAgB,KAAKa,SAAxC,CADJ,EACwDP,cADxD,EAzBgB,CA4BhB;;;IACA,IAAI,CAACc,sBAAMD,aAAN,EACDD,MAAM,CAACF,QAAP,CAAgBE,MAAM,CAAClB,MAAP,GAAgB,KAAKa,SAArC,EAAgDK,MAAM,CAAClB,MAAvD,CADC,CAAL,EACqE;MACjE,OAAO,IAAP;IACH,CAhCe,CAkChB;;;IACA,IAAMY,YAAY,GAAGM,MAAM,CAAClB,MAAP,GAAgB,KAAKa,SAA1C;IACA,IAAIC,MAAJ;;IACA,IAAIP,GAAJ,EAAS;MACL,IAAIA,GAAG,CAACP,MAAJ,KAAeY,YAAnB,EAAiC;QAC7B,MAAM,IAAIX,KAAJ,CAAU,gDAAV,CAAN;MACH;;MACDa,MAAM,GAAGP,GAAT;IACH,CALD,MAKO;MACHO,MAAM,GAAG,IAAIhB,UAAJ,CAAec,YAAf,CAAT;IACH,CA5Ce,CA8ChB;;;IACAD,mBAAU,KAAKT,IAAf,EAAqBM,OAArB,EACIU,MAAM,CAACF,QAAP,CAAgB,CAAhB,EAAmBE,MAAM,CAAClB,MAAP,GAAgB,KAAKa,SAAxC,CADJ,EACwDC,MADxD,EACgE,CADhE,EA/CgB,CAkDhB;;IACAG,YAAKT,OAAL;IAEA,OAAOM,MAAP;EACH,CAvDD;;EAyDAX;IACIc,YAAK,KAAKf,IAAV;IACA,OAAO,IAAP;EACH,CAHD;;EAKQC,2CAAR,UAAsBkB,MAAtB,EAA0CX,OAA1C,EACIY,UADJ,EAC4BhB,cAD5B,EACuD;IAEnD;IACA,IAAMiB,CAAC,GAAG,IAAIC,mBAAJ,CAAad,OAAb,CAAV,CAHmD,CAKnD;;IACA,IAAIJ,cAAJ,EAAoB;MAChBiB,CAAC,CAACE,MAAF,CAASnB,cAAT;;MACA,IAAIA,cAAc,CAACN,MAAf,GAAwB,EAAxB,GAA6B,CAAjC,EAAoC;QAChCuB,CAAC,CAACE,MAAF,CAAS5B,KAAK,CAACmB,QAAN,CAAeV,cAAc,CAACN,MAAf,GAAwB,EAAvC,CAAT;MACH;IACJ,CAXkD,CAanD;;;IACAuB,CAAC,CAACE,MAAF,CAASH,UAAT;;IACA,IAAIA,UAAU,CAACtB,MAAX,GAAoB,EAApB,GAAyB,CAA7B,EAAgC;MAC5BuB,CAAC,CAACE,MAAF,CAAS5B,KAAK,CAACmB,QAAN,CAAeM,UAAU,CAACtB,MAAX,GAAoB,EAAnC,CAAT;IACH,CAjBkD,CAmBnD;IACA;;;IACA,IAAMA,MAAM,GAAG,IAAIF,UAAJ,CAAe,CAAf,CAAf;;IACA,IAAIQ,cAAJ,EAAoB;MAChBoB,uBAAcpB,cAAc,CAACN,MAA7B,EAAqCA,MAArC;IACH;;IACDuB,CAAC,CAACE,MAAF,CAASzB,MAAT,EAzBmD,CA2BnD;;IACA0B,uBAAcJ,UAAU,CAACtB,MAAzB,EAAiCA,MAAjC;IACAuB,CAAC,CAACE,MAAF,CAASzB,MAAT,EA7BmD,CA+BnD;;IACA,IAAM2B,GAAG,GAAGJ,CAAC,CAACK,MAAF,EAAZ;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAAC3B,MAAxB,EAAgC6B,CAAC,EAAjC,EAAqC;MACjCR,MAAM,CAACQ,CAAD,CAAN,GAAYF,GAAG,CAACE,CAAD,CAAf;IACH,CAnCkD,CAqCnD;;;IACAN,CAAC,CAACO,KAAF;IACAb,YAAKU,GAAL;IACAV,YAAKjB,MAAL;EACH,CA1CO;;EA2CZ;AAAC,CAjMD;;AAAaJ","names":["exports","ZEROS","Uint8Array","key","length","Error","_key","ChaCha20Poly1305","nonce","plaintext","associatedData","dst","counter","set","authKey","chacha_1","resultLength","tagLength","result","_authenticate","subarray","wipe_1","sealed","calculatedTag","constant_time_1","tagOut","ciphertext","h","poly1305_1","update","binary_1","tag","digest","i","clean"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@stablelib\\chacha20poly1305\\chacha20poly1305.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package chacha20poly1305 implements ChaCha20-Poly1305 AEAD.\n */\n\nimport { AEAD } from \"@stablelib/aead\";\nimport { streamXOR, stream } from \"@stablelib/chacha\";\nimport { Poly1305 } from \"@stablelib/poly1305\";\nimport { wipe } from \"@stablelib/wipe\";\nimport { writeUint64LE } from \"@stablelib/binary\";\nimport { equal } from \"@stablelib/constant-time\";\n\nexport const KEY_LENGTH = 32;\nexport const NONCE_LENGTH = 12;\nexport const TAG_LENGTH = 16;\n\nconst ZEROS = new Uint8Array(16);\n\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nexport class ChaCha20Poly1305 implements AEAD {\n    readonly nonceLength = NONCE_LENGTH;\n    readonly tagLength = TAG_LENGTH;\n\n    private _key: Uint8Array;\n\n    /**\n     * Creates a new instance with the given 32-byte key.\n     */\n    constructor(key: Uint8Array) {\n        if (key.length !== KEY_LENGTH) {\n            throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n        }\n        // Copy key.\n        this._key = new Uint8Array(key);\n    }\n\n    /**\n     * Encrypts and authenticates plaintext, authenticates associated data,\n     * and returns sealed ciphertext, which includes authentication tag.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If dst is given (it must be the size of plaintext + the size of tag\n     * length) the result will be put into it. Dst and plaintext must not\n     * overlap.\n     */\n    seal(nonce: Uint8Array, plaintext: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n        // and it will get incremented after generating the block, which is\n        // exactly what we need: we only use the first 32 bytes of 64-byte\n        // ChaCha block and discard the next 32 bytes.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Allocate space for sealed ciphertext.\n        const resultLength = plaintext.length + this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Encrypt plaintext.\n        streamXOR(this._key, counter, plaintext, result, 4);\n\n        // Authenticate.\n        // XXX: can \"simplify\" here: pass full result (which is already padded\n        // due to zeroes prepared for tag), and ciphertext length instead of\n        // subarray of result.\n        this._authenticate(result.subarray(result.length - this.tagLength, result.length),\n            authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    /**\n     * Authenticates sealed ciphertext (which includes authentication tag) and\n     * associated data, decrypts ciphertext and returns decrypted plaintext.\n     *\n     * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n     * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n     * and nonce.\n     *\n     * If authentication fails, it returns null.\n     *\n     * If dst is given (it must be of ciphertext length minus tag length),\n     * the result will be put into it. Dst and plaintext must not overlap.\n     */\n    open(nonce: Uint8Array, sealed: Uint8Array, associatedData?: Uint8Array,\n        dst?: Uint8Array): Uint8Array | null {\n        if (nonce.length > 16) {\n            throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n        }\n\n        // Sealed ciphertext should at least contain tag.\n        if (sealed.length < this.tagLength) {\n            // TODO(dchest): should we throw here instead?\n            return null;\n        }\n\n        // Allocate space for counter, and set nonce as last bytes of it.\n        const counter = new Uint8Array(16);\n        counter.set(nonce, counter.length - nonce.length);\n\n        // Generate authentication key by taking first 32-bytes of stream.\n        const authKey = new Uint8Array(32);\n        stream(this._key, counter, authKey, 4);\n\n        // Authenticate.\n        // XXX: can simplify and avoid allocation: since authenticate()\n        // already allocates tag (from Poly1305.digest(), it can return)\n        // it instead of copying to calculatedTag. But then in seal()\n        // we'll need to copy it.\n        const calculatedTag = new Uint8Array(this.tagLength);\n        this._authenticate(calculatedTag, authKey,\n            sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n\n        // Constant-time compare tags and return null if they differ.\n        if (!equal(calculatedTag,\n            sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n            return null;\n        }\n\n        // Allocate space for decrypted plaintext.\n        const resultLength = sealed.length - this.tagLength;\n        let result;\n        if (dst) {\n            if (dst.length !== resultLength) {\n                throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n            }\n            result = dst;\n        } else {\n            result = new Uint8Array(resultLength);\n        }\n\n        // Decrypt.\n        streamXOR(this._key, counter,\n            sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n\n        // Cleanup.\n        wipe(counter);\n\n        return result;\n    }\n\n    clean(): this {\n        wipe(this._key);\n        return this;\n    }\n\n    private _authenticate(tagOut: Uint8Array, authKey: Uint8Array,\n        ciphertext: Uint8Array, associatedData?: Uint8Array) {\n\n        // Initialize Poly1305 with authKey.\n        const h = new Poly1305(authKey);\n\n        // Authenticate padded associated data.\n        if (associatedData) {\n            h.update(associatedData);\n            if (associatedData.length % 16 > 0) {\n                h.update(ZEROS.subarray(associatedData.length % 16));\n            }\n        }\n\n        // Authenticate padded ciphertext.\n        h.update(ciphertext);\n        if (ciphertext.length % 16 > 0) {\n            h.update(ZEROS.subarray(ciphertext.length % 16));\n        }\n\n        // Authenticate length of associated data.\n        // XXX: can avoid allocation here?\n        const length = new Uint8Array(8);\n        if (associatedData) {\n            writeUint64LE(associatedData.length, length);\n        }\n        h.update(length);\n\n        // Authenticate length of ciphertext.\n        writeUint64LE(ciphertext.length, length);\n        h.update(length);\n\n        // Get tag and copy it into tagOut.\n        const tag = h.digest();\n        for (let i = 0; i < tag.length; i++) {\n            tagOut[i] = tag[i];\n        }\n\n        // Cleanup.\n        h.clean();\n        wipe(tag);\n        wipe(length);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}