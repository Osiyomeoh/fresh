{"ast":null,"code":"import { concat } from \"uint8arrays/concat\";\nimport { toString } from \"uint8arrays/to-string\";\nimport { fromString } from \"uint8arrays/from-string\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { DATA_ENCODING, DID_DELIMITER, DID_METHOD, DID_PREFIX, JSON_ENCODING, JWT_DELIMITER, JWT_ENCODING, MULTICODEC_ED25519_BASE, MULTICODEC_ED25519_ENCODING, MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_LENGTH } from \"./constants\";\nexport function decodeJSON(str) {\n  return safeJsonParse(toString(fromString(str, JWT_ENCODING), JSON_ENCODING));\n}\nexport function encodeJSON(val) {\n  return toString(fromString(safeJsonStringify(val), JSON_ENCODING), JWT_ENCODING);\n}\nexport function encodeIss(publicKey) {\n  const header = fromString(MULTICODEC_ED25519_HEADER, MULTICODEC_ED25519_ENCODING);\n  const multicodec = MULTICODEC_ED25519_BASE + toString(concat([header, publicKey]), MULTICODEC_ED25519_ENCODING);\n  return [DID_PREFIX, DID_METHOD, multicodec].join(DID_DELIMITER);\n}\nexport function decodeIss(issuer) {\n  const [prefix, method, multicodec] = issuer.split(DID_DELIMITER);\n\n  if (prefix !== DID_PREFIX || method !== DID_METHOD) {\n    throw new Error(`Issuer must be a DID with method \"key\"`);\n  }\n\n  const base = multicodec.slice(0, 1);\n\n  if (base !== MULTICODEC_ED25519_BASE) {\n    throw new Error(`Issuer must be a key in mulicodec format`);\n  }\n\n  const bytes = fromString(multicodec.slice(1), MULTICODEC_ED25519_ENCODING);\n  const type = toString(bytes.slice(0, 2), MULTICODEC_ED25519_ENCODING);\n\n  if (type !== MULTICODEC_ED25519_HEADER) {\n    throw new Error(`Issuer must be a public key with type \"Ed25519\"`);\n  }\n\n  const publicKey = bytes.slice(2);\n\n  if (publicKey.length !== MULTICODEC_ED25519_LENGTH) {\n    throw new Error(`Issuer must be a public key with length 32 bytes`);\n  }\n\n  return publicKey;\n}\nexport function encodeSig(bytes) {\n  return toString(bytes, JWT_ENCODING);\n}\nexport function decodeSig(encoded) {\n  return fromString(encoded, JWT_ENCODING);\n}\nexport function encodeData(params) {\n  return fromString([encodeJSON(params.header), encodeJSON(params.payload)].join(JWT_DELIMITER), DATA_ENCODING);\n}\nexport function decodeData(data) {\n  const params = toString(data, DATA_ENCODING).split(JWT_DELIMITER);\n  const header = decodeJSON(params[0]);\n  const payload = decodeJSON(params[1]);\n  return {\n    header,\n    payload\n  };\n}\nexport function encodeJWT(params) {\n  return [encodeJSON(params.header), encodeJSON(params.payload), encodeSig(params.signature)].join(JWT_DELIMITER);\n}\nexport function decodeJWT(jwt) {\n  const params = jwt.split(JWT_DELIMITER);\n  const header = decodeJSON(params[0]);\n  const payload = decodeJSON(params[1]);\n  const signature = decodeSig(params[2]);\n  const data = fromString(params.slice(0, 2).join(JWT_DELIMITER), DATA_ENCODING);\n  return {\n    header,\n    payload,\n    signature,\n    data\n  };\n}","map":{"version":3,"mappings":"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","names":["concat","toString","fromString","safeJsonParse","safeJsonStringify","DATA_ENCODING","DID_DELIMITER","DID_METHOD","DID_PREFIX","JSON_ENCODING","JWT_DELIMITER","JWT_ENCODING","MULTICODEC_ED25519_BASE","MULTICODEC_ED25519_ENCODING","MULTICODEC_ED25519_HEADER","MULTICODEC_ED25519_LENGTH","decodeJSON","str","encodeJSON","val","encodeIss","publicKey","header","multicodec","join","decodeIss","issuer","prefix","method","split","Error","base","slice","bytes","type","length","encodeSig","decodeSig","encoded","encodeData","params","payload","decodeData","data","encodeJWT","signature","decodeJWT","jwt"],"sources":["../../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}