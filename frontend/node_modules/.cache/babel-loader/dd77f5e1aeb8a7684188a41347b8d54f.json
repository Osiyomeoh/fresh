{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BrowserRandomSource = void 0;\nconst QUOTA = 65536;\n\nclass BrowserRandomSource {\n  constructor() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n    const browserCrypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto // IE11 has msCrypto\n    : null;\n\n    if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n      this._crypto = browserCrypto;\n      this.isAvailable = true;\n      this.isInstantiated = true;\n    }\n  }\n\n  randomBytes(length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Browser random byte generator is not available.\");\n    }\n\n    const out = new Uint8Array(length);\n\n    for (let i = 0; i < out.length; i += QUOTA) {\n      this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n    }\n\n    return out;\n  }\n\n}\n\nexports.BrowserRandomSource = BrowserRandomSource;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAIA,MAAMA,KAAK,GAAG,KAAd;;AAEA,MAAaC,mBAAb,CAAgC;EAM5BC;IALA,mBAAc,KAAd;IACA,sBAAiB,KAAjB;IAKI,MAAMC,aAAa,GAAG,OAAOC,IAAP,KAAgB,WAAhB,GACfA,IAAI,CAACC,MAAL,IAAgBD,IAA2B,CAACE,QAD7B,CACuC;IADvC,EAEhB,IAFN;;IAIA,IAAIH,aAAa,IAAIA,aAAa,CAACI,eAAd,KAAkCC,SAAvD,EAAkE;MAC9D,KAAKC,OAAL,GAAeN,aAAf;MACA,KAAKO,WAAL,GAAmB,IAAnB;MACA,KAAKC,cAAL,GAAsB,IAAtB;IACH;EACJ;;EAEDC,WAAW,CAACC,MAAD,EAAe;IACtB,IAAI,CAAC,KAAKH,WAAN,IAAqB,CAAC,KAAKD,OAA/B,EAAwC;MACpC,MAAM,IAAIK,KAAJ,CAAU,iDAAV,CAAN;IACH;;IACD,MAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeH,MAAf,CAAZ;;IACA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACF,MAAxB,EAAgCI,CAAC,IAAIjB,KAArC,EAA4C;MACxC,KAAKS,OAAL,CAAaF,eAAb,CAA6BQ,GAAG,CAACG,QAAJ,CAAaD,CAAb,EAAgBA,CAAC,GAAGE,IAAI,CAACC,GAAL,CAASL,GAAG,CAACF,MAAJ,GAAaI,CAAtB,EAAyBjB,KAAzB,CAApB,CAA7B;IACH;;IACD,OAAOe,GAAP;EACH;;AA3B2B;;AAAhCM","names":["QUOTA","BrowserRandomSource","constructor","browserCrypto","self","crypto","msCrypto","getRandomValues","undefined","_crypto","isAvailable","isInstantiated","randomBytes","length","Error","out","Uint8Array","i","subarray","Math","min","exports"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@stablelib\\random\\source\\browser.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nimport { RandomSource } from \"./\";\n\nconst QUOTA = 65536;\n\nexport class BrowserRandomSource implements RandomSource {\n    isAvailable = false;\n    isInstantiated = false;\n\n    private _crypto?: { getRandomValues: typeof window.crypto.getRandomValues };\n\n    constructor() {\n        const browserCrypto = typeof self !== 'undefined'\n            ? (self.crypto || (self as { msCrypto?: any }).msCrypto) // IE11 has msCrypto\n            : null;\n\n        if (browserCrypto && browserCrypto.getRandomValues !== undefined) {\n            this._crypto = browserCrypto;\n            this.isAvailable = true;\n            this.isInstantiated = true;\n        }\n    }\n\n    randomBytes(length: number): Uint8Array {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Browser random byte generator is not available.\");\n        }\n        const out = new Uint8Array(length);\n        for (let i = 0; i < out.length; i += QUOTA) {\n            this._crypto.getRandomValues(out.subarray(i, i + Math.min(out.length - i, QUOTA)));\n        }\n        return out;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}