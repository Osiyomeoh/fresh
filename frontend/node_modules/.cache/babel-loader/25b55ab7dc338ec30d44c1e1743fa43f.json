{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nimport { queryAssignedElements } from './query-assigned-elements.js';\nexport function queryAssignedNodes(slotOrOptions, flatten, selector) {\n  // Normalize the overloaded arguments.\n  let slot = slotOrOptions;\n  let assignedNodesOptions;\n\n  if (typeof slotOrOptions === 'object') {\n    slot = slotOrOptions.slot;\n    assignedNodesOptions = slotOrOptions;\n  } else {\n    assignedNodesOptions = {\n      flatten\n    };\n  } // For backwards compatibility, queryAssignedNodes with a selector behaves\n  // exactly like queryAssignedElements with a selector.\n\n\n  if (selector) {\n    return queryAssignedElements({\n      slot: slot,\n      flatten,\n      selector\n    });\n  }\n\n  return decorateProperty({\n    descriptor: _name => ({\n      get() {\n        var _a, _b;\n\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n        return (_b = slotEl === null || slotEl === void 0 ? void 0 : slotEl.assignedNodes(assignedNodesOptions)) !== null && _b !== void 0 ? _b : [];\n      },\n\n      enumerable: true,\n      configurable: true\n    })\n  });\n}","map":{"version":3,"mappings":"AAAA;;;;;;AAMA;;;;;;AAOA,SAAQA,gBAAR,QAA+B,WAA/B;AACA,SAAQC,qBAAR,QAAoC,8BAApC;AAyFA,OAAM,SAAUC,kBAAV,CACJC,aADI,EAEJC,OAFI,EAGJC,QAHI,EAGa;EAEjB;EACA,IAAIC,IAAI,GAAGH,aAAX;EACA,IAAII,oBAAJ;;EACA,IAAI,OAAOJ,aAAP,KAAyB,QAA7B,EAAuC;IACrCG,IAAI,GAAGH,aAAa,CAACG,IAArB;IACAC,oBAAoB,GAAGJ,aAAvB;EACD,CAHD,MAGO;IACLI,oBAAoB,GAAG;MAACH;IAAD,CAAvB;EACD,CAVgB,CAYjB;EACA;;;EACA,IAAIC,QAAJ,EAAc;IACZ,OAAOJ,qBAAqB,CAAC;MAC3BK,IAAI,EAAEA,IADqB;MAE3BF,OAF2B;MAG3BC;IAH2B,CAAD,CAA5B;EAKD;;EAED,OAAOL,gBAAgB,CAAC;IACtBQ,UAAU,EAAGC,KAAD,KAAyB;MACnCC,GAAG;;;QACD,MAAMC,YAAY,GAAG,OAAOL,IAAI,GAAG,SAASA,IAAI,GAAhB,GAAsB,cAAc,EAApE;QACA,MAAMM,MAAM,GACV,WAAKC,UAAL,MAAe,IAAf,IAAeC,aAAf,GAAe,MAAf,GAAeA,GAAEC,aAAF,CAAiCJ,YAAjC,CADjB;QAEA,OAAO,YAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEK,aAAR,CAAsBT,oBAAtB,OAA2C,IAA3C,IAA2CU,aAA3C,GAA2CA,EAA3C,GAA+C,EAAtD;MACD,CANkC;;MAOnCC,UAAU,EAAE,IAPuB;MAQnCC,YAAY,EAAE;IARqB,CAAzB;EADU,CAAD,CAAvB;AAYD","names":["decorateProperty","queryAssignedElements","queryAssignedNodes","slotOrOptions","flatten","selector","slot","assignedNodesOptions","descriptor","_name","get","slotSelector","slotEl","renderRoot","_a","querySelector","assignedNodes","_b","enumerable","configurable"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\@lit\\reactive-element\\src\\decorators\\query-assigned-nodes.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\nimport {queryAssignedElements} from './query-assigned-elements.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Options for the {@linkcode queryAssignedNodes} decorator. Extends the options\n * that can be passed into [HTMLSlotElement.assignedNodes](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes).\n */\nexport interface QueryAssignedNodesOptions extends AssignedNodesOptions {\n  /**\n   * Name of the slot to query. Leave empty for the default slot.\n   */\n  slot?: string;\n}\n\n// TypeScript requires the decorator return type to be `void|any`.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype TSDecoratorReturnType = void | any;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given `slot`.\n *\n * Can be passed an optional {@linkcode QueryAssignedNodesOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes({slot: 'list', flatten: true})\n *   listItems!: Array<Node>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>`.\n *\n * @category Decorator\n */\nexport function queryAssignedNodes(\n  options?: QueryAssignedNodesOptions\n): TSDecoratorReturnType;\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note the type of this property should be annotated as `Array<Node>` if used\n * without a `selector` or `Array<HTMLElement>` if a selector is provided.\n * Use {@linkcode queryAssignedElements @queryAssignedElements} to list only\n * elements, and optionally filter the element list using a CSS selector.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n *     meaning any assigned nodes that are slot elements are replaced with their\n *     assigned nodes.\n * @param selector A CSS selector used to filter the elements returned.\n *\n * @category Decorator\n * @deprecated Prefer passing in a single options object, i.e. `{slot: 'list'}`.\n * If using `selector` please use `@queryAssignedElements`.\n * `@queryAssignedNodes('', false, '.item')` is functionally identical to\n * `@queryAssignedElements({slot: '', flatten: false, selector: '.item'})` or\n * `@queryAssignedElements({selector: '.item'})`.\n */\nexport function queryAssignedNodes(\n  slotName?: string,\n  flatten?: boolean,\n  selector?: string\n): TSDecoratorReturnType;\n\nexport function queryAssignedNodes(\n  slotOrOptions?: string | QueryAssignedNodesOptions,\n  flatten?: boolean,\n  selector?: string\n) {\n  // Normalize the overloaded arguments.\n  let slot = slotOrOptions;\n  let assignedNodesOptions: AssignedNodesOptions;\n  if (typeof slotOrOptions === 'object') {\n    slot = slotOrOptions.slot;\n    assignedNodesOptions = slotOrOptions;\n  } else {\n    assignedNodesOptions = {flatten};\n  }\n\n  // For backwards compatibility, queryAssignedNodes with a selector behaves\n  // exactly like queryAssignedElements with a selector.\n  if (selector) {\n    return queryAssignedElements({\n      slot: slot as string,\n      flatten,\n      selector,\n    });\n  }\n\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        return slotEl?.assignedNodes(assignedNodesOptions) ?? [];\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"module"}