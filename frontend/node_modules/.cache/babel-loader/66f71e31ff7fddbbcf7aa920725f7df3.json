{"ast":null,"code":"const Polynomial = require('./polynomial');\n\nfunction ReedSolomonEncoder(degree) {\n  this.genPoly = undefined;\n  this.degree = degree;\n  if (this.degree) this.initialize(this.degree);\n}\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\n\n\nReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree;\n  this.genPoly = Polynomial.generateECPolynomial(this.degree);\n};\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */\n\n\nReedSolomonEncoder.prototype.encode = function encode(data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized');\n  } // Calculate EC for this data block\n  // extends data size to data+genPoly size\n\n\n  const paddedData = new Uint8Array(data.length + this.degree);\n  paddedData.set(data); // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n\n  const remainder = Polynomial.mod(paddedData, this.genPoly); // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n\n  const start = this.degree - remainder.length;\n\n  if (start > 0) {\n    const buff = new Uint8Array(this.degree);\n    buff.set(remainder, start);\n    return buff;\n  }\n\n  return remainder;\n};\n\nmodule.exports = ReedSolomonEncoder;","map":{"version":3,"names":["Polynomial","require","ReedSolomonEncoder","degree","genPoly","undefined","initialize","prototype","generateECPolynomial","encode","data","Error","paddedData","Uint8Array","length","set","remainder","mod","start","buff","module","exports"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@web3modal/ui/node_modules/qrcode/lib/core/reed-solomon-encoder.js"],"sourcesContent":["const Polynomial = require('./polynomial')\n\nfunction ReedSolomonEncoder (degree) {\n  this.genPoly = undefined\n  this.degree = degree\n\n  if (this.degree) this.initialize(this.degree)\n}\n\n/**\n * Initialize the encoder.\n * The input param should correspond to the number of error correction codewords.\n *\n * @param  {Number} degree\n */\nReedSolomonEncoder.prototype.initialize = function initialize (degree) {\n  // create an irreducible generator polynomial\n  this.degree = degree\n  this.genPoly = Polynomial.generateECPolynomial(this.degree)\n}\n\n/**\n * Encodes a chunk of data\n *\n * @param  {Uint8Array} data Buffer containing input data\n * @return {Uint8Array}      Buffer containing encoded data\n */\nReedSolomonEncoder.prototype.encode = function encode (data) {\n  if (!this.genPoly) {\n    throw new Error('Encoder not initialized')\n  }\n\n  // Calculate EC for this data block\n  // extends data size to data+genPoly size\n  const paddedData = new Uint8Array(data.length + this.degree)\n  paddedData.set(data)\n\n  // The error correction codewords are the remainder after dividing the data codewords\n  // by a generator polynomial\n  const remainder = Polynomial.mod(paddedData, this.genPoly)\n\n  // return EC data blocks (last n byte, where n is the degree of genPoly)\n  // If coefficients number in remainder are less than genPoly degree,\n  // pad with 0s to the left to reach the needed number of coefficients\n  const start = this.degree - remainder.length\n  if (start > 0) {\n    const buff = new Uint8Array(this.degree)\n    buff.set(remainder, start)\n\n    return buff\n  }\n\n  return remainder\n}\n\nmodule.exports = ReedSolomonEncoder\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AAEA,SAASC,kBAAT,CAA6BC,MAA7B,EAAqC;EACnC,KAAKC,OAAL,GAAeC,SAAf;EACA,KAAKF,MAAL,GAAcA,MAAd;EAEA,IAAI,KAAKA,MAAT,EAAiB,KAAKG,UAAL,CAAgB,KAAKH,MAArB;AAClB;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAD,kBAAkB,CAACK,SAAnB,CAA6BD,UAA7B,GAA0C,SAASA,UAAT,CAAqBH,MAArB,EAA6B;EACrE;EACA,KAAKA,MAAL,GAAcA,MAAd;EACA,KAAKC,OAAL,GAAeJ,UAAU,CAACQ,oBAAX,CAAgC,KAAKL,MAArC,CAAf;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAD,kBAAkB,CAACK,SAAnB,CAA6BE,MAA7B,GAAsC,SAASA,MAAT,CAAiBC,IAAjB,EAAuB;EAC3D,IAAI,CAAC,KAAKN,OAAV,EAAmB;IACjB,MAAM,IAAIO,KAAJ,CAAU,yBAAV,CAAN;EACD,CAH0D,CAK3D;EACA;;;EACA,MAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeH,IAAI,CAACI,MAAL,GAAc,KAAKX,MAAlC,CAAnB;EACAS,UAAU,CAACG,GAAX,CAAeL,IAAf,EAR2D,CAU3D;EACA;;EACA,MAAMM,SAAS,GAAGhB,UAAU,CAACiB,GAAX,CAAeL,UAAf,EAA2B,KAAKR,OAAhC,CAAlB,CAZ2D,CAc3D;EACA;EACA;;EACA,MAAMc,KAAK,GAAG,KAAKf,MAAL,GAAca,SAAS,CAACF,MAAtC;;EACA,IAAII,KAAK,GAAG,CAAZ,EAAe;IACb,MAAMC,IAAI,GAAG,IAAIN,UAAJ,CAAe,KAAKV,MAApB,CAAb;IACAgB,IAAI,CAACJ,GAAL,CAASC,SAAT,EAAoBE,KAApB;IAEA,OAAOC,IAAP;EACD;;EAED,OAAOH,SAAP;AACD,CA1BD;;AA4BAI,MAAM,CAACC,OAAP,GAAiBnB,kBAAjB"},"metadata":{},"sourceType":"script"}