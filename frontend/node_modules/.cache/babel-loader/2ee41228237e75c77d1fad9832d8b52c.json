{"ast":null,"code":"// Extracted from https://github.com/ethereumjs/ethereumjs-abi and stripped out irrelevant code\n// Original code licensed under the MIT License - Copyright (c) 2015 Alex Beregszaszi\nconst util = require('./util');\n\nconst BN = require('bn.js'); // Convert from short to canonical names\n// FIXME: optimise or make this nicer?\n\n\nfunction elementaryName(name) {\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3);\n  } else if (name === 'int') {\n    return 'int256';\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4);\n  } else if (name === 'uint') {\n    return 'uint256';\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5);\n  } else if (name === 'fixed') {\n    return 'fixed128x128';\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6);\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128';\n  }\n\n  return name;\n} // Parse N from type<N>\n\n\nfunction parseTypeN(type) {\n  return parseInt(/^\\D+(\\d+)$/.exec(type)[1], 10);\n} // Parse N,M from type<N>x<M>\n\n\nfunction parseTypeNxM(type) {\n  var tmp = /^\\D+(\\d+)x(\\d+)$/.exec(type);\n  return [parseInt(tmp[1], 10), parseInt(tmp[2], 10)];\n} // Parse N in type[<N>] where \"type\" can itself be an array type.\n\n\nfunction parseTypeArray(type) {\n  var tmp = type.match(/(.*)\\[(.*?)\\]$/);\n\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);\n  }\n\n  return null;\n}\n\nfunction parseNumber(arg) {\n  var type = typeof arg;\n\n  if (type === 'string') {\n    if (util.isHexString(arg)) {\n      return new BN(util.stripHexPrefix(arg), 16);\n    } else {\n      return new BN(arg, 10);\n    }\n  } else if (type === 'number') {\n    return new BN(arg);\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg;\n  } else {\n    throw new Error('Argument is not a number');\n  }\n} // Encodes a single item (can be dynamic array)\n// @returns: Buffer\n\n\nfunction encodeSingle(type, arg) {\n  var size, num, ret, i;\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg));\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0);\n  } else if (type === 'string') {\n    return encodeSingle('bytes', new Buffer(arg, 'utf8'));\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?');\n    }\n\n    size = parseTypeArray(type);\n\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error('Elements exceed array size: ' + size);\n    }\n\n    ret = [];\n    type = type.slice(0, type.lastIndexOf('['));\n\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg);\n    }\n\n    for (i in arg) {\n      ret.push(encodeSingle(type, arg[i]));\n    }\n\n    if (size === 'dynamic') {\n      var length = encodeSingle('uint256', arg.length);\n      ret.unshift(length);\n    }\n\n    return Buffer.concat(ret);\n  } else if (type === 'bytes') {\n    arg = new Buffer(arg);\n    ret = Buffer.concat([encodeSingle('uint256', arg.length), arg]);\n\n    if (arg.length % 32 !== 0) {\n      ret = Buffer.concat([ret, util.zeros(32 - arg.length % 32)]);\n    }\n\n    return ret;\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type);\n\n    if (size < 1 || size > 32) {\n      throw new Error('Invalid bytes<N> width: ' + size);\n    }\n\n    return util.setLengthRight(arg, 32);\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid uint<N> width: ' + size);\n    }\n\n    num = parseNumber(arg);\n\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative');\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type);\n\n    if (size % 8 || size < 8 || size > 256) {\n      throw new Error('Invalid int<N> width: ' + size);\n    }\n\n    num = parseNumber(arg);\n\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32);\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type);\n    num = parseNumber(arg);\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative');\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))));\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type);\n    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))));\n  }\n\n  throw new Error('Unsupported or invalid type: ' + type);\n} // Is a type dynamic?\n\n\nfunction isDynamic(type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return type === 'string' || type === 'bytes' || parseTypeArray(type) === 'dynamic';\n} // Is a type an array?\n\n\nfunction isArray(type) {\n  return type.lastIndexOf(']') === type.length - 1;\n} // Encode a method/event with arguments\n// @types an array of string type names\n// @args  an array of the appropriate values\n\n\nfunction rawEncode(types, values) {\n  var output = [];\n  var data = [];\n  var headLength = 32 * types.length;\n\n  for (var i in types) {\n    var type = elementaryName(types[i]);\n    var value = values[i];\n    var cur = encodeSingle(type, value); // Use the head/tail method for storing dynamic data\n\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength));\n      data.push(cur);\n      headLength += cur.length;\n    } else {\n      output.push(cur);\n    }\n  }\n\n  return Buffer.concat(output.concat(data));\n}\n\nfunction solidityPack(types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values');\n  }\n\n  var size, num;\n  var ret = [];\n\n  for (var i = 0; i < types.length; i++) {\n    var type = elementaryName(types[i]);\n    var value = values[i];\n\n    if (type === 'bytes') {\n      ret.push(value);\n    } else if (type === 'string') {\n      ret.push(new Buffer(value, 'utf8'));\n    } else if (type === 'bool') {\n      ret.push(new Buffer(value ? '01' : '00', 'hex'));\n    } else if (type === 'address') {\n      ret.push(util.setLength(value, 20));\n    } else if (type.startsWith('bytes')) {\n      size = parseTypeN(type);\n\n      if (size < 1 || size > 32) {\n        throw new Error('Invalid bytes<N> width: ' + size);\n      }\n\n      ret.push(util.setLengthRight(value, size));\n    } else if (type.startsWith('uint')) {\n      size = parseTypeN(type);\n\n      if (size % 8 || size < 8 || size > 256) {\n        throw new Error('Invalid uint<N> width: ' + size);\n      }\n\n      num = parseNumber(value);\n\n      if (num.bitLength() > size) {\n        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());\n      }\n\n      ret.push(num.toArrayLike(Buffer, 'be', size / 8));\n    } else if (type.startsWith('int')) {\n      size = parseTypeN(type);\n\n      if (size % 8 || size < 8 || size > 256) {\n        throw new Error('Invalid int<N> width: ' + size);\n      }\n\n      num = parseNumber(value);\n\n      if (num.bitLength() > size) {\n        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());\n      }\n\n      ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8));\n    } else {\n      // FIXME: support all other types\n      throw new Error('Unsupported or invalid type: ' + type);\n    }\n  }\n\n  return Buffer.concat(ret);\n}\n\nfunction soliditySHA3(types, values) {\n  return util.keccak(solidityPack(types, values));\n}\n\nmodule.exports = {\n  rawEncode,\n  solidityPack,\n  soliditySHA3\n};","map":{"version":3,"names":["util","require","BN","elementaryName","name","startsWith","slice","parseTypeN","type","parseInt","exec","parseTypeNxM","tmp","parseTypeArray","match","parseNumber","arg","isHexString","stripHexPrefix","toArray","Error","encodeSingle","size","num","ret","i","Buffer","isArray","length","lastIndexOf","JSON","parse","push","unshift","concat","zeros","setLengthRight","bitLength","toArrayLike","toTwos","mul","pow","isDynamic","rawEncode","types","values","output","data","headLength","value","cur","solidityPack","setLength","soliditySHA3","keccak","module","exports"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@coinbase/wallet-sdk/dist/vendor-js/eth-eip712-util/abi.js"],"sourcesContent":["// Extracted from https://github.com/ethereumjs/ethereumjs-abi and stripped out irrelevant code\n// Original code licensed under the MIT License - Copyright (c) 2015 Alex Beregszaszi\n\nconst util = require('./util')\nconst BN = require('bn.js')\n\n// Convert from short to canonical names\n// FIXME: optimise or make this nicer?\nfunction elementaryName (name) {\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3)\n  } else if (name === 'int') {\n    return 'int256'\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4)\n  } else if (name === 'uint') {\n    return 'uint256'\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5)\n  } else if (name === 'fixed') {\n    return 'fixed128x128'\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6)\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128'\n  }\n  return name\n}\n\n// Parse N from type<N>\nfunction parseTypeN (type) {\n  return parseInt(/^\\D+(\\d+)$/.exec(type)[1], 10)\n}\n\n// Parse N,M from type<N>x<M>\nfunction parseTypeNxM (type) {\n  var tmp = /^\\D+(\\d+)x(\\d+)$/.exec(type)\n  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]\n}\n\n// Parse N in type[<N>] where \"type\" can itself be an array type.\nfunction parseTypeArray (type) {\n  var tmp = type.match(/(.*)\\[(.*?)\\]$/)\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)\n  }\n  return null\n}\n\nfunction parseNumber (arg) {\n  var type = typeof arg\n  if (type === 'string') {\n    if (util.isHexString(arg)) {\n      return new BN(util.stripHexPrefix(arg), 16)\n    } else {\n      return new BN(arg, 10)\n    }\n  } else if (type === 'number') {\n    return new BN(arg)\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg\n  } else {\n    throw new Error('Argument is not a number')\n  }\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\nfunction encodeSingle (type, arg) {\n  var size, num, ret, i\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg))\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0)\n  } else if (type === 'string') {\n    return encodeSingle('bytes', new Buffer(arg, 'utf8'))\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?')\n    }\n    size = parseTypeArray(type)\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error('Elements exceed array size: ' + size)\n    }\n    ret = []\n    type = type.slice(0, type.lastIndexOf('['))\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg)\n    }\n    for (i in arg) {\n      ret.push(encodeSingle(type, arg[i]))\n    }\n    if (size === 'dynamic') {\n      var length = encodeSingle('uint256', arg.length)\n      ret.unshift(length)\n    }\n    return Buffer.concat(ret)\n  } else if (type === 'bytes') {\n    arg = new Buffer(arg)\n\n    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])\n\n    if ((arg.length % 32) !== 0) {\n      ret = Buffer.concat([ ret, util.zeros(32 - (arg.length % 32)) ])\n    }\n\n    return ret\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type)\n    if (size < 1 || size > 32) {\n      throw new Error('Invalid bytes<N> width: ' + size)\n    }\n\n    return util.setLengthRight(arg, 32)\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type)\n    if ((size % 8) || (size < 8) || (size > 256)) {\n      throw new Error('Invalid uint<N> width: ' + size)\n    }\n\n    num = parseNumber(arg)\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative')\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32)\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type)\n    if ((size % 8) || (size < 8) || (size > 256)) {\n      throw new Error('Invalid int<N> width: ' + size)\n    }\n\n    num = parseNumber(arg)\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type)\n\n    num = parseNumber(arg)\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative')\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type)\n\n    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))\n  }\n\n  throw new Error('Unsupported or invalid type: ' + type)\n}\n\n// Is a type dynamic?\nfunction isDynamic (type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')\n}\n\n// Is a type an array?\nfunction isArray (type) {\n  return type.lastIndexOf(']') === type.length - 1\n}\n\n// Encode a method/event with arguments\n// @types an array of string type names\n// @args  an array of the appropriate values\nfunction rawEncode (types, values) {\n  var output = []\n  var data = []\n\n  var headLength = 32 * types.length\n\n  for (var i in types) {\n    var type = elementaryName(types[i])\n    var value = values[i]\n    var cur = encodeSingle(type, value)\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength))\n      data.push(cur)\n      headLength += cur.length\n    } else {\n      output.push(cur)\n    }\n  }\n\n  return Buffer.concat(output.concat(data))\n}\n\nfunction solidityPack (types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values')\n  }\n\n  var size, num\n  var ret = []\n\n  for (var i = 0; i < types.length; i++) {\n    var type = elementaryName(types[i])\n    var value = values[i]\n\n    if (type === 'bytes') {\n      ret.push(value)\n    } else if (type === 'string') {\n      ret.push(new Buffer(value, 'utf8'))\n    } else if (type === 'bool') {\n      ret.push(new Buffer(value ? '01' : '00', 'hex'))\n    } else if (type === 'address') {\n      ret.push(util.setLength(value, 20))\n    } else if (type.startsWith('bytes')) {\n      size = parseTypeN(type)\n      if (size < 1 || size > 32) {\n        throw new Error('Invalid bytes<N> width: ' + size)\n      }\n\n      ret.push(util.setLengthRight(value, size))\n    } else if (type.startsWith('uint')) {\n      size = parseTypeN(type)\n      if ((size % 8) || (size < 8) || (size > 256)) {\n        throw new Error('Invalid uint<N> width: ' + size)\n      }\n\n      num = parseNumber(value)\n      if (num.bitLength() > size) {\n        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())\n      }\n\n      ret.push(num.toArrayLike(Buffer, 'be', size / 8))\n    } else if (type.startsWith('int')) {\n      size = parseTypeN(type)\n      if ((size % 8) || (size < 8) || (size > 256)) {\n        throw new Error('Invalid int<N> width: ' + size)\n      }\n\n      num = parseNumber(value)\n      if (num.bitLength() > size) {\n        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())\n      }\n\n      ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8))\n    } else {\n      // FIXME: support all other types\n      throw new Error('Unsupported or invalid type: ' + type)\n    }\n  }\n\n  return Buffer.concat(ret)\n}\n\nfunction soliditySHA3 (types, values) {\n  return util.keccak(solidityPack(types, values))\n}\n\nmodule.exports = {\n  rawEncode,\n  solidityPack,\n  soliditySHA3\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}