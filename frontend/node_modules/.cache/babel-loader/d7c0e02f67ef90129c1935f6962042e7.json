{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoinbaseWalletProvider = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\n\nconst Session_1 = require(\"../relay/Session\");\n\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\n\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    var _a, _b;\n\n    super();\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this._send = this.send.bind(this);\n    this._sendAsync = this.sendAsync.bind(this);\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.genericRequest = this.genericRequest.bind(this);\n    this._chainIdFromOpts = options.chainId;\n    this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    this.diagnostic = options.diagnosticLogger;\n    this.reloadOnDisconnect = true;\n    this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n    this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n    this.qrUrl = options.qrUrl;\n    this.supportsAddressSwitching = options.supportsAddressSwitching;\n    this.isLedger = options.isLedger;\n    const chainId = this.getChainId();\n    const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16)); // indicate that we've connected, for EIP-1193 compliance\n\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n\n    const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n\n    if (this._addresses.length > 0) {\n      void this.initializeRelay();\n    }\n\n    window.addEventListener(\"message\", event => {\n      var _a; // Used to verify the source and window are correct before proceeding\n\n\n      if (event.origin !== location.origin || event.source !== window) {\n        return;\n      }\n\n      if (event.data.type !== \"walletLinkMessage\") return; // compatibility with CBW extension\n\n      if (event.data.data.action === \"defaultChainChanged\" || event.data.data.action === \"dappChainSwitched\") {\n        const _chainId = event.data.data.chainId;\n        const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n        this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n      }\n\n      if (event.data.data.action === \"addressChanged\") {\n        this._setAddresses([event.data.data.address]);\n      }\n    });\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n\n  get chainId() {\n    return (0, util_1.prepend0x)(this.getChainId().toString(16));\n  }\n\n  get isWalletLink() {\n    // backward compatibility\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n\n\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n\n  get host() {\n    return this.jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  }\n\n  get jsonRpcUrl() {\n    var _a;\n\n    return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n  }\n\n  set jsonRpcUrl(value) {\n    this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n  }\n\n  disableReloadOnDisconnect() {\n    this.reloadOnDisconnect = false;\n  }\n  /**\n   * this function is called when coinbase provider is being injected to a dapp\n   * standalone + walletlinked extension, ledger, in-app browser using cipher-web-view\n   */\n\n\n  setProviderInfo(jsonRpcUrl, chainId) {\n    // extension tend to use the chianId from the dapp, while in-app browser and ledger overrides the default network\n    if (!(this.isLedger || this.isCoinbaseBrowser)) {\n      this._chainIdFromOpts = chainId;\n      this._jsonRpcUrlFromOpts = jsonRpcUrl;\n    }\n\n    this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n  }\n\n  updateProviderInfo(jsonRpcUrl, chainId) {\n    this.jsonRpcUrl = jsonRpcUrl; // emit chainChanged event if necessary\n\n    const originalChainId = this.getChainId();\n\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n\n    const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n\n  async watchAsset(type, address, symbol, decimals, image, chainId) {\n    const relay = await this.initializeRelay();\n    const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n    return !!result.result;\n  }\n\n  async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n    var _a, _b;\n\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return false;\n    }\n\n    const relay = await this.initializeRelay();\n    const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n\n    if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n      await relay.requestEthereumAccounts().promise;\n    }\n\n    const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n\n    if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n      this.updateProviderInfo(rpcUrls[0], chainId);\n    }\n\n    return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n  }\n\n  async switchEthereumChain(chainId) {\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n\n    if (res.errorCode) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: res.errorCode\n      });\n    }\n\n    const switchResponse = res.result;\n\n    if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n      this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n    }\n  }\n\n  setAppInfo(appName, appLogoUrl) {\n    void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n\n  async enable() {\n    var _a;\n\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::enable\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n\n    if (this._addresses.length > 0) {\n      return [...this._addresses];\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  async close() {\n    const relay = await this.initializeRelay();\n    relay.resetAndReload();\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  async sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n    return this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n\n    const newParams = params === undefined ? [] : params; // Coinbase Wallet Requests\n\n    const id = this._relayEventManager.makeRequestId();\n\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async genericRequest(data, action) {\n    const relay = await this.initializeRelay();\n    const res = await relay.genericRequest(data, action).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async selectProvider(providerOptions) {\n    const relay = await this.initializeRelay();\n    const res = await relay.selectProvider(providerOptions).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses, isDisconnect) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n\n    if (this._addresses.length > 0 && this.supportsAddressSwitching === false && !isDisconnect) {\n      /**\n       * The extension currently doesn't support switching selected wallet index\n       * make sure walletlink doesn't update it's address in this case\n       */\n      return;\n    }\n\n    this._addresses = newAddresses;\n    this.emit(\"accountsChanged\", this._addresses);\n\n    this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => res && resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  async _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n        return this._cbwallet_arbitrary(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n        return this._wallet_addEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n        return this._wallet_switchEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n        return this._wallet_watchAsset(params);\n    }\n\n    const relay = await this.initializeRelay();\n    return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const addressStr = (0, util_1.ensureAddressString)(addressString);\n\n      const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n\n      return lowercaseAddresses.includes(addressStr);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    var _a;\n\n    if (!this._isKnownAddress(addressString)) {\n      (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n    const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n    const chainId = this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _isAuthorized() {\n    return this._addresses.length > 0;\n  }\n\n  _requireAuthorization() {\n    if (!this._isAuthorized()) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return [...this._addresses];\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n\n  _eth_chainId() {\n    return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n  }\n\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n\n    if (!chainIdStr) {\n      return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n    }\n\n    const chainId = parseInt(chainIdStr, 10);\n    return (0, util_1.ensureIntNumber)(chainId);\n  }\n\n  async _eth_requestAccounts() {\n    var _a;\n\n    (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::_eth_requestAccounts\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : undefined\n    });\n\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts().promise;\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    if (!(this.isLedger || this.isCoinbaseBrowser)) {\n      await this.switchEthereumChain(this.getChainId());\n    }\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const message = (0, util_1.ensureBuffer)(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n  /** @deprecated */\n\n\n  async _cbwallet_arbitrary(params) {\n    const action = params[0];\n    const data = params[1];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    if (typeof action !== \"object\" || action === null) {\n      throw new Error(\"parameter must be an object\");\n    }\n\n    const result = await this.genericRequest(action, data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  async _wallet_addEthereumChain(params) {\n    var _a, _b, _c, _d;\n\n    const request = params[0];\n\n    if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `please pass in at least 1 rpcUrl`\n        }\n      };\n    }\n\n    if (!request.chainName || request.chainName.trim() === \"\") {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"chainName is a required field\"\n      });\n    }\n\n    if (!request.nativeCurrency) {\n      throw eth_rpc_errors_1.ethErrors.provider.custom({\n        code: 0,\n        message: \"nativeCurrency is a required field\"\n      });\n    }\n\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n\n    if (success) {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: null\n      };\n    } else {\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        error: {\n          code: 2,\n          message: `unable to add ethereum chain`\n        }\n      };\n    }\n  }\n\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    await this.switchEthereumChain(parseInt(request.chainId, 16));\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: null\n    };\n  }\n\n  async _wallet_watchAsset(params) {\n    const request = Array.isArray(params) ? params[0] : params;\n\n    if (!request.type) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Type is required\"\n      });\n    }\n\n    if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: `Asset of type '${request.type}' is not supported`\n      });\n    }\n\n    if (!(request === null || request === void 0 ? void 0 : request.options)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Options are required\"\n      });\n    }\n\n    if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        message: \"Address is required\"\n      });\n    }\n\n    const chainId = this.getChainId();\n    const {\n      address,\n      symbol,\n      image,\n      decimals\n    } = request.options;\n    const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n      relay.setChainCallback((chainId, jsonRpcUrl) => {\n        this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n      });\n      relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n      this._relay = relay;\n      return relay;\n    });\n  }\n\n}\n\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","CoinbaseWalletProvider","safe_event_emitter_1","require","bn_js_1","eth_rpc_errors_1","DiagnosticLogger_1","Session_1","WalletSDKRelayAbstract_1","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","SubscriptionManager_1","DEFAULT_CHAIN_ID_KEY","DEFAULT_JSON_RPC_URL","default","constructor","options","_a","_b","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","_send","send","bind","_sendAsync","sendAsync","setProviderInfo","updateProviderInfo","getChainId","setAppInfo","enable","close","request","_setAddresses","scanQRCode","genericRequest","_chainIdFromOpts","chainId","_jsonRpcUrlFromOpts","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","diagnostic","diagnosticLogger","reloadOnDisconnect","isCoinbaseWallet","overrideIsCoinbaseWallet","isCoinbaseBrowser","overrideIsCoinbaseBrowser","qrUrl","supportsAddressSwitching","isLedger","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","LOCAL_STORAGE_ADDRESSES_KEY","addresses","split","map","address","ensureAddressString","events","on","notification","type","method","data","params","length","initializeRelay","window","addEventListener","event","origin","location","source","action","_chainId","Number","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setItem","disableReloadOnDisconnect","originalChainId","chainChanged","ensureIntNumber","watchAsset","symbol","decimals","image","relay","result","promise","addEthereumChain","rpcUrls","blockExplorerUrls","chainName","iconUrls","nativeCurrency","isWhitelistedNetworkOrStandalone","inlineAddEthereumChain","_isAuthorized","requestEthereumAccounts","res","isApproved","switchEthereumChain","errorCode","ethErrors","provider","custom","code","switchResponse","rpcUrl","appName","appLogoUrl","then","log","EVENTS","ETH_ACCOUNTS_STATE","addresses_length","sessionIdHash","Session","hash","session","id","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","_sendRequestAsync","callback","requests","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","selectProvider","providerOptions","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","isDisconnect","newAddresses","JSON","stringify","join","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","cbWallet_arbitrary","_cbwallet_arbitrary","wallet_addEthereumChain","_wallet_addEthereumChain","wallet_switchEthereumChain","_wallet_switchEthereumChain","wallet_watchAsset","_wallet_watchAsset","makeEthereumJSONRPCRequest","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","addressStr","lowercaseAddresses","includes","_ensureKnownAddress","UNKNOWN_ADDRESS_ENCOUNTERED","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","_c","_d","error","trim","chainIdNumber","success","invalidParams","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","accounts","setChainCallback","setDappDefaultChainCallback"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@coinbase/wallet-sdk/dist/provider/CoinbaseWalletProvider.js"],"sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2022 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoinbaseWalletProvider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst DiagnosticLogger_1 = require(\"../connection/DiagnosticLogger\");\nconst Session_1 = require(\"../relay/Session\");\nconst WalletSDKRelayAbstract_1 = require(\"../relay/WalletSDKRelayAbstract\");\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\nclass CoinbaseWalletProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        var _a, _b;\n        super();\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this._send = this.send.bind(this);\n        this._sendAsync = this.sendAsync.bind(this);\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.genericRequest = this.genericRequest.bind(this);\n        this._chainIdFromOpts = options.chainId;\n        this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        this.diagnostic = options.diagnosticLogger;\n        this.reloadOnDisconnect = true;\n        this.isCoinbaseWallet = (_a = options.overrideIsCoinbaseWallet) !== null && _a !== void 0 ? _a : true;\n        this.isCoinbaseBrowser = (_b = options.overrideIsCoinbaseBrowser) !== null && _b !== void 0 ? _b : false;\n        this.qrUrl = options.qrUrl;\n        this.supportsAddressSwitching = options.supportsAddressSwitching;\n        this.isLedger = options.isLedger;\n        const chainId = this.getChainId();\n        const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params,\n            });\n        });\n        if (this._addresses.length > 0) {\n            void this.initializeRelay();\n        }\n        window.addEventListener(\"message\", event => {\n            var _a;\n            // Used to verify the source and window are correct before proceeding\n            if (event.origin !== location.origin || event.source !== window) {\n                return;\n            }\n            if (event.data.type !== \"walletLinkMessage\")\n                return; // compatibility with CBW extension\n            if (event.data.data.action === \"defaultChainChanged\" ||\n                event.data.data.action === \"dappChainSwitched\") {\n                const _chainId = event.data.data.chainId;\n                const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n                this.updateProviderInfo(jsonRpcUrl, Number(_chainId));\n            }\n            if (event.data.data.action === \"addressChanged\") {\n                this._setAddresses([event.data.data.address]);\n            }\n        });\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    get chainId() {\n        return (0, util_1.prepend0x)(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        // backward compatibility\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this.jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    get jsonRpcUrl() {\n        var _a;\n        return ((_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts);\n    }\n    set jsonRpcUrl(value) {\n        this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n    }\n    disableReloadOnDisconnect() {\n        this.reloadOnDisconnect = false;\n    }\n    /**\n     * this function is called when coinbase provider is being injected to a dapp\n     * standalone + walletlinked extension, ledger, in-app browser using cipher-web-view\n     */\n    setProviderInfo(jsonRpcUrl, chainId) {\n        // extension tend to use the chianId from the dapp, while in-app browser and ledger overrides the default network\n        if (!(this.isLedger || this.isCoinbaseBrowser)) {\n            this._chainIdFromOpts = chainId;\n            this._jsonRpcUrlFromOpts = jsonRpcUrl;\n        }\n        this.updateProviderInfo(this.jsonRpcUrl, this.getChainId());\n    }\n    updateProviderInfo(jsonRpcUrl, chainId) {\n        this.jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async watchAsset(type, address, symbol, decimals, image, chainId) {\n        const relay = await this.initializeRelay();\n        const result = await relay.watchAsset(type, address, symbol, decimals, image, chainId === null || chainId === void 0 ? void 0 : chainId.toString()).promise;\n        return !!result.result;\n    }\n    async addEthereumChain(chainId, rpcUrls, blockExplorerUrls, chainName, iconUrls, nativeCurrency) {\n        var _a, _b;\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return false;\n        }\n        const relay = await this.initializeRelay();\n        const isWhitelistedNetworkOrStandalone = relay.inlineAddEthereumChain(chainId.toString());\n        if (!this._isAuthorized() && !isWhitelistedNetworkOrStandalone) {\n            await relay.requestEthereumAccounts().promise;\n        }\n        const res = await relay.addEthereumChain(chainId.toString(), rpcUrls, iconUrls, blockExplorerUrls, chainName, nativeCurrency).promise;\n        if (((_a = res.result) === null || _a === void 0 ? void 0 : _a.isApproved) === true) {\n            this.updateProviderInfo(rpcUrls[0], chainId);\n        }\n        return ((_b = res.result) === null || _b === void 0 ? void 0 : _b.isApproved) === true;\n    }\n    async switchEthereumChain(chainId) {\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10), this.selectedAddress || undefined).promise;\n        if (res.errorCode) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: res.errorCode,\n            });\n        }\n        const switchResponse = res.result;\n        if (switchResponse.isApproved && switchResponse.rpcUrl.length > 0) {\n            this.updateProviderInfo(switchResponse.rpcUrl, chainId);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        void this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::enable\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return [...this._addresses];\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    async close() {\n        const relay = await this.initializeRelay();\n        relay.resetAndReload();\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params,\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    async sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        return this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args,\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args,\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args,\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // Coinbase Wallet Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id,\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async genericRequest(data, action) {\n        const relay = await this.initializeRelay();\n        const res = await relay.genericRequest(data, action).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async selectProvider(providerOptions) {\n        const relay = await this.initializeRelay();\n        const res = await relay.selectProvider(providerOptions).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id,\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`Coinbase Wallet does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses, isDisconnect) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        if (this._addresses.length > 0 &&\n            this.supportsAddressSwitching === false &&\n            !isDisconnect) {\n            /**\n             * The extension currently doesn't support switching selected wallet index\n             * make sure walletlink doesn't update it's address in this case\n             */\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(WalletSDKRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult,\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result,\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => res && resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    async _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.cbWallet_arbitrary:\n                return this._cbwallet_arbitrary(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n                return this._wallet_addEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n                return this._wallet_switchEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_watchAsset:\n                return this._wallet_watchAsset(params);\n        }\n        const relay = await this.initializeRelay();\n        return relay.makeEthereumJSONRPCRequest(request, this.jsonRpcUrl);\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const addressStr = (0, util_1.ensureAddressString)(addressString);\n            const lowercaseAddresses = this._addresses.map(address => (0, util_1.ensureAddressString)(address));\n            return lowercaseAddresses.includes(addressStr);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        var _a;\n        if (!this._isKnownAddress(addressString)) {\n            (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.UNKNOWN_ADDRESS_ENCOUNTERED);\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? (0, util_1.ensureAddressString)(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n        const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null\n            ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas)\n            : null;\n        const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n        const chainId = this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId,\n        };\n    }\n    _isAuthorized() {\n        return this._addresses.length > 0;\n    }\n    _requireAuthorization() {\n        if (!this._isAuthorized()) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return [...this._addresses];\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY);\n        if (!chainIdStr) {\n            return (0, util_1.ensureIntNumber)(this._chainIdFromOpts);\n        }\n        const chainId = parseInt(chainIdStr, 10);\n        return (0, util_1.ensureIntNumber)(chainId);\n    }\n    async _eth_requestAccounts() {\n        var _a;\n        (_a = this.diagnostic) === null || _a === void 0 ? void 0 : _a.log(DiagnosticLogger_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::_eth_requestAccounts\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay\n                ? Session_1.Session.hash(this._relay.session.id)\n                : undefined,\n        });\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses,\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts().promise;\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        if (!(this.isLedger || this.isCoinbaseBrowser)) {\n            await this.switchEthereumChain(this.getChainId());\n        }\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const message = (0, util_1.ensureBuffer)(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    /** @deprecated */\n    async _cbwallet_arbitrary(params) {\n        const action = params[0];\n        const data = params[1];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        if (typeof action !== \"object\" || action === null) {\n            throw new Error(\"parameter must be an object\");\n        }\n        const result = await this.genericRequest(action, data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        var _a, _b, _c, _d;\n        const request = params[0];\n        if (((_a = request.rpcUrls) === null || _a === void 0 ? void 0 : _a.length) === 0) {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `please pass in at least 1 rpcUrl` },\n            };\n        }\n        if (!request.chainName || request.chainName.trim() === \"\") {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"chainName is a required field\",\n            });\n        }\n        if (!request.nativeCurrency) {\n            throw eth_rpc_errors_1.ethErrors.provider.custom({\n                code: 0,\n                message: \"nativeCurrency is a required field\",\n            });\n        }\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const success = await this.addEthereumChain(chainIdNumber, (_b = request.rpcUrls) !== null && _b !== void 0 ? _b : [], (_c = request.blockExplorerUrls) !== null && _c !== void 0 ? _c : [], request.chainName, (_d = request.iconUrls) !== null && _d !== void 0 ? _d : [], request.nativeCurrency);\n        if (success) {\n            return { jsonrpc: \"2.0\", id: 0, result: null };\n        }\n        else {\n            return {\n                jsonrpc: \"2.0\",\n                id: 0,\n                error: { code: 2, message: `unable to add ethereum chain` },\n            };\n        }\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = params[0];\n        await this.switchEthereumChain(parseInt(request.chainId, 16));\n        return { jsonrpc: \"2.0\", id: 0, result: null };\n    }\n    async _wallet_watchAsset(params) {\n        const request = (Array.isArray(params) ? params[0] : params);\n        if (!request.type) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Type is required\",\n            });\n        }\n        if ((request === null || request === void 0 ? void 0 : request.type) !== \"ERC20\") {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: `Asset of type '${request.type}' is not supported`,\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Options are required\",\n            });\n        }\n        if (!(request === null || request === void 0 ? void 0 : request.options.address)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: \"Address is required\",\n            });\n        }\n        const chainId = this.getChainId();\n        const { address, symbol, image, decimals } = request.options;\n        const res = await this.watchAsset(request.type, address, symbol, decimals, image, chainId);\n        return { jsonrpc: \"2.0\", id: 0, result: res };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setAccountsCallback((accounts, isDisconnect) => this._setAddresses(accounts, isDisconnect));\n            relay.setChainCallback((chainId, jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10));\n            });\n            relay.setDappDefaultChainCallback(this._chainIdFromOpts);\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.CoinbaseWalletProvider = CoinbaseWalletProvider;\n"],"mappings":"AAAA,a,CACA;AACA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,MAAMC,oBAAoB,GAAGR,eAAe,CAACS,OAAO,CAAC,8BAAD,CAAR,CAA5C;;AACA,MAAMC,OAAO,GAAGV,eAAe,CAACS,OAAO,CAAC,OAAD,CAAR,CAA/B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,gBAAD,CAAhC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,gCAAD,CAAlC;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMK,wBAAwB,GAAGL,OAAO,CAAC,iCAAD,CAAxC;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMO,iBAAiB,GAAGhB,eAAe,CAACS,OAAO,CAAC,8BAAD,CAAR,CAAzC;;AACA,MAAMQ,gBAAgB,GAAGR,OAAO,CAAC,kBAAD,CAAhC;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMU,qBAAqB,GAAGV,OAAO,CAAC,uBAAD,CAArC;;AACA,MAAMW,oBAAoB,GAAG,gBAA7B;AACA,MAAMC,oBAAoB,GAAG,mBAA7B;;AACA,MAAMd,sBAAN,SAAqCC,oBAAoB,CAACc,OAA1D,CAAkE;EAC9DC,WAAW,CAACC,OAAD,EAAU;IACjB,IAAIC,EAAJ,EAAQC,EAAR;;IACA;IACA,KAAKC,eAAL,GAAuB,IAAIV,gBAAgB,CAACW,cAArB,CAAoC,IAApC,CAAvB;IACA,KAAKC,oBAAL,GAA4B,IAAIV,qBAAqB,CAACW,mBAA1B,CAA8C,IAA9C,CAA5B;IACA,KAAKC,MAAL,GAAc,IAAd;IACA,KAAKC,UAAL,GAAkB,EAAlB;IACA,KAAKC,gCAAL,GAAwC,KAAxC;IACA,KAAKC,KAAL,GAAa,KAAKC,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAb;IACA,KAAKC,UAAL,GAAkB,KAAKC,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAlB;IACA,KAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;IACA,KAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBJ,IAAxB,CAA6B,IAA7B,CAA1B;IACA,KAAKK,UAAL,GAAkB,KAAKA,UAAL,CAAgBL,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKM,UAAL,GAAkB,KAAKA,UAAL,CAAgBN,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKO,MAAL,GAAc,KAAKA,MAAL,CAAYP,IAAZ,CAAiB,IAAjB,CAAd;IACA,KAAKQ,KAAL,GAAa,KAAKA,KAAL,CAAWR,IAAX,CAAgB,IAAhB,CAAb;IACA,KAAKD,IAAL,GAAY,KAAKA,IAAL,CAAUC,IAAV,CAAe,IAAf,CAAZ;IACA,KAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;IACA,KAAKS,OAAL,GAAe,KAAKA,OAAL,CAAaT,IAAb,CAAkB,IAAlB,CAAf;IACA,KAAKU,aAAL,GAAqB,KAAKA,aAAL,CAAmBV,IAAnB,CAAwB,IAAxB,CAArB;IACA,KAAKW,UAAL,GAAkB,KAAKA,UAAL,CAAgBX,IAAhB,CAAqB,IAArB,CAAlB;IACA,KAAKY,cAAL,GAAsB,KAAKA,cAAL,CAAoBZ,IAApB,CAAyB,IAAzB,CAAtB;IACA,KAAKa,gBAAL,GAAwBzB,OAAO,CAAC0B,OAAhC;IACA,KAAKC,mBAAL,GAA2B3B,OAAO,CAAC4B,UAAnC;IACA,KAAKC,mBAAL,GAA2B7B,OAAO,CAAC8B,kBAAnC;IACA,KAAKC,cAAL,GAAsB/B,OAAO,CAACgC,aAA9B;IACA,KAAKC,QAAL,GAAgBjC,OAAO,CAACkC,OAAxB;IACA,KAAKC,kBAAL,GAA0BnC,OAAO,CAACoC,iBAAlC;IACA,KAAKC,UAAL,GAAkBrC,OAAO,CAACsC,gBAA1B;IACA,KAAKC,kBAAL,GAA0B,IAA1B;IACA,KAAKC,gBAAL,GAAwB,CAACvC,EAAE,GAAGD,OAAO,CAACyC,wBAAd,MAA4C,IAA5C,IAAoDxC,EAAE,KAAK,KAAK,CAAhE,GAAoEA,EAApE,GAAyE,IAAjG;IACA,KAAKyC,iBAAL,GAAyB,CAACxC,EAAE,GAAGF,OAAO,CAAC2C,yBAAd,MAA6C,IAA7C,IAAqDzC,EAAE,KAAK,KAAK,CAAjE,GAAqEA,EAArE,GAA0E,KAAnG;IACA,KAAK0C,KAAL,GAAa5C,OAAO,CAAC4C,KAArB;IACA,KAAKC,wBAAL,GAAgC7C,OAAO,CAAC6C,wBAAxC;IACA,KAAKC,QAAL,GAAgB9C,OAAO,CAAC8C,QAAxB;IACA,MAAMpB,OAAO,GAAG,KAAKT,UAAL,EAAhB;IACA,MAAM8B,UAAU,GAAG,CAAC,GAAGxD,MAAM,CAACyD,SAAX,EAAsBtB,OAAO,CAACuB,QAAR,CAAiB,EAAjB,CAAtB,CAAnB,CApCiB,CAqCjB;;IACA,KAAKC,IAAL,CAAU,SAAV,EAAqB;MAAEH;IAAF,CAArB;;IACA,MAAMI,eAAe,GAAG,KAAKlB,QAAL,CAAcmB,OAAd,CAAsB9D,wBAAwB,CAAC+D,2BAA/C,CAAxB;;IACA,IAAIF,eAAJ,EAAqB;MACjB,MAAMG,SAAS,GAAGH,eAAe,CAACI,KAAhB,CAAsB,GAAtB,CAAlB;;MACA,IAAID,SAAS,CAAC,CAAD,CAAT,KAAiB,EAArB,EAAyB;QACrB,KAAK9C,UAAL,GAAkB8C,SAAS,CAACE,GAAV,CAAcC,OAAO,IAAI,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCD,OAAhC,CAAzB,CAAlB;QACA,KAAKP,IAAL,CAAU,iBAAV,EAA6BI,SAA7B;MACH;IACJ;;IACD,KAAKjD,oBAAL,CAA0BsD,MAA1B,CAAiCC,EAAjC,CAAoC,cAApC,EAAqDC,YAAD,IAAkB;MAClE,KAAKX,IAAL,CAAU,SAAV,EAAqB;QACjBY,IAAI,EAAED,YAAY,CAACE,MADF;QAEjBC,IAAI,EAAEH,YAAY,CAACI;MAFF,CAArB;IAIH,CALD;;IAMA,IAAI,KAAKzD,UAAL,CAAgB0D,MAAhB,GAAyB,CAA7B,EAAgC;MAC5B,KAAK,KAAKC,eAAL,EAAL;IACH;;IACDC,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,KAAK,IAAI;MACxC,IAAIrE,EAAJ,CADwC,CAExC;;;MACA,IAAIqE,KAAK,CAACC,MAAN,KAAiBC,QAAQ,CAACD,MAA1B,IAAoCD,KAAK,CAACG,MAAN,KAAiBL,MAAzD,EAAiE;QAC7D;MACH;;MACD,IAAIE,KAAK,CAACN,IAAN,CAAWF,IAAX,KAAoB,mBAAxB,EACI,OAPoC,CAO5B;;MACZ,IAAIQ,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBU,MAAhB,KAA2B,qBAA3B,IACAJ,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBU,MAAhB,KAA2B,mBAD/B,EACoD;QAChD,MAAMC,QAAQ,GAAGL,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBtC,OAAjC;QACA,MAAME,UAAU,GAAG,CAAC3B,EAAE,GAAGqE,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBpC,UAAtB,MAAsC,IAAtC,IAA8C3B,EAAE,KAAK,KAAK,CAA1D,GAA8DA,EAA9D,GAAmE,KAAK2B,UAA3F;QACA,KAAKZ,kBAAL,CAAwBY,UAAxB,EAAoCgD,MAAM,CAACD,QAAD,CAA1C;MACH;;MACD,IAAIL,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBU,MAAhB,KAA2B,gBAA/B,EAAiD;QAC7C,KAAKpD,aAAL,CAAmB,CAACgD,KAAK,CAACN,IAAN,CAAWA,IAAX,CAAgBP,OAAjB,CAAnB;MACH;IACJ,CAjBD;EAkBH;;EACkB,IAAfoB,eAAe,GAAG;IAClB,OAAO,KAAKrE,UAAL,CAAgB,CAAhB,KAAsBsE,SAA7B;EACH;;EACiB,IAAdC,cAAc,GAAG;IACjB,OAAO,KAAK9D,UAAL,GAAkBgC,QAAlB,CAA2B,EAA3B,CAAP;EACH;;EACU,IAAPvB,OAAO,GAAG;IACV,OAAO,CAAC,GAAGnC,MAAM,CAACyD,SAAX,EAAsB,KAAK/B,UAAL,GAAkBgC,QAAlB,CAA2B,EAA3B,CAAtB,CAAP;EACH;;EACe,IAAZ+B,YAAY,GAAG;IACf;IACA,OAAO,IAAP;EACH;EACD;AACJ;AACA;AACA;;;EACkB,IAAVC,UAAU,GAAG;IACb,OAAO,KAAKpD,mBAAZ;EACH;;EACO,IAAJqD,IAAI,GAAG;IACP,OAAO,KAAKtD,UAAZ;EACH;;EACY,IAATuD,SAAS,GAAG;IACZ,OAAO,IAAP;EACH;;EACDC,WAAW,GAAG;IACV,OAAO,IAAP;EACH;;EACa,IAAVxD,UAAU,GAAG;IACb,IAAI3B,EAAJ;;IACA,OAAQ,CAACA,EAAE,GAAG,KAAKgC,QAAL,CAAcmB,OAAd,CAAsBvD,oBAAtB,CAAN,MAAuD,IAAvD,IAA+DI,EAAE,KAAK,KAAK,CAA3E,GAA+EA,EAA/E,GAAoF,KAAK0B,mBAAjG;EACH;;EACa,IAAVC,UAAU,CAAC9C,KAAD,EAAQ;IAClB,KAAKmD,QAAL,CAAcoD,OAAd,CAAsBxF,oBAAtB,EAA4Cf,KAA5C;EACH;;EACDwG,yBAAyB,GAAG;IACxB,KAAK/C,kBAAL,GAA0B,KAA1B;EACH;EACD;AACJ;AACA;AACA;;;EACIxB,eAAe,CAACa,UAAD,EAAaF,OAAb,EAAsB;IACjC;IACA,IAAI,EAAE,KAAKoB,QAAL,IAAiB,KAAKJ,iBAAxB,CAAJ,EAAgD;MAC5C,KAAKjB,gBAAL,GAAwBC,OAAxB;MACA,KAAKC,mBAAL,GAA2BC,UAA3B;IACH;;IACD,KAAKZ,kBAAL,CAAwB,KAAKY,UAA7B,EAAyC,KAAKX,UAAL,EAAzC;EACH;;EACDD,kBAAkB,CAACY,UAAD,EAAaF,OAAb,EAAsB;IACpC,KAAKE,UAAL,GAAkBA,UAAlB,CADoC,CAEpC;;IACA,MAAM2D,eAAe,GAAG,KAAKtE,UAAL,EAAxB;;IACA,KAAKgB,QAAL,CAAcoD,OAAd,CAAsBzF,oBAAtB,EAA4C8B,OAAO,CAACuB,QAAR,CAAiB,EAAjB,CAA5C;;IACA,MAAMuC,YAAY,GAAG,CAAC,GAAGjG,MAAM,CAACkG,eAAX,EAA4B/D,OAA5B,MAAyC6D,eAA9D;;IACA,IAAIC,YAAY,IAAI,CAAC,KAAK/E,gCAA1B,EAA4D;MACxD,KAAKyC,IAAL,CAAU,cAAV,EAA0B,KAAKjC,UAAL,EAA1B;MACA,KAAKR,gCAAL,GAAwC,IAAxC;IACH;EACJ;;EACe,MAAViF,UAAU,CAAC5B,IAAD,EAAOL,OAAP,EAAgBkC,MAAhB,EAAwBC,QAAxB,EAAkCC,KAAlC,EAAyCnE,OAAzC,EAAkD;IAC9D,MAAMoE,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAM4B,MAAM,GAAG,MAAMD,KAAK,CAACJ,UAAN,CAAiB5B,IAAjB,EAAuBL,OAAvB,EAAgCkC,MAAhC,EAAwCC,QAAxC,EAAkDC,KAAlD,EAAyDnE,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACuB,QAAR,EAA3G,EAA+H+C,OAApJ;IACA,OAAO,CAAC,CAACD,MAAM,CAACA,MAAhB;EACH;;EACqB,MAAhBE,gBAAgB,CAACvE,OAAD,EAAUwE,OAAV,EAAmBC,iBAAnB,EAAsCC,SAAtC,EAAiDC,QAAjD,EAA2DC,cAA3D,EAA2E;IAC7F,IAAIrG,EAAJ,EAAQC,EAAR;;IACA,IAAI,CAAC,GAAGX,MAAM,CAACkG,eAAX,EAA4B/D,OAA5B,MAAyC,KAAKT,UAAL,EAA7C,EAAgE;MAC5D,OAAO,KAAP;IACH;;IACD,MAAM6E,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMoC,gCAAgC,GAAGT,KAAK,CAACU,sBAAN,CAA6B9E,OAAO,CAACuB,QAAR,EAA7B,CAAzC;;IACA,IAAI,CAAC,KAAKwD,aAAL,EAAD,IAAyB,CAACF,gCAA9B,EAAgE;MAC5D,MAAMT,KAAK,CAACY,uBAAN,GAAgCV,OAAtC;IACH;;IACD,MAAMW,GAAG,GAAG,MAAMb,KAAK,CAACG,gBAAN,CAAuBvE,OAAO,CAACuB,QAAR,EAAvB,EAA2CiD,OAA3C,EAAoDG,QAApD,EAA8DF,iBAA9D,EAAiFC,SAAjF,EAA4FE,cAA5F,EAA4GN,OAA9H;;IACA,IAAI,CAAC,CAAC/F,EAAE,GAAG0G,GAAG,CAACZ,MAAV,MAAsB,IAAtB,IAA8B9F,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAAC2G,UAA3D,MAA2E,IAA/E,EAAqF;MACjF,KAAK5F,kBAAL,CAAwBkF,OAAO,CAAC,CAAD,CAA/B,EAAoCxE,OAApC;IACH;;IACD,OAAO,CAAC,CAACxB,EAAE,GAAGyG,GAAG,CAACZ,MAAV,MAAsB,IAAtB,IAA8B7F,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAAC0G,UAA3D,MAA2E,IAAlF;EACH;;EACwB,MAAnBC,mBAAmB,CAACnF,OAAD,EAAU;IAC/B,MAAMoE,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACe,mBAAN,CAA0BnF,OAAO,CAACuB,QAAR,CAAiB,EAAjB,CAA1B,EAAgD,KAAK4B,eAAL,IAAwBC,SAAxE,EAAmFkB,OAArG;;IACA,IAAIW,GAAG,CAACG,SAAR,EAAmB;MACf,MAAM3H,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoCC,MAApC,CAA2C;QAC7CC,IAAI,EAAEP,GAAG,CAACG;MADmC,CAA3C,CAAN;IAGH;;IACD,MAAMK,cAAc,GAAGR,GAAG,CAACZ,MAA3B;;IACA,IAAIoB,cAAc,CAACP,UAAf,IAA6BO,cAAc,CAACC,MAAf,CAAsBlD,MAAtB,GAA+B,CAAhE,EAAmE;MAC/D,KAAKlD,kBAAL,CAAwBmG,cAAc,CAACC,MAAvC,EAA+C1F,OAA/C;IACH;EACJ;;EACDR,UAAU,CAACmG,OAAD,EAAUC,UAAV,EAAsB;IAC5B,KAAK,KAAKnD,eAAL,GAAuBoD,IAAvB,CAA4BzB,KAAK,IAAIA,KAAK,CAAC5E,UAAN,CAAiBmG,OAAjB,EAA0BC,UAA1B,CAArC,CAAL;EACH;;EACW,MAANnG,MAAM,GAAG;IACX,IAAIlB,EAAJ;;IACA,CAACA,EAAE,GAAG,KAAKoC,UAAX,MAA2B,IAA3B,IAAmCpC,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACuH,GAAH,CAAOpI,kBAAkB,CAACqI,MAAnB,CAA0BC,kBAAjC,EAAqD;MAC7G3D,MAAM,EAAE,kBADqG;MAE7G4D,gBAAgB,EAAE,KAAKnH,UAAL,CAAgB0D,MAF2E;MAG7G0D,aAAa,EAAE,KAAKrH,MAAL,GACTlB,SAAS,CAACwI,OAAV,CAAkBC,IAAlB,CAAuB,KAAKvH,MAAL,CAAYwH,OAAZ,CAAoBC,EAA3C,CADS,GAETlD;IALuG,CAArD,CAA5D;;IAOA,IAAI,KAAKtE,UAAL,CAAgB0D,MAAhB,GAAyB,CAA7B,EAAgC;MAC5B,OAAO,CAAC,GAAG,KAAK1D,UAAT,CAAP;IACH;;IACD,OAAO,MAAM,KAAKE,KAAL,CAAWhB,SAAS,CAACuI,aAAV,CAAwBC,mBAAnC,CAAb;EACH;;EACU,MAAL9G,KAAK,GAAG;IACV,MAAM0E,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA2B,KAAK,CAACqC,cAAN;EACH;;EACDxH,IAAI,CAACyH,eAAD,EAAkBC,gBAAlB,EAAoC;IACpC;IACA,IAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;MACrC,MAAMrE,MAAM,GAAGqE,eAAf;MACA,MAAMnE,MAAM,GAAGqE,KAAK,CAACC,OAAN,CAAcF,gBAAd,IACTA,gBADS,GAETA,gBAAgB,KAAKvD,SAArB,GACI,CAACuD,gBAAD,CADJ,GAEI,EAJV;MAKA,MAAMhH,OAAO,GAAG;QACZmH,OAAO,EAAE,KADG;QAEZR,EAAE,EAAE,CAFQ;QAGZjE,MAHY;QAIZE;MAJY,CAAhB;MAMA,OAAO,KAAKwE,iBAAL,CAAuBpH,OAAvB,EAAgCkG,IAAhC,CAAqCZ,GAAG,IAAIA,GAAG,CAACZ,MAAhD,CAAP;IACH,CAhBmC,CAiBpC;;;IACA,IAAI,OAAOsC,gBAAP,KAA4B,UAAhC,EAA4C;MACxC,MAAMhH,OAAO,GAAG+G,eAAhB;MACA,MAAMM,QAAQ,GAAGL,gBAAjB;MACA,OAAO,KAAKxH,UAAL,CAAgBQ,OAAhB,EAAyBqH,QAAzB,CAAP;IACH,CAtBmC,CAuBpC;;;IACA,IAAIJ,KAAK,CAACC,OAAN,CAAcH,eAAd,CAAJ,EAAoC;MAChC,MAAMO,QAAQ,GAAGP,eAAjB;MACA,OAAOO,QAAQ,CAACnF,GAAT,CAAaoF,CAAC,IAAI,KAAKC,YAAL,CAAkBD,CAAlB,CAAlB,CAAP;IACH,CA3BmC,CA4BpC;;;IACA,MAAME,GAAG,GAAGV,eAAZ;IACA,OAAO,KAAKS,YAAL,CAAkBC,GAAlB,CAAP;EACH;;EACc,MAAThI,SAAS,CAACO,OAAD,EAAUqH,QAAV,EAAoB;IAC/B,IAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;MAChC,MAAM,IAAIK,KAAJ,CAAU,sBAAV,CAAN;IACH,CAH8B,CAI/B;;;IACA,IAAIT,KAAK,CAACC,OAAN,CAAclH,OAAd,CAAJ,EAA4B;MACxB,MAAM2H,OAAO,GAAGN,QAAhB;;MACA,KAAKO,0BAAL,CAAgC5H,OAAhC,EACKkG,IADL,CACU2B,SAAS,IAAIF,OAAO,CAAC,IAAD,EAAOE,SAAP,CAD9B,EAEKC,KAFL,CAEWC,GAAG,IAAIJ,OAAO,CAACI,GAAD,EAAM,IAAN,CAFzB;;MAGA;IACH,CAX8B,CAY/B;;;IACA,MAAMC,EAAE,GAAGX,QAAX;IACA,OAAO,KAAKD,iBAAL,CAAuBpH,OAAvB,EACFkG,IADE,CACG+B,QAAQ,IAAID,EAAE,CAAC,IAAD,EAAOC,QAAP,CADjB,EAEFH,KAFE,CAEIC,GAAG,IAAIC,EAAE,CAACD,GAAD,EAAM,IAAN,CAFb,CAAP;EAGH;;EACY,MAAP/H,OAAO,CAACkI,IAAD,EAAO;IAChB,IAAI,CAACA,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAAzB,IAAqCjB,KAAK,CAACC,OAAN,CAAcgB,IAAd,CAAzC,EAA8D;MAC1D,MAAMpK,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+BC,cAA/B,CAA8C;QAChDC,OAAO,EAAE,gDADuC;QAEhD1F,IAAI,EAAEuF;MAF0C,CAA9C,CAAN;IAIH;;IACD,MAAM;MAAExF,MAAF;MAAUE;IAAV,IAAqBsF,IAA3B;;IACA,IAAI,OAAOxF,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,CAACG,MAAP,KAAkB,CAApD,EAAuD;MACnD,MAAM/E,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+BC,cAA/B,CAA8C;QAChDC,OAAO,EAAE,2CADuC;QAEhD1F,IAAI,EAAEuF;MAF0C,CAA9C,CAAN;IAIH;;IACD,IAAItF,MAAM,KAAKa,SAAX,IACA,CAACwD,KAAK,CAACC,OAAN,CAActE,MAAd,CADD,KAEC,OAAOA,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAF1C,CAAJ,EAEqD;MACjD,MAAM9E,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+BC,cAA/B,CAA8C;QAChDC,OAAO,EAAE,uDADuC;QAEhD1F,IAAI,EAAEuF;MAF0C,CAA9C,CAAN;IAIH;;IACD,MAAMI,SAAS,GAAG1F,MAAM,KAAKa,SAAX,GAAuB,EAAvB,GAA4Bb,MAA9C,CAtBgB,CAuBhB;;IACA,MAAM+D,EAAE,GAAG,KAAK7F,kBAAL,CAAwByH,aAAxB,EAAX;;IACA,MAAM7D,MAAM,GAAG,MAAM,KAAK0C,iBAAL,CAAuB;MACxC1E,MADwC;MAExCE,MAAM,EAAE0F,SAFgC;MAGxCnB,OAAO,EAAE,KAH+B;MAIxCR;IAJwC,CAAvB,CAArB;IAMA,OAAOjC,MAAM,CAACA,MAAd;EACH;;EACe,MAAVxE,UAAU,CAACsI,KAAD,EAAQ;IACpB,MAAM/D,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACvE,UAAN,CAAiB,CAAC,GAAGhC,MAAM,CAACuK,kBAAX,EAA+BD,KAA/B,CAAjB,EAAwD7D,OAA1E;;IACA,IAAI,OAAOW,GAAG,CAACZ,MAAX,KAAsB,QAA1B,EAAoC;MAChC,MAAM,IAAIgD,KAAJ,CAAU,yBAAV,CAAN;IACH;;IACD,OAAOpC,GAAG,CAACZ,MAAX;EACH;;EACmB,MAAdvE,cAAc,CAACwC,IAAD,EAAOU,MAAP,EAAe;IAC/B,MAAMoB,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACtE,cAAN,CAAqBwC,IAArB,EAA2BU,MAA3B,EAAmCsB,OAArD;;IACA,IAAI,OAAOW,GAAG,CAACZ,MAAX,KAAsB,QAA1B,EAAoC;MAChC,MAAM,IAAIgD,KAAJ,CAAU,yBAAV,CAAN;IACH;;IACD,OAAOpC,GAAG,CAACZ,MAAX;EACH;;EACmB,MAAdgE,cAAc,CAACC,eAAD,EAAkB;IAClC,MAAMlE,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACiE,cAAN,CAAqBC,eAArB,EAAsChE,OAAxD;;IACA,IAAI,OAAOW,GAAG,CAACZ,MAAX,KAAsB,QAA1B,EAAoC;MAChC,MAAM,IAAIgD,KAAJ,CAAU,yBAAV,CAAN;IACH;;IACD,OAAOpC,GAAG,CAACZ,MAAX;EACH;;EACDkE,qBAAqB,GAAG;IACpB,OAAO,KAAP;EACH;;EACDC,SAAS,GAAG;IACR,MAAM,IAAInB,KAAJ,CAAU,iCAAV,CAAN;EACH;;EACDoB,WAAW,GAAG;IACV,MAAM,IAAIpB,KAAJ,CAAU,iCAAV,CAAN;EACH;;EACDqB,UAAU,GAAG;IACT,OAAO,IAAP;EACH;;EACDvB,YAAY,CAACxH,OAAD,EAAU;IAClB,MAAMiI,QAAQ,GAAG;MACbd,OAAO,EAAE,KADI;MAEbR,EAAE,EAAE3G,OAAO,CAAC2G;IAFC,CAAjB;IAIA,MAAM;MAAEjE;IAAF,IAAa1C,OAAnB;IACAiI,QAAQ,CAACvD,MAAT,GAAkB,KAAKsE,yBAAL,CAA+BhJ,OAA/B,CAAlB;;IACA,IAAIiI,QAAQ,CAACvD,MAAT,KAAoBjB,SAAxB,EAAmC;MAC/B,MAAM,IAAIiE,KAAJ,CAAW,4CAA2ChF,MAAO,yBAAnD,GACX,2DAA0DA,MAAO,GADtD,GAEX,iBAFC,CAAN;IAGH;;IACD,OAAOuF,QAAP;EACH;;EACDhI,aAAa,CAACgC,SAAD,EAAYgH,YAAZ,EAA0B;IACnC,IAAI,CAAChC,KAAK,CAACC,OAAN,CAAcjF,SAAd,CAAL,EAA+B;MAC3B,MAAM,IAAIyF,KAAJ,CAAU,2BAAV,CAAN;IACH;;IACD,MAAMwB,YAAY,GAAGjH,SAAS,CAACE,GAAV,CAAcC,OAAO,IAAI,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCD,OAAhC,CAAzB,CAArB;;IACA,IAAI+G,IAAI,CAACC,SAAL,CAAeF,YAAf,MAAiCC,IAAI,CAACC,SAAL,CAAe,KAAKjK,UAApB,CAArC,EAAsE;MAClE;IACH;;IACD,IAAI,KAAKA,UAAL,CAAgB0D,MAAhB,GAAyB,CAAzB,IACA,KAAKrB,wBAAL,KAAkC,KADlC,IAEA,CAACyH,YAFL,EAEmB;MACf;AACZ;AACA;AACA;MACY;IACH;;IACD,KAAK9J,UAAL,GAAkB+J,YAAlB;IACA,KAAKrH,IAAL,CAAU,iBAAV,EAA6B,KAAK1C,UAAlC;;IACA,KAAKyB,QAAL,CAAcoD,OAAd,CAAsB/F,wBAAwB,CAAC+D,2BAA/C,EAA4EkH,YAAY,CAACG,IAAb,CAAkB,GAAlB,CAA5E;EACH;;EACDjC,iBAAiB,CAACpH,OAAD,EAAU;IACvB,OAAO,IAAIsJ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACpC,IAAI;QACA,MAAMC,UAAU,GAAG,KAAKT,yBAAL,CAA+BhJ,OAA/B,CAAnB;;QACA,IAAIyJ,UAAU,KAAKhG,SAAnB,EAA8B;UAC1B,OAAO8F,OAAO,CAAC;YACXpC,OAAO,EAAE,KADE;YAEXR,EAAE,EAAE3G,OAAO,CAAC2G,EAFD;YAGXjC,MAAM,EAAE+E;UAHG,CAAD,CAAd;QAKH;;QACD,MAAMC,aAAa,GAAG,KAAKC,gCAAL,CAAsC3J,OAAtC,CAAtB;;QACA,IAAI0J,aAAa,KAAKjG,SAAtB,EAAiC;UAC7BiG,aAAa,CACRxD,IADL,CACUZ,GAAG,IAAIiE,OAAO,CAACjM,MAAM,CAACsM,MAAP,CAActM,MAAM,CAACsM,MAAP,CAAc,EAAd,EAAkBtE,GAAlB,CAAd,EAAsC;YAAEqB,EAAE,EAAE3G,OAAO,CAAC2G;UAAd,CAAtC,CAAD,CADxB,EAEKmB,KAFL,CAEWC,GAAG,IAAIyB,MAAM,CAACzB,GAAD,CAFxB;UAGA;QACH;;QACD,MAAM8B,mBAAmB,GAAG,KAAKC,0BAAL,CAAgC9J,OAAhC,CAA5B;;QACA,IAAI6J,mBAAmB,KAAKpG,SAA5B,EAAuC;UACnCoG,mBAAmB,CACd3D,IADL,CACUZ,GAAG,IAAIiE,OAAO,CAAC;YACrBpC,OAAO,EAAE,KADY;YAErBR,EAAE,EAAE3G,OAAO,CAAC2G,EAFS;YAGrBjC,MAAM,EAAEY,GAAG,CAACZ;UAHS,CAAD,CADxB,EAMKoD,KANL,CAMWC,GAAG,IAAIyB,MAAM,CAACzB,GAAD,CANxB;UAOA;QACH;MACJ,CA3BD,CA4BA,OAAOA,GAAP,EAAY;QACR,OAAOyB,MAAM,CAACzB,GAAD,CAAb;MACH;;MACD,KAAKgC,0BAAL,CAAgC/J,OAAhC,EACKkG,IADL,CACUZ,GAAG,IAAIA,GAAG,IAAIiE,OAAO,CAACjM,MAAM,CAACsM,MAAP,CAActM,MAAM,CAACsM,MAAP,CAAc,EAAd,EAAkBtE,GAAlB,CAAd,EAAsC;QAAEqB,EAAE,EAAE3G,OAAO,CAAC2G;MAAd,CAAtC,CAAD,CAD/B,EAEKmB,KAFL,CAEWC,GAAG,IAAIyB,MAAM,CAACzB,GAAD,CAFxB;IAGH,CAnCM,CAAP;EAoCH;;EACDH,0BAA0B,CAACN,QAAD,EAAW;IACjC,OAAOgC,OAAO,CAACU,GAAR,CAAY1C,QAAQ,CAACnF,GAAT,CAAaoF,CAAC,IAAI,KAAKH,iBAAL,CAAuBG,CAAvB,CAAlB,CAAZ,CAAP;EACH;;EACDyB,yBAAyB,CAAChJ,OAAD,EAAU;IAC/B,MAAM;MAAE0C;IAAF,IAAa1C,OAAnB;IACA,MAAM4C,MAAM,GAAG5C,OAAO,CAAC4C,MAAR,IAAkB,EAAjC;;IACA,QAAQF,MAAR;MACI,KAAKrE,SAAS,CAACuI,aAAV,CAAwBqD,YAA7B;QACI,OAAO,KAAKC,aAAL,EAAP;;MACJ,KAAK7L,SAAS,CAACuI,aAAV,CAAwBuD,YAA7B;QACI,OAAO,KAAKC,aAAL,EAAP;;MACJ,KAAK/L,SAAS,CAACuI,aAAV,CAAwByD,mBAA7B;QACI,OAAO,KAAKC,oBAAL,CAA0B1H,MAA1B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB2D,WAA7B;QACI,OAAO,KAAKC,YAAL,EAAP;;MACJ,KAAKnM,SAAS,CAACuI,aAAV,CAAwB6D,WAA7B;QACI,OAAO,KAAKC,YAAL,EAAP;;MACJ;QACI,OAAOjH,SAAP;IAZR;EAcH;;EAC+B,MAA1BsG,0BAA0B,CAAC/J,OAAD,EAAU;IACtC,MAAM;MAAE0C;IAAF,IAAa1C,OAAnB;IACA,MAAM4C,MAAM,GAAG5C,OAAO,CAAC4C,MAAR,IAAkB,EAAjC;;IACA,QAAQF,MAAR;MACI,KAAKrE,SAAS,CAACuI,aAAV,CAAwBC,mBAA7B;QACI,OAAO,KAAK8D,oBAAL,EAAP;;MACJ,KAAKtM,SAAS,CAACuI,aAAV,CAAwBgE,QAA7B;QACI,OAAO,KAAKC,SAAL,CAAejI,MAAf,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBkE,aAA7B;QACI,OAAO,KAAKC,cAAL,CAAoBnI,MAApB,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBoE,aAA7B;QACI,OAAO,KAAKC,cAAL,CAAoBrI,MAApB,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBsE,kBAA7B;QACI,OAAO,KAAKC,mBAAL,CAAyBvI,MAAzB,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBwE,mBAA7B;QACI,OAAO,KAAKC,oBAAL,CAA0BzI,MAA1B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB0E,sBAA7B;QACI,OAAO,KAAKC,uBAAL,CAA6B3I,MAA7B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB4E,mBAA7B;QACI,OAAO,KAAKC,oBAAL,CAA0B7I,MAA1B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB8E,oBAA7B;QACI,OAAO,KAAKC,qBAAL,CAA2B/I,MAA3B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBgF,oBAA7B;QACI,OAAO,KAAKC,4BAAL,EAAP;;MACJ,KAAKxN,SAAS,CAACuI,aAAV,CAAwBkF,oBAA7B;QACI,OAAO,KAAKC,qBAAL,CAA2BnJ,MAA3B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBoF,oBAA7B;MACA,KAAK3N,SAAS,CAACuI,aAAV,CAAwBqF,iBAA7B;QACI,OAAO,KAAKC,qBAAL,CAA2BtJ,MAA3B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBuF,kBAA7B;QACI,OAAO,KAAKC,mBAAL,CAAyBxJ,MAAzB,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwByF,uBAA7B;QACI,OAAO,KAAKC,wBAAL,CAA8B1J,MAA9B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB2F,0BAA7B;QACI,OAAO,KAAKC,2BAAL,CAAiC5J,MAAjC,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwB6F,iBAA7B;QACI,OAAO,KAAKC,kBAAL,CAAwB9J,MAAxB,CAAP;IAjCR;;IAmCA,MAAM6B,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,OAAO2B,KAAK,CAACkI,0BAAN,CAAiC3M,OAAjC,EAA0C,KAAKO,UAA/C,CAAP;EACH;;EACDoJ,gCAAgC,CAAC3J,OAAD,EAAU;IACtC,MAAM;MAAE0C;IAAF,IAAa1C,OAAnB;IACA,MAAM4C,MAAM,GAAG5C,OAAO,CAAC4C,MAAR,IAAkB,EAAjC;;IACA,QAAQF,MAAR;MACI,KAAKrE,SAAS,CAACuI,aAAV,CAAwBgG,aAA7B;QACI,OAAO,KAAKC,cAAL,CAAoBjK,MAApB,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBkG,kBAA7B;QACI,OAAO,KAAKC,mBAAL,EAAP;;MACJ,KAAK1O,SAAS,CAACuI,aAAV,CAAwBoG,+BAA7B;QACI,OAAO,KAAKC,gCAAL,EAAP;;MACJ,KAAK5O,SAAS,CAACuI,aAAV,CAAwBsG,oBAA7B;QACI,OAAO,KAAKC,qBAAL,CAA2BvK,MAA3B,CAAP;;MACJ,KAAKvE,SAAS,CAACuI,aAAV,CAAwBwG,iBAA7B;QACI,OAAO,KAAKC,kBAAL,CAAwBzK,MAAxB,CAAP;IAVR;;IAYA,OAAOa,SAAP;EACH;;EACDqG,0BAA0B,CAAC9J,OAAD,EAAU;IAChC,QAAQA,OAAO,CAAC0C,MAAhB;MACI,KAAKrE,SAAS,CAACuI,aAAV,CAAwB0G,aAA7B;MACA,KAAKjP,SAAS,CAACuI,aAAV,CAAwB2G,eAA7B;QACI,OAAO,KAAKvO,oBAAL,CAA0BwO,aAA1B,CAAwCxN,OAAxC,CAAP;IAHR;;IAKA,OAAOyD,SAAP;EACH;;EACDgK,eAAe,CAACC,aAAD,EAAgB;IAC3B,IAAI;MACA,MAAMC,UAAU,GAAG,CAAC,GAAGzP,MAAM,CAACmE,mBAAX,EAAgCqL,aAAhC,CAAnB;;MACA,MAAME,kBAAkB,GAAG,KAAKzO,UAAL,CAAgBgD,GAAhB,CAAoBC,OAAO,IAAI,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCD,OAAhC,CAA/B,CAA3B;;MACA,OAAOwL,kBAAkB,CAACC,QAAnB,CAA4BF,UAA5B,CAAP;IACH,CAJD,CAKA,OAAO/O,EAAP,EAAW,CAAG;;IACd,OAAO,KAAP;EACH;;EACDkP,mBAAmB,CAACJ,aAAD,EAAgB;IAC/B,IAAI9O,EAAJ;;IACA,IAAI,CAAC,KAAK6O,eAAL,CAAqBC,aAArB,CAAL,EAA0C;MACtC,CAAC9O,EAAE,GAAG,KAAKoC,UAAX,MAA2B,IAA3B,IAAmCpC,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACuH,GAAH,CAAOpI,kBAAkB,CAACqI,MAAnB,CAA0B2H,2BAAjC,CAA5D;MACA,MAAM,IAAIrG,KAAJ,CAAU,0BAAV,CAAN;IACH;EACJ;;EACDsG,yBAAyB,CAACC,EAAD,EAAK;IAC1B,MAAMC,WAAW,GAAGD,EAAE,CAACE,IAAH,GACd,CAAC,GAAGjQ,MAAM,CAACmE,mBAAX,EAAgC4L,EAAE,CAACE,IAAnC,CADc,GAEd,KAAK3K,eAFX;;IAGA,IAAI,CAAC0K,WAAL,EAAkB;MACd,MAAM,IAAIxG,KAAJ,CAAU,iCAAV,CAAN;IACH;;IACD,KAAKoG,mBAAL,CAAyBI,WAAzB;;IACA,MAAME,SAAS,GAAGH,EAAE,CAACI,EAAH,GAAQ,CAAC,GAAGnQ,MAAM,CAACmE,mBAAX,EAAgC4L,EAAE,CAACI,EAAnC,CAAR,GAAiD,IAAnE;IACA,MAAMC,QAAQ,GAAGL,EAAE,CAACxQ,KAAH,IAAY,IAAZ,GAAmB,CAAC,GAAGS,MAAM,CAACqQ,QAAX,EAAqBN,EAAE,CAACxQ,KAAxB,CAAnB,GAAoD,IAAII,OAAO,CAACY,OAAZ,CAAoB,CAApB,CAArE;IACA,MAAMkE,IAAI,GAAGsL,EAAE,CAACtL,IAAH,GAAU,CAAC,GAAGzE,MAAM,CAACsQ,YAAX,EAAyBP,EAAE,CAACtL,IAA5B,CAAV,GAA8C8L,MAAM,CAACC,KAAP,CAAa,CAAb,CAA3D;IACA,MAAMC,KAAK,GAAGV,EAAE,CAACU,KAAH,IAAY,IAAZ,GAAmB,CAAC,GAAGzQ,MAAM,CAACkG,eAAX,EAA4B6J,EAAE,CAACU,KAA/B,CAAnB,GAA2D,IAAzE;IACA,MAAMC,aAAa,GAAGX,EAAE,CAACY,QAAH,IAAe,IAAf,GAAsB,CAAC,GAAG3Q,MAAM,CAACqQ,QAAX,EAAqBN,EAAE,CAACY,QAAxB,CAAtB,GAA0D,IAAhF;IACA,MAAMC,YAAY,GAAGb,EAAE,CAACa,YAAH,IAAmB,IAAnB,GAA0B,CAAC,GAAG5Q,MAAM,CAACqQ,QAAX,EAAqBN,EAAE,CAACa,YAAxB,CAA1B,GAAkE,IAAvF;IACA,MAAMC,oBAAoB,GAAGd,EAAE,CAACc,oBAAH,IAA2B,IAA3B,GACvB,CAAC,GAAG7Q,MAAM,CAACqQ,QAAX,EAAqBN,EAAE,CAACc,oBAAxB,CADuB,GAEvB,IAFN;IAGA,MAAMC,QAAQ,GAAGf,EAAE,CAACgB,GAAH,IAAU,IAAV,GAAiB,CAAC,GAAG/Q,MAAM,CAACqQ,QAAX,EAAqBN,EAAE,CAACgB,GAAxB,CAAjB,GAAgD,IAAjE;IACA,MAAM5O,OAAO,GAAG,KAAKT,UAAL,EAAhB;IACA,OAAO;MACHsO,WADG;MAEHE,SAFG;MAGHE,QAHG;MAIH3L,IAJG;MAKHgM,KALG;MAMHC,aANG;MAOHE,YAPG;MAQHC,oBARG;MASHC,QATG;MAUH3O;IAVG,CAAP;EAYH;;EACD+E,aAAa,GAAG;IACZ,OAAO,KAAKjG,UAAL,CAAgB0D,MAAhB,GAAyB,CAAhC;EACH;;EACDqM,qBAAqB,GAAG;IACpB,IAAI,CAAC,KAAK9J,aAAL,EAAL,EAA2B;MACvB,MAAMtH,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoCwJ,YAApC,CAAiD,EAAjD,CAAN;IACH;EACJ;;EACDtD,4BAA4B,GAAG;IAC3B,MAAM/N,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoCyJ,iBAApC,CAAsD,EAAtD,CAAN;EACH;;EACyB,MAApBC,oBAAoB,CAAChH,OAAD,EAAUjG,OAAV,EAAmBkN,SAAnB,EAA8BC,aAA9B,EAA6C;IACnE,KAAKzB,mBAAL,CAAyB1L,OAAzB;;IACA,IAAI;MACA,MAAMqC,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;MACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAAC+K,mBAAN,CAA0BnH,OAA1B,EAAmCjG,OAAnC,EAA4CkN,SAA5C,EAAuDC,aAAvD,EAAsE5K,OAAxF;MACA,OAAO;QAAEwC,OAAO,EAAE,KAAX;QAAkBR,EAAE,EAAE,CAAtB;QAAyBjC,MAAM,EAAEY,GAAG,CAACZ;MAArC,CAAP;IACH,CAJD,CAKA,OAAOqD,GAAP,EAAY;MACR,IAAI,OAAOA,GAAG,CAACM,OAAX,KAAuB,QAAvB,IACAN,GAAG,CAACM,OAAJ,CAAYG,KAAZ,CAAkB,oBAAlB,CADJ,EAC6C;QACzC,MAAM1K,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoC8J,mBAApC,CAAwD,+BAAxD,CAAN;MACH;;MACD,MAAM1H,GAAN;IACH;EACJ;;EACsC,MAAjC2H,iCAAiC,CAACrH,OAAD,EAAUsH,SAAV,EAAqBL,SAArB,EAAgC;IACnE,MAAM7K,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACmL,gCAAN,CAAuCvH,OAAvC,EAAgDsH,SAAhD,EAA2DL,SAA3D,EAAsE3K,OAAxF;IACA,OAAO;MAAEwC,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEY,GAAG,CAACZ;IAArC,CAAP;EACH;;EACDwF,aAAa,GAAG;IACZ,OAAO,CAAC,GAAG,KAAK/K,UAAT,CAAP;EACH;;EACDiL,aAAa,GAAG;IACZ,OAAO,KAAK5G,eAAL,IAAwB,IAA/B;EACH;;EACDgH,YAAY,GAAG;IACX,OAAO,KAAK5K,UAAL,GAAkBgC,QAAlB,CAA2B,EAA3B,CAAP;EACH;;EACD8I,YAAY,GAAG;IACX,OAAO,CAAC,GAAGxM,MAAM,CAAC2R,sBAAX,EAAmC,KAAKjQ,UAAL,EAAnC,CAAP;EACH;;EACDA,UAAU,GAAG;IACT,MAAM8B,UAAU,GAAG,KAAKd,QAAL,CAAcmB,OAAd,CAAsBxD,oBAAtB,CAAnB;;IACA,IAAI,CAACmD,UAAL,EAAiB;MACb,OAAO,CAAC,GAAGxD,MAAM,CAACkG,eAAX,EAA4B,KAAKhE,gBAAjC,CAAP;IACH;;IACD,MAAMC,OAAO,GAAGyP,QAAQ,CAACpO,UAAD,EAAa,EAAb,CAAxB;IACA,OAAO,CAAC,GAAGxD,MAAM,CAACkG,eAAX,EAA4B/D,OAA5B,CAAP;EACH;;EACyB,MAApBsK,oBAAoB,GAAG;IACzB,IAAI/L,EAAJ;;IACA,CAACA,EAAE,GAAG,KAAKoC,UAAX,MAA2B,IAA3B,IAAmCpC,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACuH,GAAH,CAAOpI,kBAAkB,CAACqI,MAAnB,CAA0BC,kBAAjC,EAAqD;MAC7G3D,MAAM,EAAE,gCADqG;MAE7G4D,gBAAgB,EAAE,KAAKnH,UAAL,CAAgB0D,MAF2E;MAG7G0D,aAAa,EAAE,KAAKrH,MAAL,GACTlB,SAAS,CAACwI,OAAV,CAAkBC,IAAlB,CAAuB,KAAKvH,MAAL,CAAYwH,OAAZ,CAAoBC,EAA3C,CADS,GAETlD;IALuG,CAArD,CAA5D;;IAOA,IAAI,KAAKtE,UAAL,CAAgB0D,MAAhB,GAAyB,CAA7B,EAAgC;MAC5B,OAAOyG,OAAO,CAACC,OAAR,CAAgB;QACnBpC,OAAO,EAAE,KADU;QAEnBR,EAAE,EAAE,CAFe;QAGnBjC,MAAM,EAAE,KAAKvF;MAHM,CAAhB,CAAP;IAKH;;IACD,IAAImG,GAAJ;;IACA,IAAI;MACA,MAAMb,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;MACAwC,GAAG,GAAG,MAAMb,KAAK,CAACY,uBAAN,GAAgCV,OAA5C;IACH,CAHD,CAIA,OAAOoD,GAAP,EAAY;MACR,IAAI,OAAOA,GAAG,CAACM,OAAX,KAAuB,QAAvB,IACAN,GAAG,CAACM,OAAJ,CAAYG,KAAZ,CAAkB,oBAAlB,CADJ,EAC6C;QACzC,MAAM1K,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoC8J,mBAApC,CAAwD,mCAAxD,CAAN;MACH;;MACD,MAAM1H,GAAN;IACH;;IACD,IAAI,CAACzC,GAAG,CAACZ,MAAT,EAAiB;MACb,MAAM,IAAIgD,KAAJ,CAAU,4BAAV,CAAN;IACH;;IACD,KAAKzH,aAAL,CAAmBqF,GAAG,CAACZ,MAAvB;;IACA,IAAI,EAAE,KAAKjD,QAAL,IAAiB,KAAKJ,iBAAxB,CAAJ,EAAgD;MAC5C,MAAM,KAAKmE,mBAAL,CAAyB,KAAK5F,UAAL,EAAzB,CAAN;IACH;;IACD,OAAO;MAAEuH,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAE,KAAKvF;IAAtC,CAAP;EACH;;EACD0L,SAAS,CAACjI,MAAD,EAAS;IACd,KAAKsM,qBAAL;;IACA,MAAM9M,OAAO,GAAG,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCO,MAAM,CAAC,CAAD,CAAtC,CAAhB;IACA,MAAMyF,OAAO,GAAG,CAAC,GAAGnK,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAhB;IACA,OAAO,KAAKyM,oBAAL,CAA0BhH,OAA1B,EAAmCjG,OAAnC,EAA4C,KAA5C,CAAP;EACH;;EACD2I,cAAc,CAACnI,MAAD,EAAS;IACnB,MAAMyF,OAAO,GAAG,CAAC,GAAGnK,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAhB;IACA,MAAM+M,SAAS,GAAG,CAAC,GAAGzR,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAlB;IACA,OAAO,KAAK8M,iCAAL,CAAuCrH,OAAvC,EAAgDsH,SAAhD,EAA2D,KAA3D,CAAP;EACH;;EACD1E,cAAc,CAACrI,MAAD,EAAS;IACnB,KAAKsM,qBAAL;;IACA,MAAM7G,OAAO,GAAG,CAAC,GAAGnK,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAhB;IACA,MAAMR,OAAO,GAAG,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCO,MAAM,CAAC,CAAD,CAAtC,CAAhB;IACA,OAAO,KAAKyM,oBAAL,CAA0BhH,OAA1B,EAAmCjG,OAAnC,EAA4C,IAA5C,CAAP;EACH;;EACD+I,mBAAmB,CAACvI,MAAD,EAAS;IACxB,MAAMyF,OAAO,GAAG,CAAC,GAAGnK,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAhB;IACA,MAAM+M,SAAS,GAAG,CAAC,GAAGzR,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAAlB;IACA,OAAO,KAAK8M,iCAAL,CAAuCrH,OAAvC,EAAgDsH,SAAhD,EAA2D,IAA3D,CAAP;EACH;;EACyB,MAApBtE,oBAAoB,CAACzI,MAAD,EAAS;IAC/B,KAAKsM,qBAAL;;IACA,MAAMjB,EAAE,GAAG,KAAKD,yBAAL,CAA+BpL,MAAM,CAAC,CAAD,CAAN,IAAa,EAA5C,CAAX;;IACA,IAAI;MACA,MAAM6B,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;MACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACsL,uBAAN,CAA8B9B,EAA9B,EAAkCtJ,OAApD;MACA,OAAO;QAAEwC,OAAO,EAAE,KAAX;QAAkBR,EAAE,EAAE,CAAtB;QAAyBjC,MAAM,EAAEY,GAAG,CAACZ;MAArC,CAAP;IACH,CAJD,CAKA,OAAOqD,GAAP,EAAY;MACR,IAAI,OAAOA,GAAG,CAACM,OAAX,KAAuB,QAAvB,IACAN,GAAG,CAACM,OAAJ,CAAYG,KAAZ,CAAkB,oBAAlB,CADJ,EAC6C;QACzC,MAAM1K,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoC8J,mBAApC,CAAwD,mCAAxD,CAAN;MACH;;MACD,MAAM1H,GAAN;IACH;EACJ;;EAC4B,MAAvBwD,uBAAuB,CAAC3I,MAAD,EAAS;IAClC,MAAMoN,iBAAiB,GAAG,CAAC,GAAG9R,MAAM,CAACsQ,YAAX,EAAyB5L,MAAM,CAAC,CAAD,CAA/B,CAA1B;IACA,MAAM6B,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;IACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACwL,yBAAN,CAAgCD,iBAAhC,EAAmD,KAAKpQ,UAAL,EAAnD,EAAsE+E,OAAxF;IACA,OAAO;MAAEwC,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEY,GAAG,CAACZ;IAArC,CAAP;EACH;;EACyB,MAApB+G,oBAAoB,CAAC7I,MAAD,EAAS;IAC/B,KAAKsM,qBAAL;;IACA,MAAMjB,EAAE,GAAG,KAAKD,yBAAL,CAA+BpL,MAAM,CAAC,CAAD,CAAN,IAAa,EAA5C,CAAX;;IACA,IAAI;MACA,MAAM6B,KAAK,GAAG,MAAM,KAAK3B,eAAL,EAApB;MACA,MAAMwC,GAAG,GAAG,MAAMb,KAAK,CAACyL,gCAAN,CAAuCjC,EAAvC,EAA2CtJ,OAA7D;MACA,OAAO;QAAEwC,OAAO,EAAE,KAAX;QAAkBR,EAAE,EAAE,CAAtB;QAAyBjC,MAAM,EAAEY,GAAG,CAACZ;MAArC,CAAP;IACH,CAJD,CAKA,OAAOqD,GAAP,EAAY;MACR,IAAI,OAAOA,GAAG,CAACM,OAAX,KAAuB,QAAvB,IACAN,GAAG,CAACM,OAAJ,CAAYG,KAAZ,CAAkB,oBAAlB,CADJ,EAC6C;QACzC,MAAM1K,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoC8J,mBAApC,CAAwD,mCAAxD,CAAN;MACH;;MACD,MAAM1H,GAAN;IACH;EACJ;;EAC0B,MAArB4D,qBAAqB,CAAC/I,MAAD,EAAS;IAChC,KAAKsM,qBAAL;;IACA,MAAMiB,SAAS,GAAG,CAAC,GAAGjS,MAAM,CAACkS,sBAAX,EAAmCxN,MAAM,CAAC,CAAD,CAAzC,CAAlB;IACA,MAAMR,OAAO,GAAG,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCO,MAAM,CAAC,CAAD,CAAtC,CAAhB;;IACA,KAAKkL,mBAAL,CAAyB1L,OAAzB;;IACA,MAAMiG,OAAO,GAAGlK,iBAAiB,CAACM,OAAlB,CAA0B4R,0BAA1B,CAAqD;MAAE1N,IAAI,EAAEwN;IAAR,CAArD,CAAhB;IACA,MAAMG,aAAa,GAAGnH,IAAI,CAACC,SAAL,CAAe+G,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAtB;IACA,OAAO,KAAKd,oBAAL,CAA0BhH,OAA1B,EAAmCjG,OAAnC,EAA4C,KAA5C,EAAmDkO,aAAnD,CAAP;EACH;;EAC0B,MAArBvE,qBAAqB,CAACnJ,MAAD,EAAS;IAChC,KAAKsM,qBAAL;;IACA,MAAM9M,OAAO,GAAG,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCO,MAAM,CAAC,CAAD,CAAtC,CAAhB;IACA,MAAMuN,SAAS,GAAG,CAAC,GAAGjS,MAAM,CAACkS,sBAAX,EAAmCxN,MAAM,CAAC,CAAD,CAAzC,CAAlB;;IACA,KAAKkL,mBAAL,CAAyB1L,OAAzB;;IACA,MAAMiG,OAAO,GAAGlK,iBAAiB,CAACM,OAAlB,CAA0B8R,uBAA1B,CAAkD;MAAE5N,IAAI,EAAEwN;IAAR,CAAlD,CAAhB;IACA,MAAMG,aAAa,GAAGnH,IAAI,CAACC,SAAL,CAAe+G,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAtB;IACA,OAAO,KAAKd,oBAAL,CAA0BhH,OAA1B,EAAmCjG,OAAnC,EAA4C,KAA5C,EAAmDkO,aAAnD,CAAP;EACH;;EAC0B,MAArBpE,qBAAqB,CAACtJ,MAAD,EAAS;IAChC,KAAKsM,qBAAL;;IACA,MAAM9M,OAAO,GAAG,CAAC,GAAGlE,MAAM,CAACmE,mBAAX,EAAgCO,MAAM,CAAC,CAAD,CAAtC,CAAhB;IACA,MAAMuN,SAAS,GAAG,CAAC,GAAGjS,MAAM,CAACkS,sBAAX,EAAmCxN,MAAM,CAAC,CAAD,CAAzC,CAAlB;;IACA,KAAKkL,mBAAL,CAAyB1L,OAAzB;;IACA,MAAMiG,OAAO,GAAGlK,iBAAiB,CAACM,OAAlB,CAA0B+R,uBAA1B,CAAkD;MAAE7N,IAAI,EAAEwN;IAAR,CAAlD,CAAhB;IACA,MAAMG,aAAa,GAAGnH,IAAI,CAACC,SAAL,CAAe+G,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAAtB;IACA,OAAO,KAAKd,oBAAL,CAA0BhH,OAA1B,EAAmCjG,OAAnC,EAA4C,KAA5C,EAAmDkO,aAAnD,CAAP;EACH;EACD;;;EACyB,MAAnBlE,mBAAmB,CAACxJ,MAAD,EAAS;IAC9B,MAAMS,MAAM,GAAGT,MAAM,CAAC,CAAD,CAArB;IACA,MAAMD,IAAI,GAAGC,MAAM,CAAC,CAAD,CAAnB;;IACA,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;MAC1B,MAAM,IAAI+E,KAAJ,CAAU,4BAAV,CAAN;IACH;;IACD,IAAI,OAAOrE,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,IAA7C,EAAmD;MAC/C,MAAM,IAAIqE,KAAJ,CAAU,6BAAV,CAAN;IACH;;IACD,MAAMhD,MAAM,GAAG,MAAM,KAAKvE,cAAL,CAAoBkD,MAApB,EAA4BV,IAA5B,CAArB;IACA,OAAO;MAAEwE,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC;IAAzB,CAAP;EACH;;EAC6B,MAAxB4H,wBAAwB,CAAC1J,MAAD,EAAS;IACnC,IAAIhE,EAAJ,EAAQC,EAAR,EAAY4R,EAAZ,EAAgBC,EAAhB;;IACA,MAAM1Q,OAAO,GAAG4C,MAAM,CAAC,CAAD,CAAtB;;IACA,IAAI,CAAC,CAAChE,EAAE,GAAGoB,OAAO,CAAC6E,OAAd,MAA2B,IAA3B,IAAmCjG,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACiE,MAAhE,MAA4E,CAAhF,EAAmF;MAC/E,OAAO;QACHsE,OAAO,EAAE,KADN;QAEHR,EAAE,EAAE,CAFD;QAGHgK,KAAK,EAAE;UAAE9K,IAAI,EAAE,CAAR;UAAWwC,OAAO,EAAG;QAArB;MAHJ,CAAP;IAKH;;IACD,IAAI,CAACrI,OAAO,CAAC+E,SAAT,IAAsB/E,OAAO,CAAC+E,SAAR,CAAkB6L,IAAlB,OAA6B,EAAvD,EAA2D;MACvD,MAAM9S,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoCC,MAApC,CAA2C;QAC7CC,IAAI,EAAE,CADuC;QAE7CwC,OAAO,EAAE;MAFoC,CAA3C,CAAN;IAIH;;IACD,IAAI,CAACrI,OAAO,CAACiF,cAAb,EAA6B;MACzB,MAAMnH,gBAAgB,CAAC4H,SAAjB,CAA2BC,QAA3B,CAAoCC,MAApC,CAA2C;QAC7CC,IAAI,EAAE,CADuC;QAE7CwC,OAAO,EAAE;MAFoC,CAA3C,CAAN;IAIH;;IACD,MAAMwI,aAAa,GAAGf,QAAQ,CAAC9P,OAAO,CAACK,OAAT,EAAkB,EAAlB,CAA9B;IACA,MAAMyQ,OAAO,GAAG,MAAM,KAAKlM,gBAAL,CAAsBiM,aAAtB,EAAqC,CAAChS,EAAE,GAAGmB,OAAO,CAAC6E,OAAd,MAA2B,IAA3B,IAAmChG,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwD,EAA7F,EAAiG,CAAC4R,EAAE,GAAGzQ,OAAO,CAAC8E,iBAAd,MAAqC,IAArC,IAA6C2L,EAAE,KAAK,KAAK,CAAzD,GAA6DA,EAA7D,GAAkE,EAAnK,EAAuKzQ,OAAO,CAAC+E,SAA/K,EAA0L,CAAC2L,EAAE,GAAG1Q,OAAO,CAACgF,QAAd,MAA4B,IAA5B,IAAoC0L,EAAE,KAAK,KAAK,CAAhD,GAAoDA,EAApD,GAAyD,EAAnP,EAAuP1Q,OAAO,CAACiF,cAA/P,CAAtB;;IACA,IAAI6L,OAAJ,EAAa;MACT,OAAO;QAAE3J,OAAO,EAAE,KAAX;QAAkBR,EAAE,EAAE,CAAtB;QAAyBjC,MAAM,EAAE;MAAjC,CAAP;IACH,CAFD,MAGK;MACD,OAAO;QACHyC,OAAO,EAAE,KADN;QAEHR,EAAE,EAAE,CAFD;QAGHgK,KAAK,EAAE;UAAE9K,IAAI,EAAE,CAAR;UAAWwC,OAAO,EAAG;QAArB;MAHJ,CAAP;IAKH;EACJ;;EACgC,MAA3BmE,2BAA2B,CAAC5J,MAAD,EAAS;IACtC,MAAM5C,OAAO,GAAG4C,MAAM,CAAC,CAAD,CAAtB;IACA,MAAM,KAAK4C,mBAAL,CAAyBsK,QAAQ,CAAC9P,OAAO,CAACK,OAAT,EAAkB,EAAlB,CAAjC,CAAN;IACA,OAAO;MAAE8G,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAE;IAAjC,CAAP;EACH;;EACuB,MAAlBgI,kBAAkB,CAAC9J,MAAD,EAAS;IAC7B,MAAM5C,OAAO,GAAIiH,KAAK,CAACC,OAAN,CAActE,MAAd,IAAwBA,MAAM,CAAC,CAAD,CAA9B,GAAoCA,MAArD;;IACA,IAAI,CAAC5C,OAAO,CAACyC,IAAb,EAAmB;MACf,MAAM3E,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+B4I,aAA/B,CAA6C;QAC/C1I,OAAO,EAAE;MADsC,CAA7C,CAAN;IAGH;;IACD,IAAI,CAACrI,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACyC,IAA3D,MAAqE,OAAzE,EAAkF;MAC9E,MAAM3E,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+B4I,aAA/B,CAA6C;QAC/C1I,OAAO,EAAG,kBAAiBrI,OAAO,CAACyC,IAAK;MADO,CAA7C,CAAN;IAGH;;IACD,IAAI,EAAEzC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACrB,OAA5D,CAAJ,EAA0E;MACtE,MAAMb,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+B4I,aAA/B,CAA6C;QAC/C1I,OAAO,EAAE;MADsC,CAA7C,CAAN;IAGH;;IACD,IAAI,EAAErI,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACrB,OAAR,CAAgByD,OAApE,CAAJ,EAAkF;MAC9E,MAAMtE,gBAAgB,CAAC4H,SAAjB,CAA2ByC,GAA3B,CAA+B4I,aAA/B,CAA6C;QAC/C1I,OAAO,EAAE;MADsC,CAA7C,CAAN;IAGH;;IACD,MAAMhI,OAAO,GAAG,KAAKT,UAAL,EAAhB;IACA,MAAM;MAAEwC,OAAF;MAAWkC,MAAX;MAAmBE,KAAnB;MAA0BD;IAA1B,IAAuCvE,OAAO,CAACrB,OAArD;IACA,MAAM2G,GAAG,GAAG,MAAM,KAAKjB,UAAL,CAAgBrE,OAAO,CAACyC,IAAxB,EAA8BL,OAA9B,EAAuCkC,MAAvC,EAA+CC,QAA/C,EAAyDC,KAAzD,EAAgEnE,OAAhE,CAAlB;IACA,OAAO;MAAE8G,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEY;IAAjC,CAAP;EACH;;EACDgF,oBAAoB,CAAC1H,MAAD,EAAS;IACzB,MAAMoO,QAAQ,GAAG,CAAC,GAAG9S,MAAM,CAAC+S,eAAX,EAA4BrO,MAAM,CAAC,CAAD,CAAlC,CAAjB;IACA,OAAO,KAAK9D,eAAL,CAAqBoS,eAArB,CAAqCF,QAArC,CAAP;EACH;;EACmB,MAAdnE,cAAc,CAACjK,MAAD,EAAS;IACzB,MAAMuO,KAAK,GAAGvO,MAAM,CAAC,CAAD,CAApB;IACA,MAAMoO,QAAQ,GAAG,MAAM,KAAKlS,eAAL,CAAqBsS,SAArB,CAA+BD,KAA/B,CAAvB;IACA,OAAO;MAAEhK,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEsM;IAAjC,CAAP;EACH;;EACwB,MAAnBjE,mBAAmB,GAAG;IACxB,MAAMiE,QAAQ,GAAG,MAAM,KAAKlS,eAAL,CAAqBuS,cAArB,EAAvB;IACA,OAAO;MAAElK,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEsM;IAAjC,CAAP;EACH;;EACqC,MAAhC/D,gCAAgC,GAAG;IACrC,MAAM+D,QAAQ,GAAG,MAAM,KAAKlS,eAAL,CAAqBwS,2BAArB,EAAvB;IACA,OAAO;MAAEnK,OAAO,EAAE,KAAX;MAAkBR,EAAE,EAAE,CAAtB;MAAyBjC,MAAM,EAAEsM;IAAjC,CAAP;EACH;;EACD7D,qBAAqB,CAACvK,MAAD,EAAS;IAC1B,MAAMoO,QAAQ,GAAG,CAAC,GAAG9S,MAAM,CAAC+S,eAAX,EAA4BrO,MAAM,CAAC,CAAD,CAAlC,CAAjB;IACA,OAAO,KAAK9D,eAAL,CAAqByS,gBAArB,CAAsCP,QAAtC,CAAP;EACH;;EACD3D,kBAAkB,CAACzK,MAAD,EAAS;IACvB,MAAMoO,QAAQ,GAAG,CAAC,GAAG9S,MAAM,CAAC+S,eAAX,EAA4BrO,MAAM,CAAC,CAAD,CAAlC,CAAjB;IACA,OAAO,KAAK9D,eAAL,CAAqB0S,aAArB,CAAmCR,QAAnC,CAAP;EACH;;EACDlO,eAAe,GAAG;IACd,IAAI,KAAK5D,MAAT,EAAiB;MACb,OAAOoK,OAAO,CAACC,OAAR,CAAgB,KAAKrK,MAArB,CAAP;IACH;;IACD,OAAO,KAAKwB,cAAL,GAAsBwF,IAAtB,CAA2BzB,KAAK,IAAI;MACvCA,KAAK,CAACgN,mBAAN,CAA0B,CAACC,QAAD,EAAWzI,YAAX,KAA4B,KAAKhJ,aAAL,CAAmByR,QAAnB,EAA6BzI,YAA7B,CAAtD;MACAxE,KAAK,CAACkN,gBAAN,CAAuB,CAACtR,OAAD,EAAUE,UAAV,KAAyB;QAC5C,KAAKZ,kBAAL,CAAwBY,UAAxB,EAAoCuP,QAAQ,CAACzP,OAAD,EAAU,EAAV,CAA5C;MACH,CAFD;MAGAoE,KAAK,CAACmN,2BAAN,CAAkC,KAAKxR,gBAAvC;MACA,KAAKlB,MAAL,GAAcuF,KAAd;MACA,OAAOA,KAAP;IACH,CARM,CAAP;EASH;;AA7yB6D;;AA+yBlEjH,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC"},"metadata":{},"sourceType":"script"}