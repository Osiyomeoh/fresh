{"ast":null,"code":"import \"../chunk-MQXBDTVK.js\"; // src/providers/alchemy.ts\n\nimport { providers } from \"ethers\";\n\nfunction alchemyProvider(_ref) {\n  let {\n    apiKey,\n    priority,\n    stallTimeout,\n    weight\n  } = _ref;\n  return function (chain) {\n    if (!chain.rpcUrls.alchemy?.http[0]) return null;\n    return {\n      chain: { ...chain,\n        rpcUrls: { ...chain.rpcUrls,\n          default: {\n            http: [`${chain.rpcUrls.alchemy?.http[0]}/${apiKey}`]\n          }\n        }\n      },\n      provider: () => {\n        const provider = new providers.AlchemyProvider({\n          chainId: chain.id,\n          name: chain.network,\n          ensAddress: chain.contracts?.ensRegistry?.address\n        }, apiKey);\n        return Object.assign(provider, {\n          priority,\n          stallTimeout,\n          weight\n        });\n      },\n      webSocketProvider: () => new providers.AlchemyWebSocketProvider({\n        chainId: chain.id,\n        name: chain.network,\n        ensAddress: chain.contracts?.ensRegistry?.address\n      }, apiKey)\n    };\n  };\n}\n\nexport { alchemyProvider };","map":{"version":3,"names":["providers","alchemyProvider","apiKey","priority","stallTimeout","weight","chain","rpcUrls","alchemy","http","default","provider","AlchemyProvider","chainId","id","name","network","ensAddress","contracts","ensRegistry","address","Object","assign","webSocketProvider","AlchemyWebSocketProvider"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/@wagmi/core/dist/providers/alchemy.js"],"sourcesContent":["import \"../chunk-MQXBDTVK.js\";\n\n// src/providers/alchemy.ts\nimport { providers } from \"ethers\";\nfunction alchemyProvider({\n  apiKey,\n  priority,\n  stallTimeout,\n  weight\n}) {\n  return function(chain) {\n    if (!chain.rpcUrls.alchemy?.http[0])\n      return null;\n    return {\n      chain: {\n        ...chain,\n        rpcUrls: {\n          ...chain.rpcUrls,\n          default: { http: [`${chain.rpcUrls.alchemy?.http[0]}/${apiKey}`] }\n        }\n      },\n      provider: () => {\n        const provider = new providers.AlchemyProvider(\n          {\n            chainId: chain.id,\n            name: chain.network,\n            ensAddress: chain.contracts?.ensRegistry?.address\n          },\n          apiKey\n        );\n        return Object.assign(provider, { priority, stallTimeout, weight });\n      },\n      webSocketProvider: () => new providers.AlchemyWebSocketProvider(\n        {\n          chainId: chain.id,\n          name: chain.network,\n          ensAddress: chain.contracts?.ensRegistry?.address\n        },\n        apiKey\n      )\n    };\n  };\n}\nexport {\n  alchemyProvider\n};\n"],"mappings":"AAAA,OAAO,sBAAP,C,CAEA;;AACA,SAASA,SAAT,QAA0B,QAA1B;;AACA,SAASC,eAAT,OAKG;EAAA,IALsB;IACvBC,MADuB;IAEvBC,QAFuB;IAGvBC,YAHuB;IAIvBC;EAJuB,CAKtB;EACD,OAAO,UAASC,KAAT,EAAgB;IACrB,IAAI,CAACA,KAAK,CAACC,OAAN,CAAcC,OAAd,EAAuBC,IAAvB,CAA4B,CAA5B,CAAL,EACE,OAAO,IAAP;IACF,OAAO;MACLH,KAAK,EAAE,EACL,GAAGA,KADE;QAELC,OAAO,EAAE,EACP,GAAGD,KAAK,CAACC,OADF;UAEPG,OAAO,EAAE;YAAED,IAAI,EAAE,CAAE,GAAEH,KAAK,CAACC,OAAN,CAAcC,OAAd,EAAuBC,IAAvB,CAA4B,CAA5B,CAA+B,IAAGP,MAAO,EAA7C;UAAR;QAFF;MAFJ,CADF;MAQLS,QAAQ,EAAE,MAAM;QACd,MAAMA,QAAQ,GAAG,IAAIX,SAAS,CAACY,eAAd,CACf;UACEC,OAAO,EAAEP,KAAK,CAACQ,EADjB;UAEEC,IAAI,EAAET,KAAK,CAACU,OAFd;UAGEC,UAAU,EAAEX,KAAK,CAACY,SAAN,EAAiBC,WAAjB,EAA8BC;QAH5C,CADe,EAMflB,MANe,CAAjB;QAQA,OAAOmB,MAAM,CAACC,MAAP,CAAcX,QAAd,EAAwB;UAAER,QAAF;UAAYC,YAAZ;UAA0BC;QAA1B,CAAxB,CAAP;MACD,CAlBI;MAmBLkB,iBAAiB,EAAE,MAAM,IAAIvB,SAAS,CAACwB,wBAAd,CACvB;QACEX,OAAO,EAAEP,KAAK,CAACQ,EADjB;QAEEC,IAAI,EAAET,KAAK,CAACU,OAFd;QAGEC,UAAU,EAAEX,KAAK,CAACY,SAAN,EAAiBC,WAAjB,EAA8BC;MAH5C,CADuB,EAMvBlB,MANuB;IAnBpB,CAAP;EA4BD,CA/BD;AAgCD;;AACD,SACED,eADF"},"metadata":{},"sourceType":"module"}