{"ast":null,"code":"var BufferUtil = require('../utils/buffer');\n\nvar GF = require('./galois-field');\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\n\n\nexports.mul = function mul(p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1);\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n    }\n  }\n\n  return coeff;\n};\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\n\n\nexports.mod = function mod(divident, divisor) {\n  var result = BufferUtil.from(divident);\n\n  while (result.length - divisor.length >= 0) {\n    var coeff = result[0];\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff);\n    } // remove all zeros from buffer head\n\n\n    var offset = 0;\n\n    while (offset < result.length && result[offset] === 0) offset++;\n\n    result = result.slice(offset);\n  }\n\n  return result;\n};\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\n\n\nexports.generateECPolynomial = function generateECPolynomial(degree) {\n  var poly = BufferUtil.from([1]);\n\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)]);\n  }\n\n  return poly;\n};","map":{"version":3,"names":["BufferUtil","require","GF","exports","mul","p1","p2","coeff","alloc","length","i","j","mod","divident","divisor","result","from","offset","slice","generateECPolynomial","degree","poly","exp"],"sources":["C:/Users/USER/Documents/demo-react/node_modules/qrcode/lib/core/polynomial.js"],"sourcesContent":["var BufferUtil = require('../utils/buffer')\nvar GF = require('./galois-field')\n\n/**\n * Multiplies two polynomials inside Galois Field\n *\n * @param  {Buffer} p1 Polynomial\n * @param  {Buffer} p2 Polynomial\n * @return {Buffer}    Product of p1 and p2\n */\nexports.mul = function mul (p1, p2) {\n  var coeff = BufferUtil.alloc(p1.length + p2.length - 1)\n\n  for (var i = 0; i < p1.length; i++) {\n    for (var j = 0; j < p2.length; j++) {\n      coeff[i + j] ^= GF.mul(p1[i], p2[j])\n    }\n  }\n\n  return coeff\n}\n\n/**\n * Calculate the remainder of polynomials division\n *\n * @param  {Buffer} divident Polynomial\n * @param  {Buffer} divisor  Polynomial\n * @return {Buffer}          Remainder\n */\nexports.mod = function mod (divident, divisor) {\n  var result = BufferUtil.from(divident)\n\n  while ((result.length - divisor.length) >= 0) {\n    var coeff = result[0]\n\n    for (var i = 0; i < divisor.length; i++) {\n      result[i] ^= GF.mul(divisor[i], coeff)\n    }\n\n    // remove all zeros from buffer head\n    var offset = 0\n    while (offset < result.length && result[offset] === 0) offset++\n    result = result.slice(offset)\n  }\n\n  return result\n}\n\n/**\n * Generate an irreducible generator polynomial of specified degree\n * (used by Reed-Solomon encoder)\n *\n * @param  {Number} degree Degree of the generator polynomial\n * @return {Buffer}        Buffer containing polynomial coefficients\n */\nexports.generateECPolynomial = function generateECPolynomial (degree) {\n  var poly = BufferUtil.from([1])\n  for (var i = 0; i < degree; i++) {\n    poly = exports.mul(poly, [1, GF.exp(i)])\n  }\n\n  return poly\n}\n"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIC,EAAE,GAAGD,OAAO,CAAC,gBAAD,CAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACC,GAAR,GAAc,SAASA,GAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsB;EAClC,IAAIC,KAAK,GAAGP,UAAU,CAACQ,KAAX,CAAiBH,EAAE,CAACI,MAAH,GAAYH,EAAE,CAACG,MAAf,GAAwB,CAAzC,CAAZ;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACI,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;IAClC,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,EAAE,CAACG,MAAvB,EAA+BE,CAAC,EAAhC,EAAoC;MAClCJ,KAAK,CAACG,CAAC,GAAGC,CAAL,CAAL,IAAgBT,EAAE,CAACE,GAAH,CAAOC,EAAE,CAACK,CAAD,CAAT,EAAcJ,EAAE,CAACK,CAAD,CAAhB,CAAhB;IACD;EACF;;EAED,OAAOJ,KAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACS,GAAR,GAAc,SAASA,GAAT,CAAcC,QAAd,EAAwBC,OAAxB,EAAiC;EAC7C,IAAIC,MAAM,GAAGf,UAAU,CAACgB,IAAX,CAAgBH,QAAhB,CAAb;;EAEA,OAAQE,MAAM,CAACN,MAAP,GAAgBK,OAAO,CAACL,MAAzB,IAAoC,CAA3C,EAA8C;IAC5C,IAAIF,KAAK,GAAGQ,MAAM,CAAC,CAAD,CAAlB;;IAEA,KAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,OAAO,CAACL,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;MACvCK,MAAM,CAACL,CAAD,CAAN,IAAaR,EAAE,CAACE,GAAH,CAAOU,OAAO,CAACJ,CAAD,CAAd,EAAmBH,KAAnB,CAAb;IACD,CAL2C,CAO5C;;;IACA,IAAIU,MAAM,GAAG,CAAb;;IACA,OAAOA,MAAM,GAAGF,MAAM,CAACN,MAAhB,IAA0BM,MAAM,CAACE,MAAD,CAAN,KAAmB,CAApD,EAAuDA,MAAM;;IAC7DF,MAAM,GAAGA,MAAM,CAACG,KAAP,CAAaD,MAAb,CAAT;EACD;;EAED,OAAOF,MAAP;AACD,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,OAAO,CAACgB,oBAAR,GAA+B,SAASA,oBAAT,CAA+BC,MAA/B,EAAuC;EACpE,IAAIC,IAAI,GAAGrB,UAAU,CAACgB,IAAX,CAAgB,CAAC,CAAD,CAAhB,CAAX;;EACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,MAApB,EAA4BV,CAAC,EAA7B,EAAiC;IAC/BW,IAAI,GAAGlB,OAAO,CAACC,GAAR,CAAYiB,IAAZ,EAAkB,CAAC,CAAD,EAAInB,EAAE,CAACoB,GAAH,CAAOZ,CAAP,CAAJ,CAAlB,CAAP;EACD;;EAED,OAAOW,IAAP;AACD,CAPD"},"metadata":{},"sourceType":"script"}