{"ast":null,"code":"const e = Symbol(),\n      t = Symbol(),\n      r = \"a\",\n      n = \"w\";\n\nlet o = (e, t) => new Proxy(e, t);\n\nconst s = Object.getPrototypeOf,\n      c = new WeakMap(),\n      l = e => e && (c.has(e) ? c.get(e) : s(e) === Object.prototype || s(e) === Array.prototype),\n      f = e => \"object\" == typeof e && null !== e,\n      i = new WeakMap(),\n      a = e => e[t] || e,\n      u = (c, f, p) => {\n  if (!l(c)) return c;\n\n  const y = a(c),\n        g = (e => Object.isFrozen(e) || Object.values(Object.getOwnPropertyDescriptors(e)).some(e => !e.writable))(y);\n\n  let h = p && p.get(y);\n  return h && h[1].f === g || (h = ((o, s) => {\n    const c = {\n      f: s\n    };\n    let l = !1;\n\n    const f = (e, t) => {\n      if (!l) {\n        let s = c[r].get(o);\n        if (s || (s = {}, c[r].set(o, s)), e === n) s[n] = !0;else {\n          let r = s[e];\n          r || (r = new Set(), s[e] = r), r.add(t);\n        }\n      }\n    },\n          i = {\n      get: (e, n) => n === t ? o : (f(\"k\", n), u(Reflect.get(e, n), c[r], c.c)),\n      has: (t, n) => n === e ? (l = !0, c[r].delete(o), !0) : (f(\"h\", n), Reflect.has(t, n)),\n      getOwnPropertyDescriptor: (e, t) => (f(\"o\", t), Reflect.getOwnPropertyDescriptor(e, t)),\n      ownKeys: e => (f(n), Reflect.ownKeys(e))\n    };\n\n    return s && (i.set = i.deleteProperty = () => !1), [i, c];\n  })(y, g), h[1].p = o(g ? (e => {\n    let t = i.get(e);\n\n    if (!t) {\n      if (Array.isArray(e)) t = Array.from(e);else {\n        const r = Object.getOwnPropertyDescriptors(e);\n        Object.values(r).forEach(e => {\n          e.configurable = !0;\n        }), t = Object.create(s(e), r);\n      }\n      i.set(e, t);\n    }\n\n    return t;\n  })(y) : y, h[0]), p && p.set(y, h)), h[1][r] = f, h[1].c = p, h[1].p;\n},\n      p = (e, t, r, o) => {\n  if (Object.is(e, t)) return !1;\n  if (!f(e) || !f(t)) return !0;\n  const s = r.get(a(e));\n  if (!s) return !0;\n\n  if (o) {\n    const r = o.get(e);\n    if (r && r.n === t) return r.g;\n    o.set(e, {\n      n: t,\n      g: !1\n    });\n  }\n\n  let c = null;\n\n  try {\n    for (const r of s.h || []) if (c = Reflect.has(e, r) !== Reflect.has(t, r), c) return c;\n\n    if (!0 === s[n]) {\n      if (c = ((e, t) => {\n        const r = Reflect.ownKeys(e),\n              n = Reflect.ownKeys(t);\n        return r.length !== n.length || r.some((e, t) => e !== n[t]);\n      })(e, t), c) return c;\n    } else for (const r of s.o || []) if (c = !!Reflect.getOwnPropertyDescriptor(e, r) != !!Reflect.getOwnPropertyDescriptor(t, r), c) return c;\n\n    for (const n of s.k || []) if (c = p(e[n], t[n], r, o), c) return c;\n\n    return null === c && (c = !0), c;\n  } finally {\n    o && o.set(e, {\n      n: t,\n      g: c\n    });\n  }\n},\n      y = t => !!l(t) && e in t,\n      g = e => l(e) && e[t] || null,\n      h = function (e) {\n  let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n  c.set(e, t);\n},\n      w = (e, t, r) => {\n  const o = [],\n        s = new WeakSet(),\n        c = (e, l) => {\n    if (s.has(e)) return;\n    f(e) && s.add(e);\n    const i = f(e) && t.get(a(e));\n\n    if (i) {\n      var u, p;\n\n      if (null == (u = i.h) || u.forEach(e => {\n        const t = `:has(${String(e)})`;\n        o.push(l ? [...l, t] : [t]);\n      }), !0 === i[n]) {\n        const e = \":ownKeys\";\n        o.push(l ? [...l, e] : [e]);\n      } else {\n        var y;\n        null == (y = i.o) || y.forEach(e => {\n          const t = `:hasOwn(${String(e)})`;\n          o.push(l ? [...l, t] : [t]);\n        });\n      }\n\n      null == (p = i.k) || p.forEach(t => {\n        r && !(\"value\" in (Object.getOwnPropertyDescriptor(e, t) || {})) || c(e[t], l ? [...l, t] : [t]);\n      });\n    } else l && o.push(l);\n  };\n\n  return c(e), o;\n},\n      O = e => {\n  o = e;\n};\n\nexport { w as affectedToPathList, u as createProxy, g as getUntracked, p as isChanged, h as markToTrack, O as replaceNewProxy, y as trackMemo };","map":{"version":3,"mappings":"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","names":["Symbol","AFFECTED_PROPERTY","ALL_OWN_KEYS_PROPERTY","newProxy","target","handler","Proxy","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","obj","has","get","prototype","Array","isObject","x","unfrozenCache","GET_ORIGINAL_SYMBOL","createProxy","affected","proxyCache","isObjectToTrack","getOriginalObject","frozen","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","handlerAndState","f","origObj","state","trackObject","type","key","used","set","Set","add","recordUsage","Reflect","c","TRACK_MEMO_SYMBOL","delete","getOwnPropertyDescriptor","ownKeys","deleteProperty","p","unfrozen","isArray","from","descriptors","forEach","desc","configurable","create","prevObj","nextObj","cache","is","hit","n","g","changed","h","prevKeys","length","nextKeys","k","i","o","isChanged","trackMemo","mark","affectedToPathList","onlyWithValues","list","seen","WeakSet","walk","path","_used$HAS_KEY_PROPERT","String","push","segment","_used$HAS_OWN_KEY_PRO","_used$KEYS_PROPERTY","replaceNewProxy","fn"],"sources":["C:\\Users\\USER\\Documents\\demo-react\\node_modules\\proxy-compare\\src\\index.ts"],"sourcesContent":["// symbols\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\nconst HAS_KEY_PROPERTY = 'h';\nconst ALL_OWN_KEYS_PROPERTY = 'w';\nconst HAS_OWN_KEY_PROPERTY = 'o';\nconst KEYS_PROPERTY = 'k';\n\n// function to create a new bare proxy\nlet newProxy = <T extends object>(\n  target: T,\n  handler: ProxyHandler<T>,\n) => new Proxy(target, handler);\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfrozenCache = new WeakMap<object, object>();\nconst unfreeze = <T extends object>(obj: T): T => {\n  let unfrozen = unfrozenCache.get(obj);\n  if (!unfrozen) {\n    if (Array.isArray(obj)) {\n      // Arrays need a special way to copy\n      unfrozen = Array.from(obj);\n    } else {\n      // For non-array objects, we create a new object keeping the prototype\n      // with changing all configurable options (otherwise, proxies will complain)\n      const descriptors = Object.getOwnPropertyDescriptors(obj);\n      Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n      unfrozen = Object.create(getProto(obj), descriptors);\n    }\n    unfrozenCache.set(obj, unfrozen as object);\n  }\n  return unfrozen as T;\n};\n\ntype HasKeySet = Set<string | symbol>\ntype HasOwnKeySet = Set<string | symbol>\ntype KeysSet = Set<string | symbol>\ntype Used = {\n  [HAS_KEY_PROPERTY]?: HasKeySet;\n  [ALL_OWN_KEYS_PROPERTY]?: true;\n  [HAS_OWN_KEY_PROPERTY]?: HasOwnKeySet;\n  [KEYS_PROPERTY]?: KeysSet;\n};\ntype Affected = WeakMap<object, Used>;\ntype ProxyHandlerState<T extends object> = {\n  readonly [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object> | undefined;\n  [AFFECTED_PROPERTY]?: Affected;\n}\ntype ProxyCache<T extends object> = WeakMap<\n  object,\n  readonly [ProxyHandler<T>, ProxyHandlerState<T>]\n>;\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  const state: ProxyHandlerState<T> = {\n    [FROZEN_PROPERTY]: frozen,\n  };\n  let trackObject = false; // for trackMemo\n  const recordUsage = (\n    type:\n      | typeof HAS_KEY_PROPERTY\n      | typeof ALL_OWN_KEYS_PROPERTY\n      | typeof HAS_OWN_KEY_PROPERTY\n      | typeof KEYS_PROPERTY,\n    key?: string | symbol,\n  ) => {\n    if (!trackObject) {\n      let used = (state[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = {};\n        (state[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      if (type === ALL_OWN_KEYS_PROPERTY) {\n        used[ALL_OWN_KEYS_PROPERTY] = true;\n      } else {\n        let set = used[type];\n        if (!set) {\n          set = new Set();\n          used[type] = set;\n        }\n        set.add(key as string | symbol);\n      }\n    }\n  };\n  const recordObjectAsUsed = () => {\n    trackObject = true;\n    (state[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(KEYS_PROPERTY, key);\n      return createProxy(\n        Reflect.get(target, key),\n        (state[AFFECTED_PROPERTY] as Affected),\n        state[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed();\n        return true;\n      }\n      recordUsage(HAS_KEY_PROPERTY, key);\n      return Reflect.has(target, key);\n    },\n    getOwnPropertyDescriptor(target, key) {\n      recordUsage(HAS_OWN_KEY_PROPERTY, key);\n      return Reflect.getOwnPropertyDescriptor(target, key);\n    },\n    ownKeys(target) {\n      recordUsage(ALL_OWN_KEYS_PROPERTY);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return [handler, state] as const;\n};\n\nconst getOriginalObject = <T extends object>(obj: T) => (\n  // unwrap proxy\n  (obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj })[GET_ORIGINAL_SYMBOL]\n  // otherwise\n  || obj\n);\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const target = getOriginalObject(obj);\n  const frozen = isFrozen(target);\n  let handlerAndState = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!handlerAndState || handlerAndState[1][FROZEN_PROPERTY] !== frozen) {\n    handlerAndState = createProxyHandler<typeof target>(target, frozen);\n    handlerAndState[1][PROXY_PROPERTY] = newProxy(\n      frozen ? unfreeze(target) : target,\n      handlerAndState[0],\n    );\n    if (proxyCache) {\n      proxyCache.set(target, handlerAndState);\n    }\n  }\n  handlerAndState[1][AFFECTED_PROPERTY] = affected as Affected;\n  handlerAndState[1][PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return handlerAndState[1][PROXY_PROPERTY] as typeof target;\n};\n\nconst isAllOwnKeysChanged = (prevObj: object, nextObj: object) => {\n  const prevKeys = Reflect.ownKeys(prevObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return prevKeys.length !== nextKeys.length\n    || prevKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} prevObj - The previous object to compare.\n * @param {object} nextObj - Object to compare with the previous one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const obj = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(obj, affected);\n *\n * proxy.a\n *\n * isChanged(obj, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(obj, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  prevObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(prevObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(prevObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(getOriginalObject(prevObj));\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(prevObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(prevObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  try {\n    for (const key of used[HAS_KEY_PROPERTY] || []) {\n      changed = Reflect.has(prevObj, key) !== Reflect.has(nextObj, key);\n      if (changed) return changed;\n    }\n    if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n      changed = isAllOwnKeysChanged(prevObj, nextObj);\n      if (changed) return changed;\n    } else {\n      for (const key of used[HAS_OWN_KEY_PROPERTY] || []) {\n        const hasPrev = !!Reflect.getOwnPropertyDescriptor(prevObj, key);\n        const hasNext = !!Reflect.getOwnPropertyDescriptor(nextObj, key);\n        changed = hasPrev !== hasNext;\n        if (changed) return changed;\n      }\n    }\n    for (const key of used[KEYS_PROPERTY] || []) {\n      changed = isChanged(\n        (prevObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n      if (changed) return changed;\n    }\n    if (changed === null) changed = true;\n    return changed;\n  } finally {\n    if (cache) {\n      cache.set(prevObj, {\n        [NEXT_OBJECT_PROPERTY]: nextObj,\n        [CHANGED_PROPERTY]: changed,\n      });\n    }\n  }\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Object.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param obj - Object to mark as tracked or not.\n * @param mark - Boolean indicating whether you want to track this object or not.\n * @returns - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n/**\n * Convert `affected` to path list\n *\n * `affected` is a weak map which is not printable.\n * This function is can convert it to printable path list.\n * It's for debugging purpose.\n *\n * @param obj - An object that is used with `createProxy`.\n * @param affected - A weak map that is used with `createProxy`.\n * @param onlyWithValues - An optional boolean to exclude object getters.\n * @returns - An array of paths.\n */\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n  onlyWithValues?: boolean,\n) => {\n  const list: (string | symbol)[][] = [];\n  const seen = new WeakSet();\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    if (seen.has(x as object)) {\n      // for object with cycles\n      return;\n    }\n    if (isObject(x)) {\n      seen.add(x);\n    }\n    const used = isObject(x) && (affected as Affected).get(getOriginalObject(x));\n    if (used) {\n      used[HAS_KEY_PROPERTY]?.forEach((key) => {\n        const segment = `:has(${String(key)})`;\n        list.push(path ? [...path, segment] : [segment]);\n      });\n      if (used[ALL_OWN_KEYS_PROPERTY] === true) {\n        const segment = ':ownKeys';\n        list.push(path ? [...path, segment] : [segment]);\n      } else {\n        used[HAS_OWN_KEY_PROPERTY]?.forEach((key) => {\n          const segment = `:hasOwn(${String(key)})`;\n          list.push(path ? [...path, segment] : [segment]);\n        });\n      }\n      used[KEYS_PROPERTY]?.forEach((key) => {\n        if (!onlyWithValues || 'value' in (Object.getOwnPropertyDescriptor(x, key) || {})) {\n          walk((x as any)[key], path ? [...path, key] : [key]);\n        }\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n\n/**\n * replace newProxy function.\n *\n * This can be used if you want to use proxy-polyfill.\n * Note that proxy-polyfill can't polyfill everything.\n * Use it at your own risk.\n */\nexport const replaceNewProxy = (fn: typeof newProxy) => {\n  newProxy = fn;\n};\n"]},"metadata":{},"sourceType":"module"}