import { AuthenticationResult } from '../global';
export { singlePromise, retryPromise } from './promise';
export { hasAuthParams, loginError, tokenError } from './auth';
export { createContextAndHook } from './create-context-and-hook';
export * from './url';
export * from './query';
type MessageTypes = {
    initialization: string;
    messageTypeToSend: string;
    responseTypes: string[];
};
type PopupMessageTypes = Pick<MessageTypes, 'responseTypes'>;
type WalletLoginPayload = {
    address: string;
    signature: string;
    device_id: string;
};
type MagicLinkLoginPayload = {
    email: string;
    isVerificationEmail?: boolean;
};
export declare const runLoginPopup: (loginUrl: string, eventOrigin: string, messageTypes: PopupMessageTypes, sessionId: string) => Promise<AuthenticationResult>;
export declare const runLoginIframe: (authorizeUrl: string, eventOrigin: string, method: 'wallet' | 'magicLink', messageTypes: MessageTypes, payload: WalletLoginPayload | MagicLinkLoginPayload, timeoutInSeconds?: number) => Promise<AuthenticationResult>;
export declare const runWalletLoginIframe: (authorizeUrl: string, eventOrigin: string, payload: WalletLoginPayload, timeoutInSeconds?: number) => Promise<AuthenticationResult>;
export declare const runMagicLinkLoginIframe: (authorizeUrl: string, eventOrigin: string, payload: MagicLinkLoginPayload, timeoutInSeconds?: number) => Promise<AuthenticationResult>;
export declare const runIframeWithType: (authorizeUrl: string, eventOrigin: string, timeoutInSeconds: number, expectedType: string) => Promise<AuthenticationResult>;
export declare const runIframe: (authorizeUrl: string, eventOrigin: string, timeoutInSeconds?: number) => Promise<AuthenticationResult>;
export declare const getCrypto: () => Crypto;
export declare const getCryptoSubtle: () => any;
export declare const encode: (value: string) => string;
export declare const decode: (value: string) => string;
export declare const createQueryParams: (params: any) => string;
export declare const sha256: (s: string) => Promise<any>;
export declare const urlDecodeB64: (input: string) => string;
export declare const bufferToBase64UrlEncoded: (input: number[] | Uint8Array) => string;
export declare const validateCrypto: () => void;
