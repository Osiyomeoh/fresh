/**
 * For context on the istanbul ignore statements below, see:
 * https://github.com/gotwarlost/istanbul/issues/690
 */
/**
 * Thrown when network requests to the Auth server fail.
 */
export declare class GenericError extends Error {
    error: string;
    error_description: string;
    status_code?: number;
    constructor(error: string, error_description: string, status_code?: number);
    static fromPayload({ error, error_description, }: {
        error: string;
        error_description: string;
    }): GenericError;
}
/**
 * Thrown when handling the redirect callback fails, will be one of SlashAuth's
 */
export declare class AuthenticationError extends GenericError {
    state: string;
    appState: any;
    constructor(error: string, error_description: string, state: string, appState?: any);
}
/**
 * Thrown when silent auth times out (usually due to a configuration issue) or
 * when network requests to the Auth server timeout.
 */
export declare class TimeoutError extends GenericError {
    constructor();
}
/**
 * Error thrown when the login popup times out (if the user does not complete auth)
 */
export declare class PopupTimeoutError extends TimeoutError {
    popup: Window;
    constructor(popup: Window);
}
export declare class PopupCancelledError extends GenericError {
    popup: Window;
    constructor(popup: Window);
}
/**
 * Error thrown when the token exchange results in a `mfa_required` error
 */
export declare class MfaRequiredError extends GenericError {
    mfa_token: string;
    constructor(error: string, error_description: string, mfa_token: string);
}
/**
 * An OAuth2 error will come from the authorization server and will have at least an `error` property which will
 * be the error code. And possibly an `error_description` property
 *
 * See: https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.3.1.2.6
 */
export declare class OAuthError extends Error {
    error: string;
    error_description?: string;
    constructor(error: string, error_description?: string);
}
export declare class NotLoggedInError extends Error {
    error: string;
    error_description?: string;
    constructor(error: string, error_description?: string);
}
export declare class EmailRequiredError extends Error {
    constructor();
}
