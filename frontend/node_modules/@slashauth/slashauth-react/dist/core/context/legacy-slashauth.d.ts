import React from 'react';
import { Account, CacheLocation, GetIdTokenClaimsOptions, GetTokensOptions, IdToken, LogoutOptions } from '../../shared/global';
import { SlashAuthStyle } from '../../shared/types';
import { ObjectMap } from '../../shared/utils/object';
import { ProviderOptions, SignInOptions } from '../../types/slashauth';
type AuthFunctions = {
    getTokens: (options?: GetTokensOptions) => Promise<string>;
    openSignIn: (options?: SignInOptions) => Promise<void>;
    logout: (options?: LogoutOptions) => Promise<void> | void;
    getIdTokenClaims: (options?: GetIdTokenClaimsOptions) => Promise<IdToken>;
    checkSession: (options?: GetTokensOptions) => Promise<boolean>;
};
type UIFunctions = {
    mountSignIn: (node: HTMLDivElement, options: SignInOptions) => void;
    mountDropDown: (node: HTMLDivElement) => void;
    updateAppearanceOverride: (overrides?: SlashAuthStyle) => void;
};
type SlashAuthAPIFunctions = {
    hasRole: (roleName: string) => Promise<boolean>;
    hasOrgRole: (organizationID: string, roleName: string) => Promise<boolean>;
    getRoleMetadata: (roleName: string) => Promise<ObjectMap>;
};
type Web3Fields = {
    connectedWallet: string | null;
    ethereum: any;
    provider: any;
    connect: (transparent: boolean) => Promise<string | null>;
};
type UserFields = {
    isAuthenticated: boolean;
    account?: Account;
};
type StateContextFields = {
    error?: Error;
    isLoading: boolean;
    initialized: boolean;
    isTwoStep: boolean;
};
type LegacyContextFields = {
    loginFlowID: null;
    step: null;
    nonceToSign: null;
    isLoggingIn: boolean;
    loginRequested: boolean;
    loginOptions: null;
    loginType: null;
    requirements: null;
    additionalInfo: null;
    codeVerifier: null;
    isLoginReady: null;
    authedWallet: null;
};
export type SlashAuthContextProviderState = AuthFunctions & SlashAuthAPIFunctions & UIFunctions & Web3Fields & UserFields & StateContextFields & LegacyContextFields;
export interface SlashAuthProviderOptions {
    providers?: ProviderOptions;
    /**
     * The child nodes your Provider has wrapped
     */
    children?: React.ReactNode;
    /**
     * Your SlashAuth account domain such as `'login.slashauth.xyz'`
     */
    domain?: string;
    /**
     * The issuer to be used for validation of JWTs, optionally defaults to the domain above
     */
    issuer?: string;
    /**
     * The Client ID found on your Application settings page
     */
    clientID: string;
    /**
     * The value in seconds used to account for clock skew in JWT expirations.
     * Typically, this value is no more than a minute or two at maximum.
     * Defaults to 60s.
     */
    leeway?: number;
    /**
     * The location to use when storing cache data. Valid values are `memory` or `localstorage`.
     * The default setting is `memory`.
     *
     */
    cacheLocation?: CacheLocation;
    /**
     * Specify a custom cache implementation to use for token storage and retrieval. This setting takes precedence over `cacheLocation` if they are both specified.
     *
     * NOTE: Not exposing this as exporting ICache type breaks ts < 3.8
     */
    /**
     * A maximum number of seconds to wait before declaring background calls to /authorize as failed for timeout
     * Defaults to 60s.
     */
    /**
     * Changes to recommended defaults, like defaultScope
     */
    /**
     * Maximum allowable elapsed time (in seconds) since authentication.
     * If the last time the user authenticated is greater than this value,
     * the user must be reauthenticated.
     */
    /**
     * The default audience to be used for requesting API access.
     */
    /**
     * The Id of an organization to log in to.
     *
     * This will specify an `organization` parameter in your user's login request and will add a step to validate
     * the `org_id` claim in your user's ID Token.
     */
    /**
     * The Id of an invitation to accept. This is available from the user invitation URL that is given when participating in a user invitation flow.
     */
    /**
     * The name of the connection configured for your application.
     * If null, it will redirect to the SlashAuth Login Page and show
     * the Login Widget.
     */
    /**
     * If you need to send custom parameters to the Authorization Server,
     * make sure to use the original parameter name.
     */
    [key: string]: any;
}
export declare function SlashAuthProvider(props: SlashAuthProviderOptions): JSX.Element | null;
export declare function _SlashAuthProvider(props: SlashAuthProviderOptions): JSX.Element | null;
type _Props = {
    children: React.ReactNode;
};
export declare function LegacyProvider({ children }: _Props): JSX.Element;
export declare const useSlashAuth: () => SlashAuthContextProviderState;
export {};
