import React from 'react';
import { SlashAuthOptions, SlashAuthStyle } from '../../shared/types';
import { SlashAuth } from '../slashauth';
import { Environment } from './types/environment';
import { ModalType } from './types/modal';
import { AvailableComponentProps, SignInProps } from './types/ui-components';
export type ComponentListener = (payload: ComponentListenerPayload) => void;
export type ComponentListenerPayload = {
    action: 'open' | 'close' | 'mount' | 'unmount';
    type: ModalType;
};
export type UnsubscribeFn = () => void;
export interface ComponentControls {
    mountComponent: (params: {
        appearanceKey: Uncapitalize<AvailableComponentNames>;
        name: AvailableComponentNames;
        node: HTMLDivElement;
        props: AvailableComponentProps;
    }) => void;
    unmountComponent: (params: {
        node: HTMLDivElement;
    }) => void;
    openModal: <T extends ModalType>(modalType: T, props: T extends ModalType.SignIn ? SignInProps : never) => void;
    updateProps: (params: {
        appearance?: SlashAuthStyle | undefined;
        options?: SlashAuthOptions | undefined;
        node?: HTMLDivElement;
        props?: unknown;
        appearanceOverride?: SlashAuthStyle | undefined;
    }) => void;
    closeModal: (modalType: ModalType) => void;
    addListener: (listener: ComponentListener) => UnsubscribeFn;
}
declare const AvailableComponents: {
    SignIn: React.ComponentType<SignInProps>;
    DropDown: () => JSX.Element;
};
type AvailableComponentNames = keyof typeof AvailableComponents;
interface ComponentManagerComponentProps {
    slashAuth: SlashAuth;
    environment: Environment;
    options: SlashAuthOptions;
}
declare const mountComponentManager: (slashAuth: SlashAuth, environment: Environment, options: SlashAuthOptions) => ComponentControls;
declare const ComponentManagerComponent: (props: ComponentManagerComponentProps) => JSX.Element;
export { mountComponentManager, ComponentManagerComponent };
