import { Provider } from '@wagmi/core';
import { createClient, Connector } from 'wagmi';
import { Signer } from 'ethers';
import { WagmiOptions } from '../../types/slashauth';
export type Web3ManagerEventType = 'accountChange' | 'chainChange' | 'connect' | 'disconnect';
type Config = {
    appName: string;
    wagmiOptions?: WagmiOptions;
    alchemy?: {
        apiKey: string;
    };
    infura?: {
        apiKey: string;
    };
    publicConf?: {
        disable: boolean;
    };
};
type AccountChangeListener = (account: string) => void;
type ChainChangeListener = (chain: number | string, unsupported: boolean) => void;
type ConnectListener = (connector: Connector) => void;
type DisconnectListener = () => void;
type EventListener = (eventType: Web3ManagerEventType, mgr: Web3Manager) => void;
export declare class Web3Manager {
    #private;
    get client(): ReturnType<typeof createClient>;
    get connected(): boolean;
    get provider(): Provider | undefined;
    get signer(): Signer | undefined;
    get address(): string | undefined;
    get connectedConnector(): Connector | null;
    get connectors(): Connector[];
    private unsubscribeFns;
    constructor(config: Config);
    clearState(): Promise<void>;
    onEvent(listener: EventListener): void;
    offEvent(listener: EventListener): void;
    onConnect(listener: ConnectListener): void;
    offConnect(listener: ConnectListener): void;
    onAccountChange(listener: AccountChangeListener): void;
    offAccountChange(listener: AccountChangeListener): void;
    onChainChange(listener: ChainChangeListener): void;
    offChainChange(listener: ChainChangeListener): void;
    onDisconnect(listener: DisconnectListener): void;
    offDisconnect(listener: DisconnectListener): void;
    disconnect(): Promise<void>;
    autoConnect(): Promise<string | null>;
    connectToConnectorWithID(id: string): Promise<void>;
    connectToConnector(connector: Connector): Promise<void>;
}
export {};
