import { LogoutOptions, SlashAuthClientOptions } from '../shared/global';
import { SlashAuthListenerPayload, SlashAuthStyle, SlashAuthWeb3ListenerPayload } from '../shared/types';
import { ConnectOptions, SignInOptions } from '../types/slashauth';
import SlashAuthClient from './client';
import { mountComponentManager } from './ui/manager';
import { User } from './user';
import { Web3Manager } from './web3/manager';
export type Listener = (payload: SlashAuthListenerPayload) => void;
export type UnsubscribeCallback = () => void;
/**
 * This is the main class for the repo. This handles state management
 * and should be used for interacting with elements.
 */
export declare class SlashAuth {
    #private;
    static mountComponentManager?: typeof mountComponentManager;
    constructor(web3Manager: Web3Manager, options: SlashAuthClientOptions);
    get appName(): string;
    get manager(): Web3Manager;
    get client(): SlashAuthClient;
    get user(): User;
    getWalletContext(): SlashAuthWeb3ListenerPayload;
    addListener(listener: Listener): UnsubscribeCallback;
    isReady: () => boolean;
    initialize(): Promise<void>;
    connectWallet: (options?: ConnectOptions) => Promise<string | null>;
    openSignInSync: (options?: SignInOptions) => Promise<void>;
    checkLoginState: () => Promise<void>;
    logout: (options?: LogoutOptions) => Promise<void>;
    updateAppearanceOverride: (config?: SlashAuthStyle) => void;
    mountSignIn: (node: HTMLDivElement, options?: SignInOptions) => void;
    mountDropDown: (node: HTMLDivElement) => void;
    unmountComponent: (node: HTMLDivElement) => void;
    openSignIn: (options?: SignInOptions) => void;
    closeSignIn: () => void;
    private fetchAppModalConfig;
    private assertComponentsReady;
}
