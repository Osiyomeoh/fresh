import { ExchangeTokenEndpointOptions, GetAppConfigOptions, GetAppConfigResponse, GetNonceToSignEndpointOptions, GetNonceToSignResponse, GetRoleMetadataOptions, GetRoleMetadataResponse, HasOrgRoleOptions, HasRoleOptions, HasRoleResponse, LoginWithSignedNonceOptions, LoginWithSignedNonceResponse, RefreshTokenOptions, RefreshTokenResponse, TokenEndpointOptions, TokenEndpointResponse, UserAccountSettings, CreateBlobResponse } from '../shared/global';
export declare function logoutAPICall(url: string, accessToken: string): Promise<any>;
export declare function getAppConfig({ baseUrl, client_id, }: GetAppConfigOptions): Promise<GetAppConfigResponse>;
export declare function getUserAccountSettings({ baseUrl, clientID, userID, accessToken, }: {
    baseUrl: any;
    clientID: any;
    userID: any;
    accessToken: any;
}): Promise<UserAccountSettings>;
export declare function patchUser({ baseUrl, clientID, userID, accessToken, user, }: {
    baseUrl: any;
    clientID: any;
    userID: any;
    accessToken: any;
    user: any;
}): Promise<UserAccountSettings>;
export declare function deleteConnection({ baseUrl, clientID, userID, connectionID, accessToken, }: {
    baseUrl: any;
    clientID: any;
    userID: any;
    connectionID: any;
    accessToken: any;
}): Promise<void>;
export declare function getUserProfileImageUploadUrl({ baseUrl, clientID, userID, accessToken, fileSize, mimeType, }: {
    baseUrl: any;
    clientID: any;
    userID: any;
    accessToken: any;
    fileSize: any;
    mimeType: any;
}): Promise<CreateBlobResponse>;
export declare function patchBlob({ baseUrl, clientID, blobID, accessToken, status, }: {
    baseUrl: any;
    clientID: any;
    blobID: any;
    accessToken: any;
    status: any;
}): Promise<void>;
export declare function getNonceToSign({ baseUrl, ...options }: GetNonceToSignEndpointOptions): Promise<GetNonceToSignResponse>;
export declare function exchangeToken({ baseUrl, requirements, accessToken, ...options }: ExchangeTokenEndpointOptions): Promise<LoginWithSignedNonceResponse>;
export declare function loginWithSignedNonce({ baseUrl, ...options }: LoginWithSignedNonceOptions): Promise<LoginWithSignedNonceResponse>;
export declare function refreshToken({ baseUrl, ...options }: RefreshTokenOptions): Promise<RefreshTokenResponse>;
export declare const hasRoleAPICall: ({ baseUrl, clientID, roleName, accessToken, }: HasRoleOptions) => Promise<HasRoleResponse>;
export declare const hasOrgRoleAPICall: ({ baseUrl, clientID, organizationID, roleName, accessToken, }: HasOrgRoleOptions) => Promise<HasRoleResponse>;
export declare const getRoleMetadataAPICall: ({ baseUrl, clientID, roleName, accessToken, }: GetRoleMetadataOptions) => Promise<GetRoleMetadataResponse>;
export declare function oauthToken({ baseUrl, timeout, audience, scope, slashAuthClient, useFormData, ...options }: TokenEndpointOptions, worker?: Worker): Promise<TokenEndpointResponse>;
